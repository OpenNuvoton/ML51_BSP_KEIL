C51 COMPILER V9.60.0.0   LCDLIB                                                            04/28/2025 14:43:22 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCDLIB
OBJECT MODULE PLACED IN .\Output\lcdlib.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Library\LCDLib\lcdlib.c LARGE OMF2 OPTIMIZE(4,SPEED) BROWSE 
                    -INCDIR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc;..\..\..\..\Library\StdDriver\lib;..\..\..\.
                    -.\Library\LCDLib;..\..\..\..\Library\TKlib) DEFINE(DEMO_FREERUN,BOARD_NUMAKER,MASS_FINETUNE) DEBUG PRINT(.\LST\lcdlib.ls
                    -t) TABS(2) OBJECT(.\Output\lcdlib.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          
   9          /**************************************************************************//**
  10           * @file     LCDSubCommon.c
  11           * @version  V1.00
  12           * $Revision: 6 $
  13           * $Date: 2020/05/02 7:10p $
  14           * @brief    ML56 series LCDSubCommon source file
  15           *
  16           * @note
  17           * Copyright (C) 2020 Nuvoton Technology Corp. All rights reserved.
  18          *****************************************************************************/
  19          
  20          #include "ML51.H"
  21          #include "lcdlib.h"
  22          
  23          
  24          void LCDLIB_Printf(uint32_t u32Zone, char *InputStr)
  25          {
  26   1          uint32_t    i, index, ch, len;
  27   1          uint32_t    com, seg;
  28   1          uint16_t    DispData;
  29   1      
  30   1          len = strlen(InputStr);
  31   1      
  32   1          /* Fill out all characters on display */
  33   1          for (index = 0; index < g_LCDZoneInfo[u32Zone].u8LCDDispTableNum; index++)
  34   1          {
  35   2              if (index < len)
  36   2              {
  37   3                  ch = *InputStr;
  38   3              }
  39   2              else
  40   2              {
  41   3                  /* Padding with SPACE */
  42   3                  ch = 0x20;
  43   3              }
  44   2      
  45   2              /* For Main Zone */
  46   2              if (u32Zone == ZONE_MAIN_DIGIT)
C51 COMPILER V9.60.0.0   LCDLIB                                                            04/28/2025 14:43:22 PAGE 2   

  47   2              {
  48   3                  /* The Main Digit Table is an ASCII table beginning with "SPACE" (hex is 0x20) */
  49   3                  ch       = ch - 0x20;
  50   3                  DispData =*(g_LCDZoneInfo[u32Zone].pu16LCDDispTable + ch);
  51   3              }
  52   2              /* For Other Zones (Support '0' ~ '9' only) */
  53   2              else if ((ch >= '0') && (ch <= '9'))
  54   2              {
  55   3                  ch = ch - '0';
  56   3                  DispData = *(g_LCDZoneInfo[u32Zone].pu16LCDDispTable + ch);
  57   3              }
  58   2              /* Out of definition. Will show "SPACE" */
  59   2              else
  60   2              {
  61   3                  DispData = 0;
  62   3              }
  63   2      
  64   2              for (i = 0; i < g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum; i++)
  65   2              {
  66   3                  com = *(g_LCDZoneInfo[u32Zone].pu8GetLCDComSeg
  67   3                          + (index * g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum * 2)
  68   3                          + (i * 2) + 0);
  69   3                  seg = *(g_LCDZoneInfo[u32Zone].pu8GetLCDComSeg
  70   3                          + (index * g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum * 2)
  71   3                          + (i * 2) + 1);
  72   3      
  73   3                  if (DispData & (1 << i))
  74   3                  {
  75   4                      /* Turn on display */
  76   4                      LCD_SetOnePixel(com, seg, 1);
  77   4                  }
  78   3                  else
  79   3                  {
  80   4                      /* Turn off display */
  81   4                      LCD_SetOnePixel(com, seg, 0);
  82   4                  }
  83   3      
  84   3              }
  85   2      
  86   2              InputStr++;
  87   2          }
  88   1      }
  89          
  90          /**
  91           *  @brief Display number on LCD
  92           *
  93           *  @param[in]  u32Zone     the assigned number of display area
  94           *  @param[in]  InputNum    number to show on display
  95           *
  96           *  @return None
  97           */
  98          void LCDLIB_PrintNumber(uint32_t u32Zone, uint32_t InputNum)
  99          {
 100   1          uint32_t    i, div;
 101   1          uint32_t    com, seg;
 102   1          uint32_t    index;
 103   1          uint32_t    val;
 104   1          uint16_t    DispData;
 105   1      
 106   1          /* Extract useful digits */
 107   1          div = 1;
 108   1      
C51 COMPILER V9.60.0.0   LCDLIB                                                            04/28/2025 14:43:22 PAGE 3   

 109   1          /* Fill out all characters on display */
 110   1      
 111   1          index = g_LCDZoneInfo[u32Zone].u8LCDDispTableNum;
 112   1      
 113   1          while (index != 0)
 114   1          {
 115   2              index--;
 116   2      
 117   2              val = (InputNum / div) % 10;
 118   2      
 119   2              if (u32Zone == ZONE_MAIN_DIGIT)
 120   2                  val += 16; /* The Main Digit Table is an ASCII table beginning with "SPACE" */
 121   2      
 122   2               DispData = *(g_LCDZoneInfo[u32Zone].pu16LCDDispTable + val);
 123   2      
 124   2              for (i = 0; i < g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum; i++)
 125   2              {
 126   3                  com = *(g_LCDZoneInfo[u32Zone].pu8GetLCDComSeg
 127   3                          + (index * g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum * 2)
 128   3                          + (i * 2) + 0);
 129   3                  seg = *(g_LCDZoneInfo[u32Zone].pu8GetLCDComSeg
 130   3                          + (index * g_LCDZoneInfo[u32Zone].u8GetLCDComSegNum * 2)
 131   3                          + (i * 2) + 1);
 132   3      
 133   3                  if (DispData & (1 << i))
 134   3                  {
 135   4                      /* Turn on display */
 136   4                      LCD_SetOnePixel(com, seg, 1);
 137   4                  }
 138   3                  else
 139   3                  {
 140   4                      /* Turn off display */
 141   4                      LCD_SetOnePixel(com, seg, 0);
 142   4                  }
 143   3      
 144   3              }
 145   2      
 146   2              div = div * 10;
 147   2          }
 148   1      }
 149          
 150          
 151          void LCDLIB_SetSymbol(uint32_t u32Symbol, uint32_t u32OnOff)
 152          {
 153   1          uint32_t com, seg;
 154   1      
 155   1          com = (u32Symbol & 0xF);
 156   1          seg = ((u32Symbol & 0xFF0) >> 4);
 157   1      
 158   1          if (u32OnOff)
 159   1              LCD_SetOnePixel(com, seg, 1); /* Turn on display */
 160   1          else
 161   1              LCD_SetOnePixel(com, seg, 0); /* Turn off display */
 162   1      
 163   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2106    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =    608      83
   PDATA SIZE       =   ----    ----
C51 COMPILER V9.60.0.0   LCDLIB                                                            04/28/2025 14:43:22 PAGE 4   

   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
