C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\Output\gpio.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\..\..\Library\StdDriver\src\gpio.c OMF2 OPTIMIZE(4,SPEED) BROWSE I
                    -NCDIR(..\..\..\..\Library\Device\Include;..\..\..\..\Library\StdDriver\inc) DEBUG PRINT(.\LST\gpio.lst) TABS(2) OBJECT(.
                    -\Output\gpio.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* SPDX-License-Identifier: Apache-2.0                                                                    
             - */
   4          /* Copyright(c) 2020 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   5          /*                                                                                                        
             - */
   6          /*--------------------------------------------------------------------------------------------------------
             --*/
   7          
   8          #include "ML51.h"
   9          
  10           /**
  11            * @brief GPIO Mode setting
  12            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
  13            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
  14            *                  - \ref Port 0
  15            *                  - \ref Port 1
  16            *                  - \ref Port 2
  17            *                  - \ref Port 3
  18            *                  - \ref Port 4
  19            *                  - \ref Port 5
  20            *                  - \ref Port 6
  21            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
  22            *                  - \ref SET_BIT0
  23            *                  - \ref SET_BIT1
  24            *                  - \ref SET_BIT2
  25            *                  - \ref SET_BIT3
  26            *                  - \ref SET_BIT4
  27            *                  - \ref SET_BIT5
  28            *                  - \ref SET_BIT6
  29            *                  - \ref SET_BIT7
  30            *                  - \ref SET_BIT0|SET_BIT7
  31            * @param[in] u8Mode Decides the GPIO mode to select.
  32            *                  - \ref GPIO_MODE_INPUT
  33            *                  - \ref GPIO_MODE_PUSHPULL
  34            *                  - \ref GPIO_MODE_QUASI
  35            *                  - \ref GPIO_MODE_OPENDRAI
  36            * @return  None
  37            * @note Confirm multi function pin is defined as GPIO first. call function_define_ML51.h to define.
  38            * @exmaple :   GPIO_SetMode(Port1, BIT0|BIT7, GPIO_MODE_QUASI);
  39            */
  40          void GPIO_SetMode(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8Mode)
  41          {
  42   1          unsigned char u8PnM1, u8PnM2;
  43   1      
  44   1          SFRS = 1;
  45   1          switch(u8Port)
  46   1          {
  47   2              case Port0:  u8PnM1 = P0M1;  u8PnM2 = P0M2;  break;
C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 2   

  48   2              case Port1:  u8PnM1 = P1M1;  u8PnM2 = P1M2;  break;
  49   2              case Port2:  u8PnM1 = P2M1;  u8PnM2 = P2M2;  break;
  50   2              case Port3:  u8PnM1 = P3M1;  u8PnM2 = P3M2;  break;
  51   2              case Port4:  u8PnM1 = P4M1;  u8PnM2 = P4M2;  break;
  52   2              case Port5:  u8PnM1 = P5M1;  u8PnM2 = P5M2;  break;
  53   2              case Port6:  SFRS=2; u8PnM1 = P6M1;  u8PnM2 = P6M2;  break;
  54   2          }
  55   1          switch(u8Mode)
  56   1          {
  57   2              case GPIO_MODE_QUASI:
  58   2                  u8PnM1 &= ~u8PinMask;
  59   2                  u8PnM2 &= ~u8PinMask;
  60   2                  break;
  61   2              case GPIO_MODE_PUSHPULL:
  62   2                  u8PnM1 &= ~u8PinMask;
  63   2                  u8PnM2 |= u8PinMask;
  64   2                  break;
  65   2              case GPIO_MODE_INPUT:
  66   2                  u8PnM1 |= u8PinMask; 
  67   2                  u8PnM2 &= ~u8PinMask;
  68   2                  break;
  69   2              case GPIO_MODE_OPENDRAIN:
  70   2                  u8PnM1 |= u8PinMask;
  71   2                  u8PnM2 |= u8PinMask;
  72   2                  break;
  73   2          }
  74   1          switch(u8Port)
  75   1          {
  76   2              case Port0:  P0M1 = u8PnM1;  P0M2 = u8PnM2;  break;
  77   2              case Port1:  P1M1 = u8PnM1;  P1M2 = u8PnM2;  break;
  78   2              case Port2:  P2M1 = u8PnM1;  P2M2 = u8PnM2;  break;
  79   2              case Port3:  P3M1 = u8PnM1;  P3M2 = u8PnM2;  break;
  80   2              case Port4:  P4M1 = u8PnM1;  P4M2 = u8PnM2;  break;
  81   2              case Port5:  P5M1 = u8PnM1;  P5M2 = u8PnM2;  break;
  82   2              case Port6:  SFRS=2;P6M1 = u8PnM1;  P6M2 = u8PnM2;  break;
  83   2          }
  84   1      }
  85          
  86          /**
  87            * @brief GPIO Pull up or Pull down enable setting
  88            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
  89            *                  - \ref Port 0
  90            *                  - \ref Port 1
  91            *                  - \ref Port 2
  92            *                  - \ref Port 3
  93            *                  - \ref Port 4
  94            *                  - \ref Port 5
  95            *                  - \ref Port 6
  96            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
  97            *                  - \ref SET_BIT0
  98            *                  - \ref SET_BIT1
  99            *                  - \ref SET_BIT2
 100            *                  - \ref SET_BIT3
 101            *                  - \ref SET_BIT4
 102            *                  - \ref SET_BIT5
 103            *                  - \ref SET_BIT6
 104            *                  - \ref SET_BIT7
 105            *                  - \ref SET_BIT0|SET_BIT7
 106            * @param[in] u8PullMode Decides the GPIO Pull up or pull down (PullUp/PullDown)
 107            *                  - \ref PULLUP
 108            *                  - \ref PULLDOWN
 109            * @return  None
C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 3   

 110            * @note none
 111            * @exmaple :   GPIO_Pull_Enable(Port1, BIT0|BIT5|BIT7, PullUp);
 112            */
 113          void GPIO_Pull_Enable(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8PullMode)
 114          {
 115   1        SFRS=1;
 116   1        switch (u8PullMode)
 117   1        {
 118   2          case PULLUP:
 119   2              switch(u8Port)
 120   2              {
 121   3                case Port0:  P0UP |= u8PinMask;  break;
 122   3                case Port1:  P1UP |= u8PinMask;  break;
 123   3                case Port2:  P2UP |= u8PinMask;  break;
 124   3                case Port3:  P3UP |= u8PinMask;  break;
 125   3                case Port4:  P4UP |= u8PinMask;  break;
 126   3                case Port5:  P5UP |= u8PinMask;  break;
 127   3                case Port6:  SFRS=2;P6UP |= u8PinMask;  break;
 128   3              }
 129   2          break;
 130   2          case PULLDOWN:
 131   2              switch(u8Port)
 132   2              {
 133   3                case Port0:  P0DW |= u8PinMask;  break;
 134   3                case Port1:  P1DW |= u8PinMask;  break;
 135   3                case Port2:  P2DW |= u8PinMask;  break;
 136   3                case Port3:  P3DW |= u8PinMask;  break;
 137   3                case Port4:  P4DW |= u8PinMask;  break;
 138   3                case Port5:  P5DW |= u8PinMask;  break;
 139   3                case Port6:  SFRS=2;P5DW |= u8PinMask;  break;
 140   3              }
 141   2          break;
 142   2          }
 143   1      }
 144          
 145          
 146           /**
 147            * @brief GPIO Pull up or Pull down disable 
 148            * @param[in] u8Port Decides the GPIO port number Port0 ~ Port5
 149            *                  - \ref Port 0
 150            *                  - \ref Port 1
 151            *                  - \ref Port 2
 152            *                  - \ref Port 3
 153            *                  - \ref Port 4
 154            *                  - \ref Port 5
 155            *                  - \ref Port 6
 156            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
 157            *                  - \ref SET_BIT0
 158            *                  - \ref SET_BIT1
 159            *                  - \ref SET_BIT2
 160            *                  - \ref SET_BIT3
 161            *                  - \ref SET_BIT4
 162            *                  - \ref SET_BIT5
 163            *                  - \ref SET_BIT6
 164            *                  - \ref SET_BIT7
 165            *                  - \ref SET_BIT0|SET_BIT7
 166            * @param[in] u8PullMode Decides the GPIO Pull up or pull down (PullUp/PullDown)
 167            *                  - \ref PULLUP
 168            *                  - \ref PULLDOWN
 169            * @return  None
 170            * @note none
 171            * @exmaple :   GPIO_Pull_Enable(P1,BIT0|BIT5,PullUp);
C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 4   

 172            */
 173          void GPIO_Pull_Disable(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8PullMode)
 174          {
 175   1        SFRS=1;
 176   1        switch (u8PullMode)
 177   1        {
 178   2          case PULLUP:
 179   2              switch(u8Port)
 180   2              {
 181   3                case Port0:  P0UP &= ~u8PinMask;  break;
 182   3                case Port1:  P1UP &= ~u8PinMask;  break;
 183   3                case Port2:  P2UP &= ~u8PinMask;  break;
 184   3                case Port3:  P3UP &= ~u8PinMask;  break;
 185   3                case Port4:  P4UP &= ~u8PinMask;  break;
 186   3                case Port5:  P5UP &= ~u8PinMask;  break;
 187   3                case Port6:  SFRS=2;P6UP &= ~u8PinMask;  break;
 188   3              }
 189   2          break;
 190   2          case PULLDOWN:
 191   2              switch(u8Port)
 192   2              {
 193   3                case Port0:  P0DW &= ~u8PinMask;  break;
 194   3                case Port1:  P1DW &= ~u8PinMask;  break;
 195   3                case Port2:  P2DW &= ~u8PinMask;  break;
 196   3                case Port3:  P3DW &= ~u8PinMask;  break;
 197   3                case Port4:  P4DW &= ~u8PinMask;  break;
 198   3                case Port5:  P5DW &= ~u8PinMask;  break;
 199   3                case Port6:  SFRS=2;P6DW &= ~u8PinMask;  break;
 200   3              }
 201   2          break;
 202   2          }
 203   1      }
 204          
 205           /**
 206            * @brief GPIO Schmitt Triggered Input enable / disable. 
 207            * @param[in] u8Port Decides the GPIO port number 
 208            *                  - \ref Port 0
 209            *                  - \ref Port 1
 210            *                  - \ref Port 2
 211            *                  - \ref Port 3
 212            *                  - \ref Port 4
 213            *                  - \ref Port 5
 214            *                  - \ref Port 6
 215            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
 216            *                  - \ref SET_BIT0
 217            *                  - \ref SET_BIT1
 218            *                  - \ref SET_BIT2
 219            *                  - \ref SET_BIT3
 220            *                  - \ref SET_BIT4
 221            *                  - \ref SET_BIT5
 222            *                  - \ref SET_BIT6
 223            *                  - \ref SET_BIT7
 224            *                  - \ref SET_BIT0|SET_BIT7
 225            * @param[in] u8SStauts Decides the GPIO Schmitt Triggered status
 226            *                  - \ref Enable
 227            *                  - \ref Disable
 228            * @return  None
 229            * @note none
 230            * @exmaple :   GPIO_Pull_Enable(P1,BIT0|BIT5,PullUp);
 231            */
 232          void GPIO_SchmittTrigger(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8SStauts)
 233          {
C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 5   

 234   1      _push_(SFRS);
 235   1        SFRS=1;
 236   1        switch (u8SStauts)
 237   1        {
 238   2          case Enable:
 239   2              switch(u8Port)
 240   2              {
 241   3                case Port0:  P0S |= u8PinMask;  break;
 242   3                case Port1:  P1S |= u8PinMask;  break;
 243   3                case Port2:  P2S |= u8PinMask;  break;
 244   3                case Port3:  P3S |= u8PinMask;  break;
 245   3                case Port4:  P4S |= u8PinMask;  break;
 246   3                case Port5:  P5S |= u8PinMask;  break;
 247   3                case Port6:  SFRS=2; P5S |= u8PinMask;  break;
 248   3              }
 249   2          break;
 250   2          case Disable:
 251   2              switch(u8Port)
 252   2              {
 253   3                case Port0:  P0S &= ~u8PinMask;  break;
 254   3                case Port1:  P1S &= ~u8PinMask;  break;
 255   3                case Port2:  P2S &= ~u8PinMask;  break;
 256   3                case Port3:  P3S &= ~u8PinMask;  break;
 257   3                case Port4:  P4S &= ~u8PinMask;  break;
 258   3                case Port5:  P5S &= ~u8PinMask;  break;
 259   3                case Port6:  SFRS=2; P6S &= ~u8PinMask;  break;
 260   3              }
 261   2          break;
 262   2          }
 263   1      _pop_(SFRS);
 264   1      }
 265          
 266           /**
 267            * @brief GPIO Slew rate Status enable / disable. 
 268            * @param[in] u8Port Decides the GPIO port number 
 269            *                  - \ref Port 0
 270            *                  - \ref Port 1
 271            *                  - \ref Port 2
 272            *                  - \ref Port 3
 273            *                  - \ref Port 4
 274            *                  - \ref Port 5
 275            * @param[in] u8PinMask Decides  bit of the port (SET_BIT0~SET_BIT7 use "|" to define multi bit).
 276            *                  - \ref SET_BIT0
 277            *                  - \ref SET_BIT1
 278            *                  - \ref SET_BIT2
 279            *                  - \ref SET_BIT3
 280            *                  - \ref SET_BIT4
 281            *                  - \ref SET_BIT5
 282            *                  - \ref SET_BIT6
 283            *                  - \ref SET_BIT7
 284            *                  - \ref SET_BIT0|SET_BIT7
 285            * @param[in] u8SRStauts Decides the GPIO Slew rate status
 286            *                  - \ref Enable
 287            *                  - \ref Disable
 288            * @return  None
 289            * @note none
 290            * @exmaple :   GPIO_Pull_Enable(P1,BIT0|BIT5,PullUp);
 291            */
 292          void GPIO_SlewRate(unsigned char u8Port, unsigned char u8PinMask, unsigned char u8SRStauts)
 293          {
 294   1      _push_(SFRS);
 295   1        SFRS=1;
C51 COMPILER V9.60.0.0   GPIO                                                              10/05/2022 15:23:47 PAGE 6   

 296   1        switch (u8SRStauts)
 297   1        {
 298   2          case Enable:
 299   2              switch(u8Port)
 300   2              {
 301   3                case Port0:  P0SR |= u8PinMask;  break;
 302   3                case Port1:  P1SR |= u8PinMask;  break;
 303   3                case Port2:  P2SR |= u8PinMask;  break;
 304   3                case Port3:  P3SR |= u8PinMask;  break;
 305   3                case Port4:  P4SR |= u8PinMask;  break;
 306   3                case Port5:  P5SR |= u8PinMask;  break;
 307   3              }
 308   2          break;
 309   2          case Disable:
 310   2              switch(u8Port)
 311   2              {
 312   3                case Port0:  P0SR &= ~u8PinMask;  break;
 313   3                case Port1:  P1SR &= ~u8PinMask;  break;
 314   3                case Port2:  P2SR &= ~u8PinMask;  break;
 315   3                case Port3:  P3SR &= ~u8PinMask;  break;
 316   3                case Port4:  P4SR &= ~u8PinMask;  break;
 317   3                case Port5:  P5SR &= ~u8PinMask;  break;
 318   3              }
 319   2          break;
 320   2          }
 321   1      _pop_(SFRS);
 322   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    802    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       1
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
