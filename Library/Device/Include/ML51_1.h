/**
  @addtogroup CTRL_REG Special Function Register (SFR)
  @{ */
#include "ML51_XSFR.h"
#include "Function_define_ML51.h"

#include "acmp.h"
#include "adc.h"
#include "bod.h"
#include "capture.h"
#include "delay.h"
#include "eeprom.h"
#include "eeprom_sprom.h"
#include "exint.h"
#include "gpio.h"
#include "i2c.h"
#include "IAP.h"
#include "IAP_sprom.h"
#include "lcd.h"
#include "lowpower.h"
#include "pdma.h"
#include "pinint.h"
#include "power.h"
#include "pwm0.h"
#include "pwm123.h"
#include "rtc.h"
#include "spi.h"
#include "sys.h"
#include "TrimLIRC.h"
#include "uart.h"
#include "uart2.h"
#include "uart3.h"
#include "vref.h"
#include "wdt.h"
#include "wkt.h"



/**
 @addtogroup SFR_PAGE0 SFR Page 0
 @{ */


/**
   @addtogroup SFR_DPL DPL
   Special Function Register DPL
   @{ */

/**
  @var DPL
  Address: 82H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[7:0] |Data Pointer Low Byte
  |        |          |This is the low byte of 16-bit data pointer. DPL combined with DPH
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */
sfr DPL = 0x82;

/**
  @addtogroup SFR_DPL_MACRO Bit Macro Functions
  Bit Macro Functions of DPL
  @{ */

/**@}*/ /* end of SFR_DPL_MACRO group */
/**@}*/ /* end of SFR_DPL group */

/**
   @addtogroup SFR_DPH DPH
   Special Function Register DPH
   @{ */

/**
  @var DPH
  Address: 83H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[15:8]|Data Pointer High Byte
  |        |          |This is the high byte of 16-bit data pointer. DPH combined with DPL
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */
sfr DPH = 0x83;

/**
  @addtogroup SFR_DPH_MACRO Bit Macro Functions
  Bit Macro Functions of DPH
  @{ */





/**@}*/ /* end of SFR_DPH_MACRO group */
/**@}*/ /* end of SFR_DPH group */

/**
   @addtogroup SFR_RWKL RWKL
   Special Function Register RWKL
   @{ */

/**
  @var RWKL
  Address: 86H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RWK[7:0]  |WKT Reload Low Byte
  |        |          |It holds the 16-bit reload value of WKT. Note that RWK should not be
  |        |          |FFFFH if the pre-scale is 1/1 for implement limitation.
 */
sfr RWKL = 0x86;

/**
  @addtogroup SFR_RWKL_MACRO Bit Macro Functions
  Bit Macro Functions of RWKL
  @{ */





/**@}*/ /* end of SFR_RWKL_MACRO group */
/**@}*/ /* end of SFR_RWKL group */

/**
   @addtogroup SFR_PCON PCON
   Special Function Register PCON
   @{ */

/**
  @var PCON
  Address: 87H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6]     |SMOD0     |Serial Port 0 Framing Error Flag Access Enable
  |        |          |0 = SCON.7 accesses to SM0 bit.
  |        |          |1 = SCON.7 accesses to FE bit.
  |[7]     |SMOD      |Serial Port 0 Double Baud Rate Enable
  |        |          |Setting this bit doubles the serial port baud rate when UART0 is in
  |        |          |Mode 2 or when Timer 1 overflow is used as the baud rate source of
  |        |          |UART0 Mode 1 or 3. See Table 6.92 Serial Port 0 Mode / baud rate
  |        |          |Description for details.
 */
sfr PCON = 0x87;

/**
  @addtogroup SFR_PCON_MACRO Bit Macro Functions
  Bit Macro Functions of PCON
  @{ */
#define set_PCON_SMOD                    PCON|=0x80
#define set_PCON_SMOD0                   PCON|=0x40
#define set_PCON_LPR                     PCON|=0x20
#define set_PCON_POF                     PCON|=0x10
#define set_PCON_GF1                     PCON|=0x08
#define set_PCON_GF0                     PCON|=0x04
#define set_PCON_PD                      PCON|=0x02
#define set_PCON_IDLE                    PCON|=0x01
                                                   
#define clr_PCON_SMOD                    PCON&=0x7F
#define clr_PCON_SMOD0                   PCON&=0xBF
#define clr_PCON_LPR                     PCON&=0xDF
#define clr_PCON_POF                     PCON&=0xEF
#define clr_PCON_GF1                     PCON&=0xF7
#define clr_PCON_GF0                     PCON&=0xFB
#define clr_PCON_PD                      PCON&=0xFD
#define clr_PCON_IDLE                    PCON&=0xFE

/**@}*/ /* end of SFR_PCON_MACRO group */
/**@}*/ /* end of SFR_PCON group */

/**
   @addtogroup SFR_TCON TCON
   Special Function Register TCON
   @{ */

/**
  @var TCON
  Address: 88H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IT0       |External Interrupt 0 Type Select
  |        |          |This bit selects by which type that INT0 is triggered.
  |        |          |0 = INT0 is low level triggered.
  |        |          |1 = INT0 is falling edge triggered.
  |[1]     |IE0       |External Interrupt 0 Edge Flag
  |        |          |If IT0 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT0 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT0 input signal¡¦s logic level. Software cannot control it.
  |[2]     |IT1       |External Interrupt 1 Type Select
  |        |          |This bit selects by which type that INT1 is triggered.
  |        |          |0 = INT1 is low level triggered.
  |        |          |1 = INT1 is fallinVg edge triggered.
  |[3]     |IE1       |External Interrupt 1 Edge Flag
  |        |          |If IT1 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT1 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT1 input signal¡¦s logic level. Software cannot control it.
  |[4]     |TR0       |Timer 0 Run Control
  |        |          |0 = Timer 0 Disabled. Clearing this bit will halt Timer 0 and the
  |        |          |current count will be preserved in TH0 and TL0.
  |        |          |1 = Timer 0 Enabled.
  |[5]     |TF0       |Timer 0 Overflow Flag
  |        |          |This bit is set when Timer 0 overflows. It is automatically cleared
  |        |          |via hardware when the program executes the Timer 0 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
  |[6]     |TR1       |Timer 1 Run Control
  |        |          |0 = Timer 1 Disabled. Clearing this bit will halt Timer 1 and the
  |        |          |current count will be preserved in TH1 and TL1.
  |        |          |1 = Timer 1 Enabled.
  |[7]     |TF1       |Timer 1 Overflow Flag
  |        |          |This bit is set when Timer 1 overflows. It is automatically cleared by
  |        |          |hardware when the program executes the Timer 1 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
 */
sfr TCON = 0x88;

/**
  @addtogroup SFR_TCON_MACRO Bit Macro Functions
  Bit Macro Functions of TCON
  @{ */

sbit TF1        = TCON^7;
sbit TR1        = TCON^6;
sbit TF0        = TCON^5;
sbit TR0        = TCON^4;
sbit IE1        = TCON^3;
sbit IT1        = TCON^2;
sbit IE0        = TCON^1;
sbit IT0        = TCON^0;

#define set_TCON_IT0             TCON |= 0x01 /*!<Set TCON.IT0                   */
#define set_TCON_IE0             TCON |= 0x02 /*!<Set TCON.IE0                   */
#define set_TCON_IT1             TCON |= 0x04 /*!<Set TCON.IT1                   */
#define set_TCON_IE1             TCON |= 0x08 /*!<Set TCON.IE1                   */
#define set_TCON_TR0             TCON |= 0x10 /*!<Set TCON.TR0                   */
#define set_TCON_TF0             TCON |= 0x20 /*!<Set TCON.TF0                   */
#define set_TCON_TR1             TCON |= 0x40 /*!<Set TCON.TR1                   */
#define set_TCON_TF1             TCON |= 0x80 /*!<Set TCON.TF1                   */

#define clr_TCON_IT0             TCON &=~0x01 /*!<Clear TCON.IT0                 */
#define clr_TCON_IE0             TCON &=~0x02 /*!<Clear TCON.IE0                 */
#define clr_TCON_IT1             TCON &=~0x04 /*!<Clear TCON.IT1                 */
#define clr_TCON_IE1             TCON &=~0x08 /*!<Clear TCON.IE1                 */
#define clr_TCON_TR0             TCON &=~0x10 /*!<Clear TCON.TR0                 */
#define clr_TCON_TF0             TCON &=~0x20 /*!<Clear TCON.TF0                 */
#define clr_TCON_TR1             TCON &=~0x40 /*!<Clear TCON.TR1                 */
#define clr_TCON_TF1             TCON &=~0x80 /*!<Clear TCON.TF1                 */

/**@}*/ /* end of SFR_TCON_MACRO group */
/**@}*/ /* end of SFR_TCON group */

/**
   @addtogroup SFR_TMOD TMOD
   Special Function Register TMOD
   @{ */

/**
  @var TMOD
  Address: 89H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |M0        |Check with bit 1 description
  |[1]     |M1        |Timer 0 Mode Select
  |        |          |M1
  |        |          |M0
  |        |          |Timer 0 Mode
  |        |          |0
  |        |          |0
  |        |          |Mode 0: 13-bit   Timer/Counter
  |        |          |0
  |        |          |1
  |        |          |Mode 1: 16-bit   Timer/Counter
  |        |          |1
  |        |          |0
  |        |          |Mode 2: 8-bit   Timer/Counter with auto-reload from TH0
  |        |          |1
  |        |          |1
  |        |          |Mode 3: TL0 as a   8-bit Timer/Counter and TH0 as a 8-bit Timer
  |[2]     |C/T       |Timer 0 Counter/Timer Select
  |        |          |0 = Timer 0 is incremented by internal system clock.
  |        |          |1 = Timer 0 is incremented by the falling edge of the external pin T0.
  |[3]     |GATE      |Timer 0 Gate Control
  |        |          |0 = Timer 0 will clock when TR0 is 1 regardless of INT0 logic level.
  |        |          |1 = Timer 0 will clock only when TR0 is 1 and INT0 is logic 1.
  |[4]     |M0        |Check with bit 5 description.
  |[5]     |M1        |Timer 1 Mode Select
  |        |          |M1
  |        |          |M0
  |        |          |Timer 1 Mode
  |        |          |0
  |        |          |0
  |        |          |Mode 0: 13-bit   Timer/Counter
  |        |          |0
  |        |          |1
  |        |          |Mode 1: 16-bit   Timer/Counter
  |        |          |1
  |        |          |0
  |        |          |Mode 2: 8-bit   Timer/Counter with auto-reload from TH1
  |        |          |1
  |        |          |1
  |        |          |Mode 3: Timer 1   halted
  |[6]     |C/T       |Timer 1 Counter/Timer Select
  |        |          |0 = Timer 1 is incremented by internal system clock.
  |        |          |1 = Timer 1 is incremented by the falling edge of the external pin T1.
  |[7]     |GATE      |Timer 1 Gate Control
  |        |          |0 = Timer 1 will clock when TR1 is 1 regardless of INT1 logic level.
  |        |          |1 = Timer 1 will clock only when TR1 is 1 and INT1 is logic 1.
 */
sfr TMOD = 0x89;

/**
  @addtogroup SFR_TMOD_MACRO Bit Macro Functions
  Bit Macro Functions of TMOD
  @{ */

#define set_TMOD_0_M0              TMOD |= 0x01 /*!<Set TMOD.M0                    */
#define set_TMOD_0_M1              TMOD |= 0x02 /*!<Set TMOD.M1                    */
#define set_TMOD_0_C/T             TMOD |= 0x04 /*!<Set TMOD.C/T                   */
#define set_TMOD_0_GATE            TMOD |= 0x08 /*!<Set TMOD.GATE                  */
#define set_TMOD_1_M0              TMOD |= 0x10 /*!<Set TMOD.M0                    */
#define set_TMOD_1_M1              TMOD |= 0x20 /*!<Set TMOD.M1                    */
#define set_TMOD_1_C/T             TMOD |= 0x40 /*!<Set TMOD.C/T                   */
#define set_TMOD_1_GATE            TMOD |= 0x80 /*!<Set TMOD.GATE                  */

#define clr_TMOD_0_M0              TMOD &=~0x01 /*!<Clear TMOD.M0                  */
#define clr_TMOD_0_M1              TMOD &=~0x02 /*!<Clear TMOD.M1                  */
#define clr_TMOD_0_C/T             TMOD &=~0x04 /*!<Clear TMOD.C/T                 */
#define clr_TMOD_0_GATE            TMOD &=~0x08 /*!<Clear TMOD.GATE                */
#define clr_TMOD_1_M0              TMOD &=~0x10 /*!<Clear TMOD.M0                  */
#define clr_TMOD_1_M1              TMOD &=~0x20 /*!<Clear TMOD.M1                  */
#define clr_TMOD_1_C/T             TMOD &=~0x40 /*!<Clear TMOD.C/T                 */
#define clr_TMOD_1_GATE            TMOD &=~0x80 /*!<Clear TMOD.GATE                */

/**@}*/ /* end of SFR_TMOD_MACRO group */
/**@}*/ /* end of SFR_TMOD group */

/**
   @addtogroup SFR_TL0 TL0
   Special Function Register TL0
   @{ */

/**
  @var TL0
  Address: 8AH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TL0[7:0]  |Timer 0 Low Byte
  |        |          |The TL0 register is the low byte of the 16-bit counting register of
  |        |          |Timer 0.
 */
sfr TL0 = 0x8A;

/**
  @addtogroup SFR_TL0_MACRO Bit Macro Functions
  Bit Macro Functions of TL0
  @{ */





/**@}*/ /* end of SFR_TL0_MACRO group */
/**@}*/ /* end of SFR_TL0 group */

/**
   @addtogroup SFR_TL1 TL1
   Special Function Register TL1
   @{ */

/**
  @var TL1
  Address: 8BH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TL1[7:0]  |Timer 1 Low Byte
  |        |          |The TL1 register is the low byte of the 16-bit counting register of
  |        |          |Timer 1.
 */
sfr TL1 = 0x8B;

/**
  @addtogroup SFR_TL1_MACRO Bit Macro Functions
  Bit Macro Functions of TL1
  @{ */





/**@}*/ /* end of SFR_TL1_MACRO group */
/**@}*/ /* end of SFR_TL1 group */

/**
   @addtogroup SFR_TH0 TH0
   Special Function Register TH0
   @{ */

/**
  @var TH0
  Address: 8CH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TH0[7:0]  |Timer 0 High Byte
  |        |          |The TH0 register is the high byte of the 16-bit counting register of
  |        |          |Timer 0.
 */
sfr TH0 = 0x8C;

/**
  @addtogroup SFR_TH0_MACRO Bit Macro Functions
  Bit Macro Functions of TH0
  @{ */





/**@}*/ /* end of SFR_TH0_MACRO group */
/**@}*/ /* end of SFR_TH0 group */

/**
   @addtogroup SFR_TH1 TH1
   Special Function Register TH1
   @{ */

/**
  @var TH1
  Address: 8DH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TH1[7:0]  |Timer 1 High Byte
  |        |          |The TH1 register is the high byte of the 16-bit counting register of
  |        |          |Timer 1.
 */
sfr TH1 = 0x8D;

/**
  @addtogroup SFR_TH1_MACRO Bit Macro Functions
  Bit Macro Functions of TH1
  @{ */





/**@}*/ /* end of SFR_TH1_MACRO group */
/**@}*/ /* end of SFR_TH1 group */

/**
   @addtogroup SFR_WKCON WKCON
   Special Function Register WKCON
   @{ */

/**
  @var WKCON
  Address: 8FH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WKPS[2:0] |WKT Pre-Scalar
  |        |          |These bits determine the pre-scale of WKT clock.
  |        |          |000 = 1/1.
  |        |          |001 = 1/4.
  |        |          |010 = 1/16.
  |        |          |011 = 1/64.
  |        |          |100 = 1/256.
  |        |          |101 = 1/512.
  |        |          |110 = 1/1024.
  |        |          |111 = 1/2048.
  |[3]     |WKTR      |WKT Run Control
  |        |          |0 = WKT is halted.
  |        |          |1 = WKT starts running.
  |        |          |Note that the reload register RWK can only be written when WKT is
  |        |          |halted (WKTR bit is 0). If WKT is written while WKTR is 1, result is
  |        |          |unpredictable.
  |[4]     |WKTF      |WKT Overflow Flag
  |        |          |This bit is set when WKT overflows. If the WKT interrupt and the
  |        |          |global interrupt are enabled, setting this bit will make CPU execute
  |        |          |WKT interrupt service routine. This bit is not automatically cleared
  |        |          |via hardware and should be cleared via software.
  |[5]     |WKTCK     |WKT Clock Source
  |        |          |This bit is set WKT clock source select bit.
  |        |          |0 = LIRC
  |        |          |1 = LXT
  |[7:6]   |Reserved  |Reserved
 */
sfr WKCON = 0x8F;

/**
  @addtogroup SFR_WKCON_MACRO Bit Macro Functions
  Bit Macro Functions of WKCON
  @{ */


#define set_WKCON_WKTR           WKCON |= 0x08 /*!<Set WKCON.WKTR                 */
#define set_WKCON_WKTF           WKCON |= 0x10 /*!<Set WKCON.WKTF                 */
#define set_WKCON_WKTCK          WKCON |= 0x20 /*!<Set WKCON.WKTCK                */


#define clr_WKCON_WKTR           WKCON &=~0x08 /*!<Clear WKCON.WKTR               */
#define clr_WKCON_WKTF           WKCON &=~0x10 /*!<Clear WKCON.WKTF               */
#define clr_WKCON_WKTCK          WKCON &=~0x20 /*!<Clear WKCON.WKTCK              */

/**@}*/ /* end of SFR_WKCON_MACRO group */
/**@}*/ /* end of SFR_WKCON group */

/**
   @addtogroup SFR_SFRS SFRS
   Special Function Register SFRS
   @{ */

/**
  @var SFRS
  Address: 91H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SFRPAGE[1:0]|SFR Page Select
  |        |          |00 = Instructions access SFR Page 0.
  |        |          |01 = Instructions access SFR Page 1.
  |        |          |10 = Instructions access SFR page 2.
  |        |          |11 = Instructions access SFR page 3.
 */
sfr SFRS = 0x91;

/**
  @addtogroup SFR_SFRS_MACRO Bit Macro Functions
  Bit Macro Functions of SFRS
  @{ */





/**@}*/ /* end of SFR_SFRS_MACRO group */
/**@}*/ /* end of SFR_SFRS group */

/**
   @addtogroup SFR_DMA0CR0 DMA0CR0
   Special Function Register DMA0CR0
   @{ */

/**
  @var DMA0CR0
  Address: 92H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */
sfr DMA0CR0 = 0x92;

/**
  @addtogroup SFR_DMA0CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CR0
  @{ */

#define set_DMA0CR0_EN           DMA0CR0 |= 0x01 /*!<Set DMA0CR0.EN                 */
#define set_DMA0CR0_RUN          DMA0CR0 |= 0x02 /*!<Set DMA0CR0.RUN                */
#define set_DMA0CR0_FIE          DMA0CR0 |= 0x04 /*!<Set DMA0CR0.FIE                */
#define set_DMA0CR0_HIE          DMA0CR0 |= 0x08 /*!<Set DMA0CR0.HIE                */


#define clr_DMA0CR0_EN           DMA0CR0 &=~0x01 /*!<Clear DMA0CR0.EN               */
#define clr_DMA0CR0_RUN          DMA0CR0 &=~0x02 /*!<Clear DMA0CR0.RUN              */
#define clr_DMA0CR0_FIE          DMA0CR0 &=~0x04 /*!<Clear DMA0CR0.FIE              */
#define clr_DMA0CR0_HIE          DMA0CR0 &=~0x08 /*!<Clear DMA0CR0.HIE              */


/**@}*/ /* end of SFR_DMA0CR0_MACRO group */
/**@}*/ /* end of SFR_DMA0CR0 group */

/**
   @addtogroup SFR_DMA0CR0 DMA0CR0
   Special Function Register DMA0CR0
   @{ */

/**
  @var DMA0CR0
  Address: 92H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA0CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CR0
  @{ */

#define set_DMA0CR0_EN           DMA0CR0 |= 0x01 /*!<Set DMA0CR0.EN                 */
#define set_DMA0CR0_RUN          DMA0CR0 |= 0x02 /*!<Set DMA0CR0.RUN                */
#define set_DMA0CR0_FIE          DMA0CR0 |= 0x04 /*!<Set DMA0CR0.FIE                */
#define set_DMA0CR0_HIE          DMA0CR0 |= 0x08 /*!<Set DMA0CR0.HIE                */


#define clr_DMA0CR0_EN           DMA0CR0 &=~0x01 /*!<Clear DMA0CR0.EN               */
#define clr_DMA0CR0_RUN          DMA0CR0 &=~0x02 /*!<Clear DMA0CR0.RUN              */
#define clr_DMA0CR0_FIE          DMA0CR0 &=~0x04 /*!<Clear DMA0CR0.FIE              */
#define clr_DMA0CR0_HIE          DMA0CR0 &=~0x08 /*!<Clear DMA0CR0.HIE              */


/**@}*/ /* end of SFR_DMA0CR0_MACRO group */
/**@}*/ /* end of SFR_DMA0CR0 group */

/**
   @addtogroup SFR_DMA0MAL DMA0MAL
   Special Function Register DMA0MAL
   @{ */

/**
  @var DMA0MAL
  Address: 93H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */
sfr DMA0MAL = 0x93;

/**
  @addtogroup SFR_DMA0MAL_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0MAL
  @{ */





/**@}*/ /* end of SFR_DMA0MAL_MACRO group */
/**@}*/ /* end of SFR_DMA0MAL group */

/**
   @addtogroup SFR_DMA0CNT DMA0CNT
   Special Function Register DMA0CNT
   @{ */

/**
  @var DMA0CNT
  Address: 94H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */
sfr DMA0CNT = 0x94;

/**
  @addtogroup SFR_DMA0CNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CNT
  @{ */





/**@}*/ /* end of SFR_DMA0CNT_MACRO group */
/**@}*/ /* end of SFR_DMA0CNT group */

/**
   @addtogroup SFR_DMA0CCNT DMA0CCNT
   Special Function Register DMA0CCNT
   @{ */

/**
  @var DMA0CCNT
  Address: 95H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */
sfr DMA0CCNT = 0x95;

/**
  @addtogroup SFR_DMA0CCNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CCNT
  @{ */





/**@}*/ /* end of SFR_DMA0CCNT_MACRO group */
/**@}*/ /* end of SFR_DMA0CCNT group */

/**
   @addtogroup SFR_CKSWT CKSWT
   Special Function Register CKSWT
   @{ */

/**
  @var CKSWT
  Address: 96H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |OSC[2:0]  |Oscillator Selection Bits
  |        |          |This field selects the system clock source.
  |        |          |00x = Internal 24 MHz oscillator. Defaul value accoding to
  |        |          |HIRCEN(CKEN.5) enabled.
  |        |          |01x = External oscillator clock source accoding to ECLKEN(CKEN.3)
  |        |          |enabled.
  |        |          |10x = Internal 38.4 kHz oscillator according to LIRCEN(CKEN.4)
  |        |          |enabled.
  |        |          |110 = External High speed crystal/resonator clock source (4 MHz ~ 24
  |        |          |MHz) accoding to EHXTEN(CKEN.7) enabled.
  |        |          |111 = External Low speed crystal/resonator clock source (32.768 kHz)
  |        |          |accoding to ELXTEN(CKEN.6) enabled.
  |        |          |Note that this field is write only. The read back value of this field
  |        |          |may not correspond to the present system clock source.
  |[3]     |ECLKST    |External Clock Input Status
  |        |          |0 = External clock input is not stable or disabled.
  |        |          |1 = External clock input is enabled and stable.
  |[4]     |LIRCST    |Low Speed Internal Oscillator 38.4 kHz Status
  |        |          |0 = Low speed internal oscillator is not stable or is disabled.
  |        |          |1 = Low speed internal oscillator is enabled and stable.
  |[5]     |HIRCST    |High-Speed Internal Oscillator 24 MHz Status
  |        |          |0 = High-speed internal oscillator
  |        |          |is not stable or disabled.
  |        |          |1 = High-speed internal oscillator
  |        |          |is enabled and stable.
  |[6]     |LXTST     |Low Speed External Crystal/Resonator 32.768 kHz Status
  |        |          |0 = Low speed external crystal/resonator is not stable or is disabled.
  |        |          |1 = Low speed external crystal/resonator is enabled and stable.
  |[7]     |HXTST     |High Speed External Crystal/Resonator 4 MHz to 24 MHz Status
  |        |          |0 = High speed external crystal/resonator is not stable or is
  |        |          |disabled.
  |        |          |1 = High speed external crystal/resonator is enabled and stable.
 */
sfr CKSWT = 0x96;

/**
  @addtogroup SFR_CKSWT_MACRO Bit Macro Functions
  Bit Macro Functions of CKSWT
  @{ */


#define set_CKSWT_ECLKST         CKSWT |= 0x08 /*!<Set CKSWT.ECLKST               */
#define set_CKSWT_LIRCST         CKSWT |= 0x10 /*!<Set CKSWT.LIRCST               */
#define set_CKSWT_HIRCST         CKSWT |= 0x20 /*!<Set CKSWT.HIRCST               */
#define set_CKSWT_LXTST          CKSWT |= 0x40 /*!<Set CKSWT.LXTST                */
#define set_CKSWT_HXTST          CKSWT |= 0x80 /*!<Set CKSWT.HXTST                */


#define clr_CKSWT_ECLKST         CKSWT &=~0x08 /*!<Clear CKSWT.ECLKST             */
#define clr_CKSWT_LIRCST         CKSWT &=~0x10 /*!<Clear CKSWT.LIRCST             */
#define clr_CKSWT_HIRCST         CKSWT &=~0x20 /*!<Clear CKSWT.HIRCST             */
#define clr_CKSWT_LXTST          CKSWT &=~0x40 /*!<Clear CKSWT.LXTST              */
#define clr_CKSWT_HXTST          CKSWT &=~0x80 /*!<Clear CKSWT.HXTST              */

/**@}*/ /* end of SFR_CKSWT_MACRO group */
/**@}*/ /* end of SFR_CKSWT group */

/**
   @addtogroup SFR_CKEN CKEN
   Special Function Register CKEN
   @{ */

/**
  @var CKEN
  Address: 97H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CKSWTF    |Clock Switch Fault Flag
  |        |          |0 = The previous system clock source switch was successful.
  |        |          |1 = User tried to switch to an instable or disabled clock source at
  |        |          |the previous system clock source switch. If switching to an instable
  |        |          |clock source, this bit remains 1 until the clock source is stable and
  |        |          |switching is successful.
  |[1]     |Reserved  |Reserved
  |[2]     |BIRCEN    |Bias Internal Oscillator 3.3 kHz Enable
  |        |          |0 = The bias internal oscillator Disabled.
  |        |          |1 = The bias internal oscillator Enabled.
  |        |          |Note that when BIRCEN is disabled, the bias refresh clock is changed
  |        |          |from 3.3 kHz to ~10 kHz ( LIRC 38.4 kHz /4)
  |        |          |À³¸Óalways keep at 1, §_«h ·|¼vÅTLIRC µLªk¨üuser control OFF.
  |[3]     |ECLKEN    |External Clock Input Enable
  |        |          |1 = External clock input (Xin , P5.3) Enabled.
  |        |          |0 = External clock input (Xin, P5.3) Disabled, P5.2 and P5.3 work as
  |        |          |general purpose I/O or other functions if EHXTEN set to 0.
  |[4]     |LIRCEN    |Low Speed Internal Oscillator 38.4 kHz Enable
  |        |          |0 = The low speed internal oscillator Disabled.
  |        |          |1 = The low speed internal oscillator
  |        |          |Enabled.
  |        |          |Note that when (1)WDT is enabled, (2)WKT is running by the clock
  |        |          |source of the internal 38.4 kHz oscillator ,(3) BOD is enabled, or
  |        |          |(4)LVR filter is enabled, a write 0 to LIRCEN will be ignored. LIRCEN
  |        |          |is always 1 and the internal 38.4 kHz oscillator is always enabled.
  |[5]     |HIRCEN    |High-Speed Internal Oscillator 24 MHz Enable
  |        |          |0 = The high-speed internal oscillator Disabled.
  |        |          |1 = The high-speed internal oscillator
  |        |          |Enabled.
  |        |          |Note that once IAP is enabled by setting IAPEN (CHPCON.0), the high-
  |        |          |speed internal 24 MHz oscillator will be enabled automatically. The
  |        |          |hardware will also set HIRCEN and HIRCST bits. After IAPEN is cleared,
  |        |          |HIRCEN and EHRCST resume the original values.
  |[6]     |ELXTEN    |External Low-Speed Crystal/Resonator Enable
  |        |          |1 = Low-speed external crystal/resonator 32.768 kHz Enabled.
  |        |          |0 = Low-speed external crystal/resonator 32.768 kHz Disabled, P5.4 and
  |        |          |P5.5 work as general purpose I/O or other functions.
  |[7]     |EHXTEN    |External High-Speed Crystal/Resonator Enable
  |        |          |1 = High-speed external crystal/resonator 4 MHz to 24 MHz Enabled.
  |        |          |0 = High-speed external crystal/resonator 4 MHz to 24 MHz Disabled,
  |        |          |P5.2 and P5.3 work as general purpose I/O or other functions if ECLKEN
  |        |          |set to 0.
 */
sfr CKEN = 0x97;

/**
  @addtogroup SFR_CKEN_MACRO Bit Macro Functions
  Bit Macro Functions of CKEN
  @{ */

#define set_CKEN_CKSWTF          CKEN |= 0x01 /*!<Set CKEN.CKSWTF                */
#define set_CKEN_BIRCEN          CKEN |= 0x04 /*!<Set CKEN.BIRCEN                */
#define set_CKEN_ECLKEN          CKEN |= 0x08 /*!<Set CKEN.ECLKEN                */
#define set_CKEN_LIRCEN          CKEN |= 0x10 /*!<Set CKEN.LIRCEN                */
#define set_CKEN_HIRCEN          CKEN |= 0x20 /*!<Set CKEN.HIRCEN                */
#define set_CKEN_ELXTEN          CKEN |= 0x40 /*!<Set CKEN.ELXTEN                */
#define set_CKEN_EHXTEN          CKEN |= 0x80 /*!<Set CKEN.EHXTEN                */

#define clr_CKEN_CKSWTF          CKEN &=~0x01 /*!<Clear CKEN.CKSWTF              */
#define clr_CKEN_BIRCEN          CKEN &=~0x04 /*!<Clear CKEN.BIRCEN              */
#define clr_CKEN_ECLKEN          CKEN &=~0x08 /*!<Clear CKEN.ECLKEN              */
#define clr_CKEN_LIRCEN          CKEN &=~0x10 /*!<Clear CKEN.LIRCEN              */
#define clr_CKEN_HIRCEN          CKEN &=~0x20 /*!<Clear CKEN.HIRCEN              */
#define clr_CKEN_ELXTEN          CKEN &=~0x40 /*!<Clear CKEN.ELXTEN              */
#define clr_CKEN_EHXTEN          CKEN &=~0x80 /*!<Clear CKEN.EHXTEN              */

/**@}*/ /* end of SFR_CKEN_MACRO group */
/**@}*/ /* end of SFR_CKEN group */

/**
   @addtogroup SFR_SCON SCON
   Special Function Register SCON
   @{ */

/**
  @var SCON
  Address: 98H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI        |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 0 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 0 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 0 interrupt service
  |        |          |routine. This bit should be cleared manually via software.
  |[1]     |TI        |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 0 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 0 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 0 interrupt service
  |        |          |routine. This bit should be cleared manually via software.
  |[2]     |RB8       |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 0 Mode 2 or 3. In Mode 1, RB8 is the logic level of the received
  |        |          |stop bit. SM2 bit as logic 1 has restriction for exception. RB8 is not
  |        |          |used in Mode 0.
  |[3]     |TB8       |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |0 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN       |Receiving Enable
  |        |          |0 = Serial port 0 reception Disabled.
  |        |          |1 = Serial port 0 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN = 1 and RI = 0.
  |[5]     |SM2       |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 0 mode.
  |        |          |Mode 0:
  |        |          |This bit select the baud rate between FSYS/12 and FSYS/2.
  |        |          |0 = The clock runs at FSYS/12 baud rate. It maintains standard
  |        |          |8051compatibility.
  |        |          |1 = The clock runs at FSYS/2 baud rate for faster serial
  |        |          |communication.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1       |Check with bit 7 description.
  |[7]     |SM0/FE    |Serial Port Mode Select
  |        |          |SMOD0 (PCON.6) = 0:
  |        |          |See Table 6.92 Serial Port 0 Mode / baud rate
  |        |          |Description for details.
  |        |          |SMOD0 (PCON.6) = 1:
  |        |          |SM0/FE bit is used as frame error (FE) status flag. It is cleared by
  |        |          |software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */
sfr SCON = 0x98;

/**
  @addtogroup SFR_SCON_MACRO Bit Macro Functions
  Bit Macro Functions of SCON
  @{ */
sbit SM0        = SCON^7;
sbit FE         = SCON^7;
sbit SM1        = SCON^6;
sbit SM2        = SCON^5;
sbit REN        = SCON^4;
sbit TB8        = SCON^3;
sbit RB8        = SCON^2;
sbit TI         = SCON^1;
sbit RI         = SCON^0;

#define set_SCON_RI              SCON |= 0x01 /*!<Set SCON.RI                    */
#define set_SCON_TI              SCON |= 0x02 /*!<Set SCON.TI                    */
#define set_SCON_RB8             SCON |= 0x04 /*!<Set SCON.RB8                   */
#define set_SCON_TB8             SCON |= 0x08 /*!<Set SCON.TB8                   */
#define set_SCON_REN             SCON |= 0x10 /*!<Set SCON.REN                   */
#define set_SCON_SM2             SCON |= 0x20 /*!<Set SCON.SM2                   */
#define set_SCON_SM1             SCON |= 0x40 /*!<Set SCON.SM1                   */
#define set_SCON_FE              SCON |= 0x80 /*!<Set SCON.SM0/FE                */
#define set_SCON_SM0             SCON |= 0x80 /*!<Set SCON.SM0/FE                */

#define clr_SCON_RI              SCON &=~0x01 /*!<Clear SCON.RI                  */
#define clr_SCON_TI              SCON &=~0x02 /*!<Clear SCON.TI                  */
#define clr_SCON_RB8             SCON &=~0x04 /*!<Clear SCON.RB8                 */
#define clr_SCON_TB8             SCON &=~0x08 /*!<Clear SCON.TB8                 */
#define clr_SCON_REN             SCON &=~0x10 /*!<Clear SCON.REN                 */
#define clr_SCON_SM2             SCON &=~0x20 /*!<Clear SCON.SM2                 */
#define clr_SCON_SM1             SCON &=~0x40 /*!<Clear SCON.SM1                 */
#define clr_SCON_FE              SCON &=~0x80 /*!<Clear SCON.SM0/FE              */
#define clr_SCON_SM0             SCON &=~0x80 /*!<Clear SCON.SM0/FE              */

/**@}*/ /* end of SFR_SCON_MACRO group */
/**@}*/ /* end of SFR_SCON group */

/**
   @addtogroup SFR_SBUF SBUF
   Special Function Register SBUF
   @{ */

/**
  @var SBUF
  Address: 99H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SBUF[7:0] |Serial Port 0 Data Buffer
  |        |          |This byte actually consists two separate registers. One is the
  |        |          |receiving resister, and the other is the transmitting buffer. When
  |        |          |data is moved to SBUF, it goes to the transmitting buffer and is
  |        |          |shifted for serial transmission. When data is moved from SBUF, it
  |        |          |comes from the receiving register.
  |        |          |The transmission is initiated through giving data to SBUF.
 */
sfr SBUF = 0x99;

/**
  @addtogroup SFR_SBUF_MACRO Bit Macro Functions
  Bit Macro Functions of SBUF
  @{ */





/**@}*/ /* end of SFR_SBUF_MACRO group */
/**@}*/ /* end of SFR_SBUF group */

/**
   @addtogroup SFR_SBUF1 SBUF1
   Special Function Register SBUF1
   @{ */

/**
  @var SBUF1
  Address: 9AH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SBUF1[7:0]|Serial Port 1 Data Buffer
  |        |          |This byte actually consists two separate registers. One is the
  |        |          |receiving resister, and the other is the transmitting buffer. When
  |        |          |data is moved to SBUF1, it goes to the transmitting buffer and is
  |        |          |shifted for serial transmission. When data is moved from SBUF1, it
  |        |          |comes from the receiving register.
  |        |          |The transmission is initiated through giving data to SBUF1.
 */
sfr SBUF1 = 0x9A;

/**
  @addtogroup SFR_SBUF1_MACRO Bit Macro Functions
  Bit Macro Functions of SBUF1
  @{ */





/**@}*/ /* end of SFR_SBUF1_MACRO group */
/**@}*/ /* end of SFR_SBUF1 group */

/**
   @addtogroup SFR_EIE0 EIE0
   Special Function Register EIE0
   @{ */

/**
  @var EIE0
  Address: 9BH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EI2C0     |Enable I2C0 Interrupt
  |        |          |0 = I2C interrupt Disabled.
  |        |          |1 = I2C interrupt Enable. When interrupt generated SI (I2C0CON.3) or
  |        |          |I2TOF (I2C0TOC.0) set 1.
  |[1]     |EPI       |Enable Pin Interrupt
  |        |          |0 = Pin interrupt Disabled.
  |        |          |1 = Pin interrupt Enable. When interrupt generated PIF related bit set
  |        |          |1.
  |[2]     |ECAP      |Enable Input Capture Interrupt
  |        |          |0 = Input capture interrupt Disabled.
  |        |          |1 = Input capture interrupt Enable. When interrupt generated CAPF[2:0]
  |        |          |(CAPCON0[2:0]) set 1.
  |[3]     |EPWM0     |Enable PWM0 Interrupt
  |        |          |0 = PWM interrupt Disabled.
  |        |          |1 = PWM interrupt Enable. When interrupt generated PWMF (PWMnCON0.5)
  |        |          |set 1.
  |[4]     |EWDT      |Enable WDT Interrupt
  |        |          |0 = WDT interrupt Disabled.
  |        |          |1 = WDT interrupt Enable. When interrupt generated WDTF (WDCON.5) set
  |        |          |1.
  |[5]     |EFB0      |Enable Fault Brake Interrupt
  |        |          |0 = Fault Brake interrupt Disabled.
  |        |          |1 = Fault Brake interrupt Enable. When interrupt generated FBF
  |        |          |(PWM0FBD.7) set 1.
  |[6]     |ESPI0     |Enable SPI Interrupt
  |        |          |0 = SPI interrupt Disabled.
  |        |          |1 = SPI interrupt Enable. When interrupt generated SPIF (SPInSR.7),
  |        |          |SPIOVF (SPInSR.5), or MODF (SPInSR.4) set 1 .
  |[7]     |ET2       |Enable Timer 2 Interrupt
  |        |          |0 = Timer 2 interrupt Disabled.
  |        |          |1 = Timer 2 interrupt Enable. When interrupt generated, TF2 (T2CON.7)
  |        |          |set 1
 */
sfr EIE0 = 0x9B;

/**
  @addtogroup SFR_EIE0_MACRO Bit Macro Functions
  Bit Macro Functions of EIE0
  @{ */

#define set_EIE0_EI2C0           EIE0 |= 0x01 /*!<Set EIE0.EI2C0                 */
#define set_EIE0_EPI             EIE0 |= 0x02 /*!<Set EIE0.EPI                   */
#define set_EIE0_ECAP            EIE0 |= 0x04 /*!<Set EIE0.ECAP                  */
#define set_EIE0_EPWM0           EIE0 |= 0x08 /*!<Set EIE0.EPWM0                 */
#define set_EIE0_EWDT            EIE0 |= 0x10 /*!<Set EIE0.EWDT                  */
#define set_EIE0_EFB0            EIE0 |= 0x20 /*!<Set EIE0.EFB0                  */
#define set_EIE0_ESPI0           EIE0 |= 0x40 /*!<Set EIE0.ESPI0                 */
#define set_EIE0_ET2             EIE0 |= 0x80 /*!<Set EIE0.ET2                   */

#define clr_EIE0_EI2C0           EIE0 &=~0x01 /*!<Clear EIE0.EI2C0               */
#define clr_EIE0_EPI             EIE0 &=~0x02 /*!<Clear EIE0.EPI                 */
#define clr_EIE0_ECAP            EIE0 &=~0x04 /*!<Clear EIE0.ECAP                */
#define clr_EIE0_EPWM0           EIE0 &=~0x08 /*!<Clear EIE0.EPWM0               */
#define clr_EIE0_EWDT            EIE0 &=~0x10 /*!<Clear EIE0.EWDT                */
#define clr_EIE0_EFB0            EIE0 &=~0x20 /*!<Clear EIE0.EFB0                */
#define clr_EIE0_ESPI0           EIE0 &=~0x40 /*!<Clear EIE0.ESPI0               */
#define clr_EIE0_ET2             EIE0 &=~0x80 /*!<Clear EIE0.ET2                 */

/**@}*/ /* end of SFR_EIE0_MACRO group */
/**@}*/ /* end of SFR_EIE0 group */

/**
   @addtogroup SFR_EIE1 EIE1
   Special Function Register EIE1
   @{ */

/**
  @var EIE1
  Address: 9CH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ES1       |Enable Serial Port 1 Interrupt
  |        |          |0 = Serial port 1 interrupt Disabled.
  |        |          |1 = Serial port 1 interrupt Enable. When interrupt generated TI_1
  |        |          |(S1CON.1) or RI_1 (S1CON.0) set 1.
  |[1]     |ET3       |Enable Timer 3 Interrupt
  |        |          |0 = Timer 3 interrupt Disabled.
  |        |          |1 = Timer 3interrupt Enable. When interrupt generated TF3 (T3CON.4)
  |        |          |set 1.
  |[2]     |EWKT      |Enable WKT Interrupt
  |        |          |0 = WKT interrupt Disabled.
  |        |          |1 = WKT interrupt Enable. When interrupt generated WKTF (WKCON.4) set
  |        |          |1.
  |[3]     |EHFI      |Enable Hard Fault Interrupt
  |        |          |0 = hard fault interrupt Disabled and hard fault reset is Enabled
  |        |          |1 = hard fault interrupt Enable. When interrupt generated HFIF
  |        |          |(AUXR0.4) set 1.
  |[4]     |ESPI1     |Enable SPI1 Interrupt
  |        |          |0 = SPI1 interrupt Disabled.
  |        |          |1 = SPI1 interrupt Enable. When interrupt generated SPIF (SP2SR.7),
  |        |          |MODF (SP2SR.4) or SPIOVF (SP2SR.5) set 1
  |[5]     |EI2C1     |Enable I2C1 Interrupt
  |        |          |0 = I2C1 interrupt Disabled.
  |        |          |1 = I2C1 interrupt Enable. When interrupt generated SI (I2C1CON.3) or
  |        |          |I2TOF (I2C1TOC.0) set 1.
  |[6]     |EPWM123   |Enable PWM123 Interrupt
  |        |          |0 = PWM1/2/3 interrupt Disabled.
  |        |          |1 = PWM1/2/3 interrupt Enable. When interrupt generated PWMF
  |        |          |(PWM1CON0.5) set 1.
  |[7]     |Reserved  |Reserved
 */
sfr EIE1 = 0x9C;

/**
  @addtogroup SFR_EIE1_MACRO Bit Macro Functions
  Bit Macro Functions of EIE1
  @{ */

#define set_EIE1_ES1             EIE1 |= 0x01 /*!<Set EIE1.ES1                   */
#define set_EIE1_ET3             EIE1 |= 0x02 /*!<Set EIE1.ET3                   */
#define set_EIE1_EWKT            EIE1 |= 0x04 /*!<Set EIE1.EWKT                  */
#define set_EIE1_EHFI            EIE1 |= 0x08 /*!<Set EIE1.EHFI                  */
#define set_EIE1_ESPI1           EIE1 |= 0x10 /*!<Set EIE1.ESPI1                 */
#define set_EIE1_EI2C1           EIE1 |= 0x20 /*!<Set EIE1.EI2C1                 */
#define set_EIE1_EPWM123         EIE1 |= 0x40 /*!<Set EIE1.EPWM123               */

#define clr_EIE1_ES1             EIE1 &=~0x01 /*!<Clear EIE1.ES1                 */
#define clr_EIE1_ET3             EIE1 &=~0x02 /*!<Clear EIE1.ET3                 */
#define clr_EIE1_EWKT            EIE1 &=~0x04 /*!<Clear EIE1.EWKT                */
#define clr_EIE1_EHFI            EIE1 &=~0x08 /*!<Clear EIE1.EHFI                */
#define clr_EIE1_ESPI1           EIE1 &=~0x10 /*!<Clear EIE1.ESPI1               */
#define clr_EIE1_EI2C1           EIE1 &=~0x20 /*!<Clear EIE1.EI2C1               */
#define clr_EIE1_EPWM123         EIE1 &=~0x40 /*!<Clear EIE1.EPWM123             */

/**@}*/ /* end of SFR_EIE1_MACRO group */
/**@}*/ /* end of SFR_EIE1 group */


/**
   @addtogroup SFR_CHPCON CHPCON
   Special Function Register CHPCON
   @{ */

/**
  @var CHPCON
  Address: 9FH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7]     |SWRST     |Software Reset
  |        |          |To set this bit as logic 1 will cause a software reset. It will
  |        |          |automatically be cleared via hardware after reset is finished.
 */
sfr CHPCON = 0x9F;

/**
  @addtogroup SFR_CHPCON_MACRO Bit Macro Functions
  Bit Macro Functions of CHPCON
  @{ */

#define set_CHPCON_SWRST         CHPCON |= 0x80 /*!<Set CHPCON.SWRST               */

#define clr_CHPCON_SWRST         CHPCON &=~0x80 /*!<Clear CHPCON.SWRST             */

/**@}*/ /* end of SFR_CHPCON_MACRO group */
/**@}*/ /* end of SFR_CHPCON group */


/**
   @addtogroup SFR_ADCCON0 ADCCON0
   Special Function Register ADCCON0
   @{ */

/**
  @var ADCCON0
  Address: A1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCHS[3:0]|A/D Converting Channel Select
  |        |          |This filed selects the activating analog input source of ADC. If ADCEN
  |        |          |is 0, all inputs are disconnected.
  |        |          |0000 = ADC_CH0
  |        |          |0001 = ADC_CH1.
  |        |          |0010 = ADC_CH2.
  |        |          |0011 = ADC_CH3.
  |        |          |0100 = ADC_CH4.
  |        |          |0101 = ADC_CH5.
  |        |          |0110 = ADC_CH6.
  |        |          |0111 = ADC_CH7.
  |        |          |1000 = VBG (Internal band-gap voltage 1.22V).
  |        |          |1001 = VTEMP. (Temperature Sensor).
  |        |          |1010 = ADC_CH10.
  |        |          |1011 = ADC_CH11.
  |        |          |1100 = ADC_CH12.
  |        |          |1101 = ADC_CH13.
  |        |          |1110 = ADC_CH14.
  |        |          |1111 = ADC_CH15.
  |[5:4]   |ETGSEL[1:0]|External Trigger Source Select
  |        |          |When ADCEX (ADCCON1.1) is set, these bits select which pin output
  |        |          |triggers ADC conversion.
  |        |          |00 = PWM0CH0.
  |        |          |01 = PWM0CH2.
  |        |          |10 = PWM0CH4.
  |        |          |11 = STADC pin.
  |[6]     |ADCS      |A/D Converting Software Start Trigger
  |        |          |Setting this bit 1 triggers an A/D conversion. This bit remains logic
  |        |          |1 during A/D converting time and is automatically cleared via hardware
  |        |          |right after conversion complete. The meaning of writing and reading
  |        |          |ADCS bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Start an A/D converting.
  |        |          |Reading:
  |        |          |0 = ADC is in idle state.
  |        |          |1 = ADC is busy in converting.
  |[7]     |ADCF      |ADC Flag
  |        |          |This flag is set when an A/D conversion is completed in single
  |        |          |sampling mode, final sampling complete in continue sampling mode or
  |        |          |comparing hit if result comparator is enabled. The ADC result can be
  |        |          |read. While this flag is 1, ADC cannot start a new converting. This
  |        |          |bit is cleared by software.
 */
sfr ADCCON0 = 0xA1;

/**
  @addtogroup SFR_ADCCON0_MACRO Bit Macro Functions
  Bit Macro Functions of ADCCON0
  @{ */



#define set_ADCCON0_ADCS         ADCCON0 |= 0x40 /*!<Set ADCCON0.ADCS               */
#define set_ADCCON0_ADCF         ADCCON0 |= 0x80 /*!<Set ADCCON0.ADCF               */



#define clr_ADCCON0_ADCS         ADCCON0 &=~0x40 /*!<Clear ADCCON0.ADCS             */
#define clr_ADCCON0_ADCF         ADCCON0 &=~0x80 /*!<Clear ADCCON0.ADCF             */

/**@}*/ /* end of SFR_ADCCON0_MACRO group */
/**@}*/ /* end of SFR_ADCCON0 group */

/**
   @addtogroup SFR_AUXR0 AUXR0
   Special Function Register AUXR0
   @{ */

/**
  @var AUXR0
  Address: A2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7]     |SWRF      |Software Reset Flag
  |        |          |When the MCU is reset via software reset, this bit will be set via
  |        |          |hardware. It is recommended that the flag be cleared via software.
 */
sfr AUXR0 = 0xA2;

/**
  @addtogroup SFR_AUXR0_MACRO Bit Macro Functions
  Bit Macro Functions of AUXR0
  @{ */

#define set_AUXR0_SWRF           AUXR0 |= 0x80 /*!<Set AUXR0.SWRF                 */

#define clr_AUXR0_SWRF           AUXR0 &=~0x80 /*!<Clear AUXR0.SWRF               */

/**@}*/ /* end of SFR_AUXR0_MACRO group */
/**@}*/ /* end of SFR_AUXR0 group */

/**
   @addtogroup SFR_BODCON0 BODCON0
   Special Function Register BODCON0
   @{ */

/**
  @var BODCON0
  Address: A3H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |BOS       |Brown-Out Status
  |        |          |This bit indicates the VDD voltage level comparing with VBOD while BOD
  |        |          |circuit is enabled. It keeps 0 if BOD is not enabled.
  |        |          |0 = VDD voltage level is higher than VBOD or BOD is disabled.
  |        |          |1 = VDD voltage level is lower than VBOD.
  |        |          |Note that this bit is read-only.
  |[1]     |BORF      |Brown-Out Reset Flag
  |        |          |When the MCU is reset by brown-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software.
  |[2]     |BORST     |Brown-Out Reset Enable
  |        |          |This bit decides whether a brown-out reset is caused by a power drop
  |        |          |below VBOD.
  |        |          |0 = Brown-out reset when VDD drops below VBOD Disabled.
  |        |          |1 = Brown-out reset when VDD drops below VBOD Enabled.
  |[3]     |BOF       |Brown-Out Interrupt Flag
  |        |          |This flag will be set as logic 1 via hardware after a VDD
  |        |          |dropping below or rising above VBOD event occurs. If both EBOD (I.E.5)
  |        |          |and EA (I.E.7) are set, a brown-out interrupt requirement will be
  |        |          |generated. This bit should be cleared via software.
  |[6:4]   |BOV[2:0]  |CONFIG Brown-Out Voltage Select
  |        |          |111 = VBOD is 1.8V.
  |        |          |110 = VBOD is 1.8V.
  |        |          |101 = VBOD is 2.0V.
  |        |          |100 = VBOD is 2.4V.
  |        |          |011 = VBOD is 2.7V.
  |        |          |010 = VBOD is 3.0V.
  |        |          |001 = VBOD is 3.7V.
  |        |          |000 = VBOD is 4.4V.
  |[7]     |BODEN     |Brown-Out Detection Enable
  |        |          |0 = Brown-out detection circuit ON.
  |        |          |1 = Brown-out detection circuit OFF.
  |        |          |Note that BOD output is not available until 2~3 LIRC clocks after
  |        |          |enabling.
 */
sfr BODCON0 = 0xA3;

/**
  @addtogroup SFR_BODCON0_MACRO Bit Macro Functions
  Bit Macro Functions of BODCON0
  @{ */

#define set_BODCON0_BOS          BODCON0 |= 0x01 /*!<Set BODCON0.BOS                */
#define set_BODCON0_BORF         BODCON0 |= 0x02 /*!<Set BODCON0.BORF               */
#define set_BODCON0_BORST        BODCON0 |= 0x04 /*!<Set BODCON0.BORST              */
#define set_BODCON0_BOF          BODCON0 |= 0x08 /*!<Set BODCON0.BOF                */

#define set_BODCON0_BODEN        BODCON0 |= 0x80 /*!<Set BODCON0.BODEN              */

#define clr_BODCON0_BOS          BODCON0 &=~0x01 /*!<Clear BODCON0.BOS              */
#define clr_BODCON0_BORF         BODCON0 &=~0x02 /*!<Clear BODCON0.BORF             */
#define clr_BODCON0_BORST        BODCON0 &=~0x04 /*!<Clear BODCON0.BORST            */
#define clr_BODCON0_BOF          BODCON0 &=~0x08 /*!<Clear BODCON0.BOF              */

#define clr_BODCON0_BODEN        BODCON0 &=~0x80 /*!<Clear BODCON0.BODEN            */

/**@}*/ /* end of SFR_BODCON0_MACRO group */
/**@}*/ /* end of SFR_BODCON0 group */

/**
   @addtogroup SFR_IAPTRG IAPTRG
   Special Function Register IAPTRG
   @{ */

/**
  @var IAPTRG
  Address: A4H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IAPGO     |IAP Go
  |        |          |IAP begins by setting this bit as logic 1. After this instruction, the
  |        |          |CPU holds the Program Counter (PC) and the IAP hardware automation
  |        |          |takes over to control the progress. After IAP action completed, the
  |        |          |Program Counter continues to run the following instruction. The IAPGO
  |        |          |bit will be automatically cleared and always read as logic 0.
  |        |          |Before triggering an IAP action, interrupts (if enabled) should be
  |        |          |temporary disabled for hardware limitation.
  |        |          |The program process should follows below.
  |        |          |CLR EA
  |        |          |MOV TA,#0AAH
  |        |          |MOV TA,#55H
  |        |          |ORL IAPTRG,#01H
  |        |          |(SETB EA)
  |[7:1]   |Reserved  |Reserved
 */
sfr IAPTRG = 0xA4;

/**
  @addtogroup SFR_IAPTRG_MACRO Bit Macro Functions
  Bit Macro Functions of IAPTRG
  @{ */

#define set_IAPTRG_IAPGO         IAPTRG |= 0x01 /*!<Set IAPTRG.IAPGO               */

#define clr_IAPTRG_IAPGO         IAPTRG &=~0x01 /*!<Clear IAPTRG.IAPGO             */

/**@}*/ /* end of SFR_IAPTRG_MACRO group */
/**@}*/ /* end of SFR_IAPTRG group */

/**
   @addtogroup SFR_IAPUEN IAPUEN
   Special Function Register IAPUEN
   @{ */

/**
  @var IAPUEN
  Address: A5H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |APUEN     |APROM Updated Enable
  |        |          |0 = Inhibit erasing or programming APROM by IAP.
  |        |          |1 = Allow erasing or programming APROM by IAP.
  |[1]     |LDUEN     |LDROM Updated Enable
  |        |          |0 = Inhibit erasing or programming LDROM by IAP.
  |        |          |1 = Allow erasing or programming LDROM by IAP.
  |[2]     |CFUEN     |CONFIG Bytes Updated Enable
  |        |          |0 = Inhibit erasing or programming CONFIG bytes by IAP.
  |        |          |1 = Allow erasing or programming CONFIG bytes by IAP.
  |[3]     |SPUEN     |SPROM Memory Space Updated Enable(TA Protected)
  |        |          |0 = Inhibit erasing or programming SPRO Mbytes by IAP
  |        |          |1 = Allow erasing or programming SPRO Mbytes by IAP.
  |[4]     |SPMEN     |SPROM Memory Space Mapping Enable
  |        |          |0 = CPU memory address 0xff80~0xffff is mapping to APROM memory
  |        |          |1 = CPU memory address 0xff80~0xffff is mapping to SPROM memory
  |[7:5]   |Reserved  |Reserved
 */
sfr IAPUEN = 0xA5;

/**
  @addtogroup SFR_IAPUEN_MACRO Bit Macro Functions
  Bit Macro Functions of IAPUEN
  @{ */

#define set_IAPUEN_APUEN         IAPUEN |= 0x01 /*!<Set IAPUEN.APUEN               */
#define set_IAPUEN_LDUEN         IAPUEN |= 0x02 /*!<Set IAPUEN.LDUEN               */
#define set_IAPUEN_CFUEN         IAPUEN |= 0x04 /*!<Set IAPUEN.CFUEN               */
#define set_IAPUEN_SPUEN         IAPUEN |= 0x08 /*!<Set IAPUEN.SPUEN               */
#define set_IAPUEN_SPMEN         IAPUEN |= 0x10 /*!<Set IAPUEN.SPMEN               */

#define clr_IAPUEN_APUEN         IAPUEN &=~0x01 /*!<Clear IAPUEN.APUEN             */
#define clr_IAPUEN_LDUEN         IAPUEN &=~0x02 /*!<Clear IAPUEN.LDUEN             */
#define clr_IAPUEN_CFUEN         IAPUEN &=~0x04 /*!<Clear IAPUEN.CFUEN             */
#define clr_IAPUEN_SPUEN         IAPUEN &=~0x08 /*!<Clear IAPUEN.SPUEN             */
#define clr_IAPUEN_SPMEN         IAPUEN &=~0x10 /*!<Clear IAPUEN.SPMEN             */

/**@}*/ /* end of SFR_IAPUEN_MACRO group */
/**@}*/ /* end of SFR_IAPUEN group */

/**
   @addtogroup SFR_IAPAL IAPAL
   Special Function Register IAPAL
   @{ */

/**
  @var IAPAL
  Address: A6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPA[7:0] |IAP Address Low Byte
  |        |          |IAPAL contains address IAPA[7:0] for IAP operations.
 */
sfr IAPAL = 0xA6;

/**
  @addtogroup SFR_IAPAL_MACRO Bit Macro Functions
  Bit Macro Functions of IAPAL
  @{ */





/**@}*/ /* end of SFR_IAPAL_MACRO group */
/**@}*/ /* end of SFR_IAPAL group */

/**
   @addtogroup SFR_IAPAH IAPAH
   Special Function Register IAPAH
   @{ */

/**
  @var IAPAH
  Address: A7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPA[15:8]|IAP Address High Byte
  |        |          |IAPAH contains address IAPA[15:8] for IAP operations.
 */
sfr IAPAH = 0xA7;

/**
  @addtogroup SFR_IAPAH_MACRO Bit Macro Functions
  Bit Macro Functions of IAPAH
  @{ */





/**@}*/ /* end of SFR_IAPAH_MACRO group */
/**@}*/ /* end of SFR_IAPAH group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EX0       |Enable External Interrupt 0
  |        |          |0 = External interrupt 0 Disabled.
  |        |          |1 = External interrupt 0 interrupt Enable. When interrupt generated
  |        |          |INT0 pin set 1.
  |[1]     |ET0       |Enable Timer 0 Interrupt
  |        |          |0 = Timer 0 interrupt Disabled.
  |        |          |1 = Timer 0 interrupt Enable. When interrupt generated TF0 (TCON.5)
  |        |          |set 1.
  |[2]     |EX1       |Enable External Interrupt 1
  |        |          |0 = External interrupt 1 Disabled.
  |        |          |1 = External interrupt 1 interrupt Enable. When interrupt generated
  |        |          |INT1 pin set 1.
  |[3]     |ET1       |Enable Timer 1 Interrupt
  |        |          |0 = Timer 1 interrupt Disabled.
  |        |          |1 = Timer 1 interrupt Enable. When interrupt generated TF1 (TCON.7)
  |        |          |set 1.
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Serial port 0 interrupt Enable. When interrupt generated TI
  |        |          |(SCON.1) or RI (SCON.0) set 1.
  |[5]     |EBOD      |Enable Brown-Out Interrupt
  |        |          |0 = Brown-out detection interrupt Disabled.
  |        |          |1 = Brown-out detection interrupt Enable. When interrupt generated BOF
  |        |          |(BODCON0.3) set 1.
  |[6]     |EADC      |Enable ADC Interrupt
  |        |          |0 = ADC interrupt Disabled.
  |        |          |1 = ADC interrupt Enable. When interrupt generated ADCF (ADCCON0.7)
  |        |          |set 1.
  |[7]     |EA        |Enable All Interrupt
  |        |          |This bit globally enables/disables all interrupts that are
  |        |          |individually enabled.
  |        |          |0 = All interrupt sources Disabled.
  |        |          |1 = Each interrupt Enabled depending on its individual mask setting.
  |        |          |Individual interrupts will occur if enabled.
 */
sfr IE = 0xA8;

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

sbit EA         = IE^7;
sbit EADC       = IE^6;
sbit EBOD       = IE^5;
sbit ES         = IE^4;
sbit ET1        = IE^3;
sbit EX1        = IE^2;
sbit ET0        = IE^1;
sbit EX0        = IE^0;

#define set_IE_EX0               IE |= 0x01 /*!<Set IE.EX0                     */
#define set_IE_ET0               IE |= 0x02 /*!<Set IE.ET0                     */
#define set_IE_EX1               IE |= 0x04 /*!<Set IE.EX1                     */
#define set_IE_ET1               IE |= 0x08 /*!<Set IE.ET1                     */
#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */
#define set_IE_EBOD              IE |= 0x20 /*!<Set IE.EBOD                    */
#define set_IE_EADC              IE |= 0x40 /*!<Set IE.EADC                    */
#define set_IE_EA                IE |= 0x80 /*!<Set IE.EA                      */

#define clr_IE_EX0               IE &=~0x01 /*!<Clear IE.EX0                   */
#define clr_IE_ET0               IE &=~0x02 /*!<Clear IE.ET0                   */
#define clr_IE_EX1               IE &=~0x04 /*!<Clear IE.EX1                   */
#define clr_IE_ET1               IE &=~0x08 /*!<Clear IE.ET1                   */
#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */
#define clr_IE_EBOD              IE &=~0x20 /*!<Clear IE.EBOD                  */
#define clr_IE_EADC              IE &=~0x40 /*!<Clear IE.EADC                  */
#define clr_IE_EA                IE &=~0x80 /*!<Clear IE.EA                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Interrupt generated by TI (SCON.1) or RI (SCON.0) Enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */

#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_SADDR0 SADDR0
   Special Function Register SADDR0
   @{ */

/**
  @var SADDR0
  Address: A9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADDR0[7:0]|Slave 0 Address
  |        |          |This byte specifies the microcontroller¡¦s own slave address for UATR0
  |        |          |multi-processor communication.
 */
sfr SADDR0 = 0xA9;

/**
  @addtogroup SFR_SADDR0_MACRO Bit Macro Functions
  Bit Macro Functions of SADDR0
  @{ */





/**@}*/ /* end of SFR_SADDR0_MACRO group */
/**@}*/ /* end of SFR_SADDR0 group */

/**
   @addtogroup SFR_WDCON WDCON
   Special Function Register WDCON
   @{ */

/**
  @var WDCON
  Address: AAH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3]     |WDTRF     |WDT Reset Flag
  |        |          |When the CPU is reset by WDT time-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software after
  |        |          |reset.
 */
sfr WDCON = 0xAA;

/**
  @addtogroup SFR_WDCON_MACRO Bit Macro Functions
  Bit Macro Functions of WDCON
  @{ */

#define set_WDCON_WDTRF          WDCON |= 0x08 /*!<Set WDCON.WDTRF                */

#define clr_WDCON_WDTRF          WDCON &=~0x08 /*!<Clear WDCON.WDTRF              */

/**@}*/ /* end of SFR_WDCON_MACRO group */
/**@}*/ /* end of SFR_WDCON group */

/**
   @addtogroup SFR_WDCON WDCON
   Special Function Register WDCON
   @{ */

/**
  @var WDCON
  Address: AAH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WDPS[2:0] |WDT Clock Pre-Scalar Select
  |        |          |These bits determine the pre-scale of WDT clock from 1/1 through
  |        |          |1/256. SeeTable 6.61 Watchdog Timer-out Interval Under Different Pre-
  |        |          |scalars. The default is the maximum pre-scale value.
  |[3]     |WDTRF     |WDT Reset Flag
  |        |          |When the CPU is reset by WDT time-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software after
  |        |          |reset.
  |[4]     |WIDPD     |WDT Running in Idle or Power-Down Mode
  |        |          |This bit is valid only when control bits in WDTEN[3:0] (CONFIG4[7:4])
  |        |          |are all 1. It decides whether WDT runs in Idle or Power-down mode when
  |        |          |WDT works as a general purpose timer.
  |        |          |0 = WDT stops running during Idle or Power-down mode.
  |        |          |1 = WDT keeps running during Idle or Power-down mode.
  |[5]     |WDTF      |WDT Time-Out Flag
  |        |          |This bit indicates an overflow of WDT counter. This flag should be
  |        |          |cleared by software.
  |[6]     |WDCLR     |WDT Clear
  |        |          |Setting this bit will reset the WDT count to 00H. It puts the counter
  |        |          |in a known state and prohibit the system from unpredictable reset. The
  |        |          |meaning of writing and reading WDCLR bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing WDT counter.
  |        |          |Reading:
  |        |          |0 = WDT counter is completely cleared.
  |        |          |1 = WDT counter is not yet cleared.
  |[7]     |WDTR      |WDT Run
  |        |          |This bit is valid only when control bits in WDTEN[3:0] (CONFIG4[7:4])
  |        |          |are all 1. At this time, WDT works as a general purpose timer.
  |        |          |0 = WDT Disabled.
  |        |          |1 = WDT Enabled. The WDT counter starts running.
 */

/**
  @addtogroup SFR_WDCON_MACRO Bit Macro Functions
  Bit Macro Functions of WDCON
  @{ */


#define set_WDCON_WDTRF          WDCON |= 0x08 /*!<Set WDCON.WDTRF                */
#define set_WDCON_WIDPD          WDCON |= 0x10 /*!<Set WDCON.WIDPD                */
#define set_WDCON_WDTF           WDCON |= 0x20 /*!<Set WDCON.WDTF                 */
#define set_WDCON_WDCLR          WDCON |= 0x40 /*!<Set WDCON.WDCLR                */
#define set_WDCON_WDTR           WDCON |= 0x80 /*!<Set WDCON.WDTR                 */


#define clr_WDCON_WDTRF          WDCON &=~0x08 /*!<Clear WDCON.WDTRF              */
#define clr_WDCON_WIDPD          WDCON &=~0x10 /*!<Clear WDCON.WIDPD              */
#define clr_WDCON_WDTF           WDCON &=~0x20 /*!<Clear WDCON.WDTF               */
#define clr_WDCON_WDCLR          WDCON &=~0x40 /*!<Clear WDCON.WDCLR              */
#define clr_WDCON_WDTR           WDCON &=~0x80 /*!<Clear WDCON.WDTR               */

/**@}*/ /* end of SFR_WDCON_MACRO group */
/**@}*/ /* end of SFR_WDCON group */

/**
   @addtogroup SFR_BODCON1 BODCON1
   Special Function Register BODCON1
   @{ */

/**
  @var BODCON1
  Address: ABH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |BODFLT    |BOD Filter Control
  |        |          |BOD has a filter which counts 32 clocks of FSYS to filter the power
  |        |          |noise when MCU runs with HIRC, or ECLK as the system clock and BOD
  |        |          |does not operates in its low power mode (LPBOD[1:0] = [0, 0]). In
  |        |          |other conditions, the filter counts 2 clocks of LIRC.
  |        |          |Note that when CPU is halted in Power-down mode. The BOD output is
  |        |          |permanently filtered by 2 clocks of LIRC.
  |        |          |The BOD filter avoids the power noise to trigger BOD event. This bit
  |        |          |controls BOD filter enabled or disabled.
  |        |          |0 = BOD filter Disabled.
  |        |          |1 = BOD filter Enabled. (Power-on reset default value.)
  |[2:1]   |LPBOD[1:0]|Low Power BOD Enable
  |        |          |00 = BOD normal mode. BOD circuit is always enabled.
  |        |          |01 = BOD low power mode 1 by turning on BOD circuit every 1.6 ms
  |        |          |periodically.
  |        |          |10 = BOD low power mode 2 by turning on BOD circuit every 6.4 ms
  |        |          |periodically.
  |        |          |11 = BOD low power mode 3 by turning on BOD circuit every 25.6 ms
  |        |          |periodically.
  |[7:3]   |Reserved  |Reserved
 */
sfr BODCON1 = 0xAB;

/**
  @addtogroup SFR_BODCON1_MACRO Bit Macro Functions
  Bit Macro Functions of BODCON1
  @{ */

#define set_BODCON1_BODFLT       BODCON1 |= 0x01 /*!<Set BODCON1.BODFLT             */


#define clr_BODCON1_BODFLT       BODCON1 &=~0x01 /*!<Clear BODCON1.BODFLT           */


/**@}*/ /* end of SFR_BODCON1_MACRO group */
/**@}*/ /* end of SFR_BODCON1 group */

/**
   @addtogroup SFR_EIP2 EIP2
   Special Function Register EIP2
   @{ */

/**
  @var EIP2
  Address: ACH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PACMP     |ACMP interrupt priority low bit
  |[1]     |PI2C1     |I2C interrupt priority low bit
  |[2]     |PPWM1     |PPWM1 interrupt priority low bit
  |[3]     |TK        |Touch Key interrupt priority low bit
  |[4]     |SMC1      |SMC1 interrupt priority low bit
  |[5]     |PDMA2     |PDMA2 interrupt priority low bit
  |[6]     |PDMA3     |PDMA3 interrupt priority low bit
  |[7]     |RTC       |RTC interrupt priority low bit
 */
sfr EIP2 = 0xAC;

/**
  @addtogroup SFR_EIP2_MACRO Bit Macro Functions
  Bit Macro Functions of EIP2
  @{ */

#define set_EIP2_PACMP           EIP2 |= 0x01 /*!<Set EIP2.PACMP                 */
#define set_EIP2_PI2C1           EIP2 |= 0x02 /*!<Set EIP2.PI2C1                 */
#define set_EIP2_PPWM1           EIP2 |= 0x04 /*!<Set EIP2.PPWM1                 */
#define set_EIP2_TK              EIP2 |= 0x08 /*!<Set EIP2.TK                    */
#define set_EIP2_SMC1            EIP2 |= 0x10 /*!<Set EIP2.SMC1                  */
#define set_EIP2_PDMA2           EIP2 |= 0x20 /*!<Set EIP2.PDMA2                 */
#define set_EIP2_PDMA3           EIP2 |= 0x40 /*!<Set EIP2.PDMA3                 */
#define set_EIP2_RTC             EIP2 |= 0x80 /*!<Set EIP2.RTC                   */

#define clr_EIP2_PACMP           EIP2 &=~0x01 /*!<Clear EIP2.PACMP               */
#define clr_EIP2_PI2C1           EIP2 &=~0x02 /*!<Clear EIP2.PI2C1               */
#define clr_EIP2_PPWM1           EIP2 &=~0x04 /*!<Clear EIP2.PPWM1               */
#define clr_EIP2_TK              EIP2 &=~0x08 /*!<Clear EIP2.TK                  */
#define clr_EIP2_SMC1            EIP2 &=~0x10 /*!<Clear EIP2.SMC1                */
#define clr_EIP2_PDMA2           EIP2 &=~0x20 /*!<Clear EIP2.PDMA2               */
#define clr_EIP2_PDMA3           EIP2 &=~0x40 /*!<Clear EIP2.PDMA3               */
#define clr_EIP2_RTC             EIP2 &=~0x80 /*!<Clear EIP2.RTC                 */

/**@}*/ /* end of SFR_EIP2_MACRO group */
/**@}*/ /* end of SFR_EIP2 group */

/**
   @addtogroup SFR_EIPH2 EIPH2
   Special Function Register EIPH2
   @{ */

/**
  @var EIPH2
  Address: ADH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PACMPH    |ACMP interrupt priority high bit
  |[1]     |PI2C1H    |I2C interrupt priority high bit
  |[2]     |PPWM1H    |PPWM1H interrupt priority high bit
  |[3]     |TKH       |Touch Key interrupt priority high bit
  |[4]     |SMC1H     |SMC1H interrupt priority high bit
  |[5]     |PDMA2H    |PDMA2H interrupt priority high bit
  |[6]     |PDMA3H    |PDMA3H interrupt priority high bit
  |[7]     |RTCH      |RTCH interrupt priority high bit
 */
sfr EIPH2 = 0xAD;

/**
  @addtogroup SFR_EIPH2_MACRO Bit Macro Functions
  Bit Macro Functions of EIPH2
  @{ */

#define set_EIPH2_PACMPH         EIPH2 |= 0x01 /*!<Set EIPH2.PACMPH               */
#define set_EIPH2_PI2C1H         EIPH2 |= 0x02 /*!<Set EIPH2.PI2C1H               */
#define set_EIPH2_PPWM1H         EIPH2 |= 0x04 /*!<Set EIPH2.PPWM1H               */
#define set_EIPH2_TKH            EIPH2 |= 0x08 /*!<Set EIPH2.TKH                  */
#define set_EIPH2_SMC1H          EIPH2 |= 0x10 /*!<Set EIPH2.SMC1H                */
#define set_EIPH2_PDMA2H         EIPH2 |= 0x20 /*!<Set EIPH2.PDMA2H               */
#define set_EIPH2_PDMA3H         EIPH2 |= 0x40 /*!<Set EIPH2.PDMA3H               */
#define set_EIPH2_RTCH           EIPH2 |= 0x80 /*!<Set EIPH2.RTCH                 */

#define clr_EIPH2_PACMPH         EIPH2 &=~0x01 /*!<Clear EIPH2.PACMPH             */
#define clr_EIPH2_PI2C1H         EIPH2 &=~0x02 /*!<Clear EIPH2.PI2C1H             */
#define clr_EIPH2_PPWM1H         EIPH2 &=~0x04 /*!<Clear EIPH2.PPWM1H             */
#define clr_EIPH2_TKH            EIPH2 &=~0x08 /*!<Clear EIPH2.TKH                */
#define clr_EIPH2_SMC1H          EIPH2 &=~0x10 /*!<Clear EIPH2.SMC1H              */
#define clr_EIPH2_PDMA2H         EIPH2 &=~0x20 /*!<Clear EIPH2.PDMA2H             */
#define clr_EIPH2_PDMA3H         EIPH2 &=~0x40 /*!<Clear EIPH2.PDMA3H             */
#define clr_EIPH2_RTCH           EIPH2 &=~0x80 /*!<Clear EIPH2.RTCH               */

/**@}*/ /* end of SFR_EIPH2_MACRO group */
/**@}*/ /* end of SFR_EIPH2 group */

/**
   @addtogroup SFR_IAPFD IAPFD
   Special Function Register IAPFD
   @{ */

/**
  @var IAPFD
  Address: AEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPFD[7:0]|IAP Flash Data
  |        |          |This byte contains Flash data, which is read from or is going to be
  |        |          |written to the Flash Memory. User should write data into IAPFD for
  |        |          |program mode before triggering IAP processing and read data from IAPFD
  |        |          |for read/verify mode after IAP processing is finished.
 */
sfr IAPFD = 0xAE;

/**
  @addtogroup SFR_IAPFD_MACRO Bit Macro Functions
  Bit Macro Functions of IAPFD
  @{ */





/**@}*/ /* end of SFR_IAPFD_MACRO group */
/**@}*/ /* end of SFR_IAPFD group */

/**
   @addtogroup SFR_IAPCN IAPCN
   Special Function Register IAPCN
   @{ */

/**
  @var IAPCN
  Address: AFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |FCTRL[3:0]|This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[4]     |FCEN      |This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[5]     |FOEN      |This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[7:6]   |IAPB[1:0] |IAP Control
  |        |          |This byte is used for IAP command. For details, see Figure 6.31 IAP
  |        |          |Modes and Command Codes.
 */
sfr IAPCN = 0xAF;

/**
  @addtogroup SFR_IAPCN_MACRO Bit Macro Functions
  Bit Macro Functions of IAPCN
  @{ */


#define set_IAPCN_FCEN           IAPCN |= 0x10 /*!<Set IAPCN.FCEN                 */
#define set_IAPCN_FOEN           IAPCN |= 0x20 /*!<Set IAPCN.FOEN                 */



#define clr_IAPCN_FCEN           IAPCN &=~0x10 /*!<Clear IAPCN.FCEN               */
#define clr_IAPCN_FOEN           IAPCN &=~0x20 /*!<Clear IAPCN.FOEN               */


/**@}*/ /* end of SFR_IAPCN_MACRO group */
/**@}*/ /* end of SFR_IAPCN group */

/**
   @addtogroup SFR_P3 P3
   Special Function Register P3
   @{ */

/**
  @var P3
  Address: B0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
sfr P3 = 0xB0;

/**
  @addtogroup SFR_P3_MACRO Bit Macro Functions
  Bit Macro Functions of P3
  @{ */
sbit P30        = P3^0;
sbit P31        = P3^1;
sbit P32        = P3^2;
sbit P33        = P3^3;
sbit P34        = P3^4;
sbit P35        = P3^5;
sbit P36        = P3^6;
sbit P37        = P3^7;

#define set_P3_7                         P3|=0x80
#define set_P3_6                         P3|=0x40
#define set_P3_5                         P3|=0x20
#define set_P3_4                         P3|=0x10
#define set_P3_3                         P3|=0x08
#define set_P3_2                         P3|=0x04
#define set_P3_1                         P3|=0x02
#define set_P3_0                         P3|=0x01

#define clr_P3_7                         P3&=0x7F
#define clr_P3_6                         P3&=0xBF
#define clr_P3_5                         P3&=0xDF
#define clr_P3_4                         P3&=0xEF
#define clr_P3_3                         P3&=0xF7
#define clr_P3_2                         P3&=0xFB
#define clr_P3_1                         P3&=0xFD
#define clr_P3_0                         P3&=0xFE

/**@}*/ /* end of SFR_P3_MACRO group */
/**@}*/ /* end of SFR_P3 group */

/**
   @addtogroup SFR_P5 P5
   Special Function Register P5
   @{ */

/**
  @var P5
  Address: B1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
sfr P5 = 0xB1;

/**
  @addtogroup SFR_P5_MACRO Bit Macro Functions
  Bit Macro Functions of P5
  @{ */





/**@}*/ /* end of SFR_P5_MACRO group */
/**@}*/ /* end of SFR_P5 group */

/**
   @addtogroup SFR_I2C1ADDR0 I2C1ADDR0
   Special Function Register I2C1ADDR0
   @{ */

/**
  @var I2C1ADDR0
  Address: B2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */
sfr I2C1ADDR0 = 0xB2;

/**
  @addtogroup SFR_I2C1ADDR0_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1ADDR0
  @{ */

#define set_I2C1ADDR0_GC         I2C1ADDR0 |= 0x01 /*!<Set I2C1ADDR0.GC               */


#define clr_I2C1ADDR0_GC         I2C1ADDR0 &=~0x01 /*!<Clear I2C1ADDR0.GC             */


/**@}*/ /* end of SFR_I2C1ADDR0_MACRO group */
/**@}*/ /* end of SFR_I2C1ADDR0 group */

/**
   @addtogroup SFR_I2C1DAT I2C1DAT
   Special Function Register I2C1DAT
   @{ */

/**
  @var I2C1DAT
  Address: B3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnDAT[7:0]|I2Cn Data
  |        |          |I2CnDAT contains a byte of the I2C data to be transmitted or a byte,
  |        |          |which has just received. Data in I2CnDAT remains as long as SI is
  |        |          |logic 1. The result of reading or writing I2CnDAT during I2C
  |        |          |transceiver progress is unpredicted.
  |        |          |While data in I2CnDAT is shifted out, data on the bus is
  |        |          |simultaneously being shifted in to update I2CnDAT. I2CnDAT always
  |        |          |shows the last byte that presented on the I2C bus. Thus the event of
  |        |          |lost arbitration, the original value of I2CnDAT changes after the
  |        |          |transaction.
 */
sfr I2C1DAT = 0xB3;

/**
  @addtogroup SFR_I2C1DAT_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1DAT
  @{ */





/**@}*/ /* end of SFR_I2C1DAT_MACRO group */
/**@}*/ /* end of SFR_I2C1DAT group */

/**
   @addtogroup SFR_I2C1STAT I2C1STAT
   Special Function Register I2C1STAT
   @{ */

/**
  @var I2C1STAT
  Address: B4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |0         |Reserved
  |        |          |The least significant three bits of I2CnSTAT are always read as 0.
  |[7:3]   |I2CnSTAT[7:3]|I2Cn Status Code
  |        |          |The MSB five bits of I2CnSTAT contains the status code. There are 27
  |        |          |possible status codes. When I2CnSTAT is F8H, no relevant state
  |        |          |information is available and SI flag keeps 0. All other 26 status
  |        |          |codes correspond to the I2C states. When each of these status is
  |        |          |entered, SI will be set as logic 1 and a interrupt is requested.
 */
sfr I2C1STAT = 0xB4;

/**
  @addtogroup SFR_I2C1STAT_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1STAT
  @{ */







/**@}*/ /* end of SFR_I2C1STAT_MACRO group */
/**@}*/ /* end of SFR_I2C1STAT group */

/**
   @addtogroup SFR_I2C1CLK I2C1CLK
   Special Function Register I2C1CLK
   @{ */

/**
  @var I2C1CLK
  Address: B5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnCLK[7:0]|I2Cn Clock Setting
  |        |          |In master mode:
  |        |          |This register determines the clock rate of I2C bus when the device is
  |        |          |in a master mode. The clock rate follows the equation,
  |        |          |.
  |        |          |Note that the I2CnCLK value of 00H and 01H are not valid. This is an
  |        |          |implement limitation.
  |        |          |In slave mode:
  |        |          |This byte has no effect. In slave mode, the I2C device will
  |        |          |automatically synchronize with any given clock rate up to 400k bps.
 */
sfr I2C1CLK = 0xB5;

/**
  @addtogroup SFR_I2C1CLK_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1CLK
  @{ */





/**@}*/ /* end of SFR_I2C1CLK_MACRO group */
/**@}*/ /* end of SFR_I2C1CLK group */

/**
   @addtogroup SFR_I2C1TOC I2C1TOC
   Special Function Register I2C1TOC
   @{ */

/**
  @var I2C1TOC
  Address: B6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |DIV       |I2C0 Time-Out Counter Clock Divider
  |        |          |0 = The clock of I2C time-out counter is FSYS/1.
  |        |          |1 = The clock of I2C time-out counter is FSYS/4.
  |[2]     |I2TOCEN   |I2C0 Time-Out Counter Enable
  |        |          |0 = I2C time-out counter Disabled.
  |        |          |1 = I2C time-out counter Enabled.
  |[7:3]   |Reserved  |Reserved
 */
sfr I2C1TOC = 0xB6;

/**
  @addtogroup SFR_I2C1TOC_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1TOC
  @{ */

#define set_I2C1TOC_DIV          I2C1TOC |= 0x02 /*!<Set I2C1TOC.DIV                */
#define set_I2C1TOC_I2TOCEN      I2C1TOC |= 0x04 /*!<Set I2C1TOC.I2TOCEN            */

#define clr_I2C1TOC_DIV          I2C1TOC &=~0x02 /*!<Clear I2C1TOC.DIV              */
#define clr_I2C1TOC_I2TOCEN      I2C1TOC &=~0x04 /*!<Clear I2C1TOC.I2TOCEN          */

/**@}*/ /* end of SFR_I2C1TOC_MACRO group */
/**@}*/ /* end of SFR_I2C1TOC group */

/**
   @addtogroup SFR_IPH IPH
   Special Function Register IPH
   @{ */

/**
  @var IPH
  Address: B7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0H      |External interrupt 0 priority high bit
  |[1]     |PT0H      |Timer 0 interrupt priority high bit
  |[2]     |PX1H      |External interrupt 1 priority high bit
  |[3]     |PT1H      |Timer 1 interrupt priority high bit
  |[4]     |PSH       |Serial port 0 interrupt priority high bit
  |[5]     |PBODH     |Brown-out detection interrupt priority high bit
  |[6]     |PADCH     |ADC interrupt priority high bit
  |[7]     |Reserved  |Reserved
 */
sfr IPH = 0xB7;

/**
  @addtogroup SFR_IPH_MACRO Bit Macro Functions
  Bit Macro Functions of IPH
  @{ */

#define set_IPH_PX0H             IPH |= 0x01 /*!<Set IPH.PX0H                   */
#define set_IPH_PT0H             IPH |= 0x02 /*!<Set IPH.PT0H                   */
#define set_IPH_PX1H             IPH |= 0x04 /*!<Set IPH.PX1H                   */
#define set_IPH_PT1H             IPH |= 0x08 /*!<Set IPH.PT1H                   */
#define set_IPH_PSH              IPH |= 0x10 /*!<Set IPH.PSH                    */
#define set_IPH_PBODH            IPH |= 0x20 /*!<Set IPH.PBODH                  */
#define set_IPH_PADCH            IPH |= 0x40 /*!<Set IPH.PADCH                  */

#define clr_IPH_PX0H             IPH &=~0x01 /*!<Clear IPH.PX0H                 */
#define clr_IPH_PT0H             IPH &=~0x02 /*!<Clear IPH.PT0H                 */
#define clr_IPH_PX1H             IPH &=~0x04 /*!<Clear IPH.PX1H                 */
#define clr_IPH_PT1H             IPH &=~0x08 /*!<Clear IPH.PT1H                 */
#define clr_IPH_PSH              IPH &=~0x10 /*!<Clear IPH.PSH                  */
#define clr_IPH_PBODH            IPH &=~0x20 /*!<Clear IPH.PBODH                */
#define clr_IPH_PADCH            IPH &=~0x40 /*!<Clear IPH.PADCH                */

/**@}*/ /* end of SFR_IPH_MACRO group */
/**@}*/ /* end of SFR_IPH group */

/**
   @addtogroup SFR_IP IP
   Special Function Register IP
   @{ */

/**
  @var IP
  Address: B8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0       |External interrupt 0 priority low bit
  |[1]     |PT0       |Timer 0 interrupt priority low bit
  |[2]     |PX1       |External interrupt 1 priority low bit
  |[3]     |PT1       |Timer 1 interrupt priority low bit
  |[4]     |PS        |Serial port 0 interrupt priority low bit
  |[5]     |PBOD      |Brown-out detection interrupt priority low bit
  |[6]     |PADC      |ADC interrupt priority low bit
  |[7]     |Reserved  |Reserved
 */
sfr IP = 0xB8;

/**
  @addtogroup SFR_IP_MACRO Bit Macro Functions
  Bit Macro Functions of IP
  @{ */
sbit PADC       = IP^6;
sbit PBOD       = IP^5;
sbit PS         = IP^4;
sbit PT1        = IP^3;
sbit PX1        = IP^2;
sbit PT0        = IP^1;
sbit PX0        = IP^0;

#define set_IP_PX0               IP |= 0x01 /*!<Set IP.PX0                     */
#define set_IP_PT0               IP |= 0x02 /*!<Set IP.PT0                     */
#define set_IP_PX1               IP |= 0x04 /*!<Set IP.PX1                     */
#define set_IP_PT1               IP |= 0x08 /*!<Set IP.PT1                     */
#define set_IP_PS                IP |= 0x10 /*!<Set IP.PS                      */
#define set_IP_PBOD              IP |= 0x20 /*!<Set IP.PBOD                    */
#define set_IP_PADC              IP |= 0x40 /*!<Set IP.PADC                    */

#define clr_IP_PX0               IP &=~0x01 /*!<Clear IP.PX0                   */
#define clr_IP_PT0               IP &=~0x02 /*!<Clear IP.PT0                   */
#define clr_IP_PX1               IP &=~0x04 /*!<Clear IP.PX1                   */
#define clr_IP_PT1               IP &=~0x08 /*!<Clear IP.PT1                   */
#define clr_IP_PS                IP &=~0x10 /*!<Clear IP.PS                    */
#define clr_IP_PBOD              IP &=~0x20 /*!<Clear IP.PBOD                  */
#define clr_IP_PADC              IP &=~0x40 /*!<Clear IP.PADC                  */

/**@}*/ /* end of SFR_IP_MACRO group */
/**@}*/ /* end of SFR_IP group */

/**
   @addtogroup SFR_SADEN0 SADEN0
   Special Function Register SADEN0
   @{ */

/**
  @var SADEN0
  Address: B9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADEN0[7:0]|Slave 0 Address Mask
  |        |          |This byte is a mask byte of UART0 that contains don¡¦t-care bits
  |        |          |(defined by zeros) to form the device¡¦s Given address. The don¡¦t-care
  |        |          |bits provide the flexibility to address one or more slaves at a time.
 */
sfr SADEN0 = 0xB9;

/**
  @addtogroup SFR_SADEN0_MACRO Bit Macro Functions
  Bit Macro Functions of SADEN0
  @{ */





/**@}*/ /* end of SFR_SADEN0_MACRO group */
/**@}*/ /* end of SFR_SADEN0 group */

/**
   @addtogroup SFR_SADEN1 SADEN1
   Special Function Register SADEN1
   @{ */

/**
  @var SADEN1
  Address: BAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADEN1[7:0]|Slave 1 Address Mask
  |        |          |This byte is a mask byte of UART1 that contains don¡¦t-care bits
  |        |          |(defined by zeros) to form the device¡¦s Given address. The don¡¦t-care
  |        |          |bits provide the flexibility to address one or more slaves at a time.
 */
sfr SADEN1 = 0xBA;

/**
  @addtogroup SFR_SADEN1_MACRO Bit Macro Functions
  Bit Macro Functions of SADEN1
  @{ */





/**@}*/ /* end of SFR_SADEN1_MACRO group */
/**@}*/ /* end of SFR_SADEN1 group */

/**
   @addtogroup SFR_SADDR1 SADDR1
   Special Function Register SADDR1
   @{ */

/**
  @var SADDR1
  Address: BBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADDR1[7:0]|Slave 1 Address
  |        |          |This byte specifies the microcontroller¡¦s own slave address for UART1
  |        |          |multi-processor communication.
 */
sfr SADDR1 = 0xBB;

/**
  @addtogroup SFR_SADDR1_MACRO Bit Macro Functions
  Bit Macro Functions of SADDR1
  @{ */





/**@}*/ /* end of SFR_SADDR1_MACRO group */
/**@}*/ /* end of SFR_SADDR1 group */

/**
   @addtogroup SFR_I2C0DAT I2C0DAT
   Special Function Register I2C0DAT
   @{ */

/**
  @var I2C0DAT
  Address: BCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnDAT[7:0]|I2Cn Data
  |        |          |I2CnDAT contains a byte of the I2C data to be transmitted or a byte,
  |        |          |which has just received. Data in I2CnDAT remains as long as SI is
  |        |          |logic 1. The result of reading or writing I2CnDAT during I2C
  |        |          |transceiver progress is unpredicted.
  |        |          |While data in I2CnDAT is shifted out, data on the bus is
  |        |          |simultaneously being shifted in to update I2CnDAT. I2CnDAT always
  |        |          |shows the last byte that presented on the I2C bus. Thus the event of
  |        |          |lost arbitration, the original value of I2CnDAT changes after the
  |        |          |transaction.
 */
sfr I2C0DAT = 0xBC;

/**
  @addtogroup SFR_I2C0DAT_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0DAT
  @{ */





/**@}*/ /* end of SFR_I2C0DAT_MACRO group */
/**@}*/ /* end of SFR_I2C0DAT group */

/**
   @addtogroup SFR_I2C0STAT I2C0STAT
   Special Function Register I2C0STAT
   @{ */

/**
  @var I2C0STAT
  Address: BDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |0         |Reserved
  |        |          |The least significant three bits of I2CnSTAT are always read as 0.
  |[7:3]   |I2CnSTAT[7:3]|I2Cn Status Code
  |        |          |The MSB five bits of I2CnSTAT contains the status code. There are 27
  |        |          |possible status codes. When I2CnSTAT is F8H, no relevant state
  |        |          |information is available and SI flag keeps 0. All other 26 status
  |        |          |codes correspond to the I2C states. When each of these status is
  |        |          |entered, SI will be set as logic 1 and a interrupt is requested.
 */
sfr I2C0STAT = 0xBD;

/**
  @addtogroup SFR_I2C0STAT_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0STAT
  @{ */







/**@}*/ /* end of SFR_I2C0STAT_MACRO group */
/**@}*/ /* end of SFR_I2C0STAT group */

/**
   @addtogroup SFR_I2C0CLK I2C0CLK
   Special Function Register I2C0CLK
   @{ */

/**
  @var I2C0CLK
  Address: BEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnCLK[7:0]|I2Cn Clock Setting
  |        |          |In master mode:
  |        |          |This register determines the clock rate of I2C bus when the device is
  |        |          |in a master mode. The clock rate follows the equation,
  |        |          |.
  |        |          |Note that the I2CnCLK value of 00H and 01H are not valid. This is an
  |        |          |implement limitation.
  |        |          |In slave mode:
  |        |          |This byte has no effect. In slave mode, the I2C device will
  |        |          |automatically synchronize with any given clock rate up to 400k bps.
 */
sfr I2C0CLK = 0xBE;

/**
  @addtogroup SFR_I2C0CLK_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0CLK
  @{ */





/**@}*/ /* end of SFR_I2C0CLK_MACRO group */
/**@}*/ /* end of SFR_I2C0CLK group */

/**
   @addtogroup SFR_I2C0TOC I2C0TOC
   Special Function Register I2C0TOC
   @{ */

/**
  @var I2C0TOC
  Address: BFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |DIV       |I2C0 Time-Out Counter Clock Divider
  |        |          |0 = The clock of I2C time-out counter is FSYS/1.
  |        |          |1 = The clock of I2C time-out counter is FSYS/4.
  |[2]     |I2TOCEN   |I2C0 Time-Out Counter Enable
  |        |          |0 = I2C time-out counter Disabled.
  |        |          |1 = I2C time-out counter Enabled.
  |[7:3]   |Reserved  |Reserved
 */
sfr I2C0TOC = 0xBF;

/**
  @addtogroup SFR_I2C0TOC_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0TOC
  @{ */

#define set_I2C0TOC_DIV          I2C0TOC |= 0x02 /*!<Set I2C0TOC.DIV                */
#define set_I2C0TOC_I2TOCEN      I2C0TOC |= 0x04 /*!<Set I2C0TOC.I2TOCEN            */

#define clr_I2C0TOC_DIV          I2C0TOC &=~0x02 /*!<Clear I2C0TOC.DIV              */
#define clr_I2C0TOC_I2TOCEN      I2C0TOC &=~0x04 /*!<Clear I2C0TOC.I2TOCEN          */

/**@}*/ /* end of SFR_I2C0TOC_MACRO group */
/**@}*/ /* end of SFR_I2C0TOC group */

/**
   @addtogroup SFR_I2C0CON I2C0CON
   Special Function Register I2C0CON
   @{ */

/**
  @var I2C0CON
  Address: C0H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */
sfr I2C0CON = 0xC0;

/**
  @addtogroup SFR_I2C0CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0CON
  @{ */
sbit I2CEN0     = I2C0CON^6;
sbit STA0       = I2C0CON^5;
sbit STO0       = I2C0CON^4;
sbit SI0        = I2C0CON^3;
sbit AA0        = I2C0CON^2;
sbit I2C0PX     = I2C0CON^0;

#define set_I2C0CON_AA           I2C0CON |= 0x04 /*!<Set I2C0CON.AA                 */
#define set_I2C0CON_SI           I2C0CON |= 0x08 /*!<Set I2C0CON.SI                 */
#define set_I2C0CON_STO          I2C0CON |= 0x10 /*!<Set I2C0CON.STO                */
#define set_I2C0CON_STA          I2C0CON |= 0x20 /*!<Set I2C0CON.STA                */
#define set_I2C0CON_I2CEN        I2C0CON |= 0x40 /*!<Set I2C0CON.I2CEN              */
#define set_I2C0CON_I            I2C0CON |= 0x80 /*!<Set I2C0CON.I                  */

#define clr_I2C0CON_AA           I2C0CON &=~0x04 /*!<Clear I2C0CON.AA               */
#define clr_I2C0CON_SI           I2C0CON &=~0x08 /*!<Clear I2C0CON.SI               */
#define clr_I2C0CON_STO          I2C0CON &=~0x10 /*!<Clear I2C0CON.STO              */
#define clr_I2C0CON_STA          I2C0CON &=~0x20 /*!<Clear I2C0CON.STA              */
#define clr_I2C0CON_I2CEN        I2C0CON &=~0x40 /*!<Clear I2C0CON.I2CEN            */
#define clr_I2C0CON_I            I2C0CON &=~0x80 /*!<Clear I2C0CON.I                */

/**@}*/ /* end of SFR_I2C0CON_MACRO group */
/**@}*/ /* end of SFR_I2C0CON group */

/**
   @addtogroup SFR_I2C0ADDR0 I2C0ADDR0
   Special Function Register I2C0ADDR0
   @{ */

/**
  @var I2C0ADDR0
  Address: C1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */
sfr I2C0ADDR0 = 0xC1;

/**
  @addtogroup SFR_I2C0ADDR0_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0ADDR0
  @{ */

#define set_I2C0ADDR0_GC         I2C0ADDR0 |= 0x01 /*!<Set I2C0ADDR0.GC               */


#define clr_I2C0ADDR0_GC         I2C0ADDR0 &=~0x01 /*!<Clear I2C0ADDR0.GC             */


/**@}*/ /* end of SFR_I2C0ADDR0_MACRO group */
/**@}*/ /* end of SFR_I2C0ADDR0 group */

/**
   @addtogroup SFR_ADCRL ADCRL
   Special Function Register ADCRL
   @{ */

/**
  @var ADCRL
  Address: C2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCR[3:0] |ADC Result Low Byte
  |        |          |The least significant 4 bits of the ADC result stored in this
  |        |          |register.
  |[7:4]   |Reserved  |Reserved
 */
sfr ADCRL = 0xC2;

/**
  @addtogroup SFR_ADCRL_MACRO Bit Macro Functions
  Bit Macro Functions of ADCRL
  @{ */





/**@}*/ /* end of SFR_ADCRL_MACRO group */
/**@}*/ /* end of SFR_ADCRL group */

/**
   @addtogroup SFR_ADCRH ADCRH
   Special Function Register ADCRH
   @{ */

/**
  @var ADCRH
  Address: C3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCR[11:4]|ADC Result High Byte
  |        |          |The most significant 8 bits of the ADC result stored in this register.
 */
sfr ADCRH = 0xC3;

/**
  @addtogroup SFR_ADCRH_MACRO Bit Macro Functions
  Bit Macro Functions of ADCRH
  @{ */





/**@}*/ /* end of SFR_ADCRH_MACRO group */
/**@}*/ /* end of SFR_ADCRH group */

/**
   @addtogroup SFR_T3CON T3CON
   Special Function Register T3CON
   @{ */

/**
  @var T3CON
  Address: C4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6]     |SMOD0_1   |Serial Port 1 Framing Error Access Enable
  |        |          |0 = S1CON.7 accesses to SM0_1 bit.
  |        |          |1 = S1CON.7 accesses to FE_1 bit.
  |[7]     |SMOD_1    |Serial Port 1 Double Baud Rate Enable
  |        |          |Setting this bit doubles the serial port baud rate when UART1 is in
  |        |          |Mode 2. See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
 */
sfr T3CON = 0xC4;

/**
  @addtogroup SFR_T3CON_MACRO Bit Macro Functions
  Bit Macro Functions of T3CON
  @{ */

#define set_T3CON_SMOD0_1        T3CON |= 0x40 /*!<Set T3CON.SMOD0_1              */
#define set_T3CON_SMOD_1         T3CON |= 0x80 /*!<Set T3CON.SMOD_1               */

#define clr_T3CON_SMOD0_1        T3CON &=~0x40 /*!<Clear T3CON.SMOD0_1            */
#define clr_T3CON_SMOD_1         T3CON &=~0x80 /*!<Clear T3CON.SMOD_1             */

/**@}*/ /* end of SFR_T3CON_MACRO group */
/**@}*/ /* end of SFR_T3CON group */

/**
   @addtogroup SFR_RL3 RL3
   Special Function Register RL3
   @{ */

/**
  @var RL3
  Address: C5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RL3[7:0]  |Timer 3 Reload Low Byte
  |        |          |It holds the low byte of the reload value of Timer 3.
 */
sfr RL3 = 0xC5;

/**
  @addtogroup SFR_RL3_MACRO Bit Macro Functions
  Bit Macro Functions of RL3
  @{ */





/**@}*/ /* end of SFR_RL3_MACRO group */
/**@}*/ /* end of SFR_RL3 group */

/**
   @addtogroup SFR_RH3 RH3
   Special Function Register RH3
   @{ */

/**
  @var RH3
  Address: C6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RH3[7:0]  |Timer 3 Reload High Byte
  |        |          |It holds the high byte of the reload value of Time 3.
 */
sfr RH3 = 0xC6;

/**
  @addtogroup SFR_RH3_MACRO Bit Macro Functions
  Bit Macro Functions of RH3
  @{ */





/**@}*/ /* end of SFR_RH3_MACRO group */
/**@}*/ /* end of SFR_RH3 group */

/**
   @addtogroup SFR_TA TA
   Special Function Register TA
   @{ */

/**
  @var TA
  Address: C7H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TA[7:0]   |Timed Access
  |        |          |The timed access register controls the access to protected SFR. To
  |        |          |access protected bits, user should first write AAH to the TA and
  |        |          |immediately followed by a write of 55H to TA. After these two steps, a
  |        |          |writing permission window is opened for 4 clock cycles during this
  |        |          |period that user may write to protected SFR.
 */
sfr TA = 0xC7;

/**
  @addtogroup SFR_TA_MACRO Bit Macro Functions
  Bit Macro Functions of TA
  @{ */





/**@}*/ /* end of SFR_TA_MACRO group */
/**@}*/ /* end of SFR_TA group */



/**@}*/ /* end of SFR_TA_MACRO group */
/**@}*/ /* end of SFR_TA group */

/**
   @addtogroup SFR_T2CON T2CON
   Special Function Register T2CON
   @{ */

/**
  @var T2CON
  Address: C8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CM_RL2    |Timer 2 Compare or Auto-Reload Mode Select
  |        |          |This bit selects Timer 2 functioning mode.
  |        |          |0 = Auto-reload mode.
  |        |          |1 = Compare mode.
  |[1]     |Reserved  |Reserved
  |[2]     |TR2       |Timer 2 Run Control
  |        |          |0 = Timer 2 Disabled. Clearing this bit will halt Timer 2 and the
  |        |          |current count will be preserved in TH2 and TL2.
  |        |          |1 = Timer 2 Enabled.
  |[6:3]   |Reserved  |Reserved
  |[7]     |TF2       |Timer 2 Overflow Flag
  |        |          |This bit is set when Timer 2 overflows or a compare match occurs. If
  |        |          |the Timer 2 interrupt and the global interrupt are enable, setting
  |        |          |this bit will make CPU execute Timer 2 interrupt service routine. This
  |        |          |bit is not automatically cleared via hardware and should be cleared
  |        |          |via software.
 */
sfr T2CON = 0xC8;

/**
  @addtogroup SFR_T2CON_MACRO Bit Macro Functions
  Bit Macro Functions of T2CON
  @{ */

#define set_T2CON_CM_RL2         T2CON |= 0x01 /*!<Set T2CON.CM_RL2               */
#define set_T2CON_TR2            T2CON |= 0x04 /*!<Set T2CON.TR2                  */
#define set_T2CON_TF2            T2CON |= 0x80 /*!<Set T2CON.TF2                  */

#define clr_T2CON_CM_RL2         T2CON &=~0x01 /*!<Clear T2CON.CM_RL2             */
#define clr_T2CON_TR2            T2CON &=~0x04 /*!<Clear T2CON.TR2                */
#define clr_T2CON_TF2            T2CON &=~0x80 /*!<Clear T2CON.TF2                */

/**@}*/ /* end of SFR_T2CON_MACRO group */
/**@}*/ /* end of SFR_T2CON group */

/**
   @addtogroup SFR_T2MOD T2MOD
   Special Function Register T2MOD
   @{ */

/**
  @var T2MOD
  Address: C9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LDTS[1:0] |Auto-Reload Trigger Select
  |        |          |These bits select the reload trigger event.
  |        |          |00 = Reload when Timer 2 overflows.
  |        |          |01 = Reload when input capture 0 event occurs.
  |        |          |10 = Reload when input capture 1 event occurs.
  |        |          |11 = Reload when input capture 2 event occurs.
  |[2]     |CMPCR     |Compare Match Auto-Clear
  |        |          |This bit is valid only under Timer 2 compare mode. It enables hardware
  |        |          |auto-clearing TH2 and TL2 counter registers after a compare match
  |        |          |occurs.
  |        |          |0 = Timer 2 continues counting when a compare match occurs.
  |        |          |1 = Timer 2 value is auto-cleared as 0000H when a compare match
  |        |          |occurs.
  |[3]     |CAPCR     |Capture Auto-Clear
  |        |          |This bit is valid only under Timer 2 auto-reload mode. It enables
  |        |          |hardware auto-clearing TH2 and TL2 counter registers after they have
  |        |          |been transferred in to RCMP2H and RCMP2L while a capture event occurs.
  |        |          |0 = Timer 2 continues counting when a capture event occurs.
  |        |          |1 = Timer 2 value is auto-cleared as 0000H when a capture event
  |        |          |occurs.
  |[6:4]   |T2DIV[2:0]|Timer 2 Clock Divider
  |        |          |000 = Timer 2 clock divider is 1/1.
  |        |          |001 = Timer 2 clock divider is 1/4.
  |        |          |010 = Timer 2 clock divider is 1/16.
  |        |          |011 = Timer 2 clock divider is 1/32.
  |        |          |100 = Timer 2 clock divider is 1/64.
  |        |          |101 = Timer 2 clock divider is 1/128.
  |        |          |110 = Timer 2 clock divider is 1/256.
  |        |          |111 = Timer 2 clock divider is 1/512.
  |[7]     |LDEN      |Enable Auto-Reload
  |        |          |0 = Reloading RCMP2H and RCMP2L to TH2 and TL2
  |        |          |Disabled.
  |        |          |1 = Reloading RCMP2H and RCMP2L to TH2 and TL2 Enabled.
 */
sfr T2MOD = 0xC9;

/**
  @addtogroup SFR_T2MOD_MACRO Bit Macro Functions
  Bit Macro Functions of T2MOD
  @{ */


#define set_T2MOD_CMPCR          T2MOD |= 0x04 /*!<Set T2MOD.CMPCR                */
#define set_T2MOD_CAPCR          T2MOD |= 0x08 /*!<Set T2MOD.CAPCR                */

#define set_T2MOD_LDEN           T2MOD |= 0x80 /*!<Set T2MOD.LDEN                 */


#define clr_T2MOD_CMPCR          T2MOD &=~0x04 /*!<Clear T2MOD.CMPCR              */
#define clr_T2MOD_CAPCR          T2MOD &=~0x08 /*!<Clear T2MOD.CAPCR              */

#define clr_T2MOD_LDEN           T2MOD &=~0x80 /*!<Clear T2MOD.LDEN               */

/**@}*/ /* end of SFR_T2MOD_MACRO group */
/**@}*/ /* end of SFR_T2MOD group */


/**
   @addtogroup SFR_PIF PIF
   Special Function Register PIF
   @{ */

/**
  @var PIF
  Address: CAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PIFn      |Pin Interrupt Channel n Flag
  |        |          |If the edge trigger is selected, this flag will be set by hardware if
  |        |          |the channel n of pin interrupt detects an enabled edge trigger. This
  |        |          |flag should be cleared by software.
  |        |          |If the level trigger is selected, this flag follows the inverse of the
  |        |          |input signal¡¦s logic level on the channel n of pin interrupt. Software
  |        |          |cannot control it.
 */
sfr PIF = 0xCA;

/**
  @addtogroup SFR_PIF_MACRO Bit Macro Functions
  Bit Macro Functions of PIF
  @{ */

#define set_PIF_PIF7                     SFRS=0;PIF|=0x80
#define set_PIF_PIF6                     SFRS=0;PIF|=0x40
#define set_PIF_PIF5                     SFRS=0;PIF|=0x20
#define set_PIF_PIF4                     SFRS=0;PIF|=0x10
#define set_PIF_PIF3                     SFRS=0;PIF|=0x08
#define set_PIF_PIF2                     SFRS=0;PIF|=0x04
#define set_PIF_PIF1                     SFRS=0;PIF|=0x02
#define set_PIF_PIF0                     SFRS=0;PIF|=0x01

#define clr_PIF_PIF7                     SFRS=0;PIF&=0x7F
#define clr_PIF_PIF6                     SFRS=0;PIF&=0xBF
#define clr_PIF_PIF5                     SFRS=0;PIF&=0xDF
#define clr_PIF_PIF4                     SFRS=0;PIF&=0xEF
#define clr_PIF_PIF3                     SFRS=0;PIF&=0xF7
#define clr_PIF_PIF2                     SFRS=0;PIF&=0xFB
#define clr_PIF_PIF1                     SFRS=0;PIF&=0xFD
#define clr_PIF_PIF0                     SFRS=0;PIF&=0xFE

/**@}*/ /* end of SFR_PIF_MACRO group */
/**@}*/ /* end of SFR_PIF group */

/**
   @addtogroup SFR_ADCBAL ADCBAL
   Special Function Register ADCBAL
   @{ */

/**
  @var ADCBAL
  Address: CBH, Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCBA[7:0]|ADC RAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of RAM base address to store ADC continue
  |        |          |sampling data.
  |        |          |RAM base address ADCBA[11:0] = { ADCBAH[3:0], ADCBAL[7:0]}
 */
sfr ADCBAL = 0xCB;

/**
  @addtogroup SFR_ADCBAL_MACRO Bit Macro Functions
  Bit Macro Functions of ADCBAL
  @{ */


/**@}*/ /* end of SFR_ADCBAL_MACRO group */
/**@}*/ /* end of SFR_ADCBAL group */

/**
   @addtogroup SFR_ADCMPL ADCMPL
   Special Function Register ADCMPL
   @{ */

/**
  @var ADCMPL
  Address: CEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCMP[3:0]|ADC Compare Low Byte
  |        |          |The least significant 4 bits of the ADC compare value stores in this
  |        |          |register.
  |[7:4]   |Reserved  |Reserved
 */
sfr ADCMPL = 0xCE;

/**
  @addtogroup SFR_ADCMPL_MACRO Bit Macro Functions
  Bit Macro Functions of ADCMPL
  @{ */





/**@}*/ /* end of SFR_ADCMPL_MACRO group */
/**@}*/ /* end of SFR_ADCMPL group */

/**
   @addtogroup SFR_ADCMPH ADCMPH
   Special Function Register ADCMPH
   @{ */

/**
  @var ADCMPH
  Address: CFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCMP[11:4]|ADC Compare High Byte
  |        |          |The most significant 8 bits of the ADC compare value stores in this
  |        |          |register.
 */
sfr ADCMPH = 0xCF;

/**
  @addtogroup SFR_ADCMPH_MACRO Bit Macro Functions
  Bit Macro Functions of ADCMPH
  @{ */





/**@}*/ /* end of SFR_ADCMPH_MACRO group */
/**@}*/ /* end of SFR_ADCMPH group */

/**
   @addtogroup SFR_PWM0CON0 PWM0CON0
   Special Function Register PWM0CON0
   @{ */

/**
  @var PWM0CON0
  Address: D1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWM0RUN   |PWM0 Run Enable
  |        |          |0 = PWM0 stays in idle.
  |        |          |1 = PWM0 starts running.
 */
sfr PWM0CON0 = 0xD1;

/**
  @addtogroup SFR_PWM0CON0_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0CON0
  @{ */

#define set_PWM0CON0_CLRPWM      PWM0CON0 |= 0x10 /*!<Set PWM0CON0.CLRPWM            */
#define set_PWM0CON0_PWMF        PWM0CON0 |= 0x20 /*!<Set PWM0CON0.PWMF              */
#define set_PWM0CON0_LOAD        PWM0CON0 |= 0x40 /*!<Set PWM0CON0.LOAD              */
#define set_PWM0CON0_PWM0RUN     PWM0CON0 |= 0x80 /*!<Set PWM0CON0.PWM0RUN           */

#define clr_PWM0CON0_CLRPWM      PWM0CON0 &=~0x10 /*!<Clear PWM0CON0.CLRPWM          */
#define clr_PWM0CON0_PWMF        PWM0CON0 &=~0x20 /*!<Clear PWM0CON0.PWMF            */
#define clr_PWM0CON0_LOAD        PWM0CON0 &=~0x40 /*!<Clear PWM0CON0.LOAD            */
#define clr_PWM0CON0_PWM0RUN     PWM0CON0 &=~0x80 /*!<Clear PWM0CON0.PWM0RUN         */

/**@}*/ /* end of SFR_PWM0CON0_MACRO group */
/**@}*/ /* end of SFR_PWM0CON0 group */

/**
   @addtogroup SFR_ACMPCR0 ACMPCR0
   Special Function Register ACMPCR0
   @{ */

/**
  @var ACMPCR0
  Address: D2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMPEN    |Comparator 0 Enable Bit
  |        |          |0 = Comparator 0 Disabled.
  |        |          |1 = Comparator 0 Enabled.
  |[1]     |ACMPIE    |Comparator 0 Interrupt Enable Bit
  |        |          |0 = Comparator 0 interrupt Disabled.
  |        |          |1 = Comparator 0 interrupt Enabled. If WKEN (ACMPCR1[3]) is set to 1,
  |        |          |the wake-up interrupt function will be enabled as well.
  |[2]     |HYSEN     |Comparator 0 Hysteresis Enable Bit
  |        |          |0 = Comparator 0 hysteresis Disabled.
  |        |          |1 = Comparator 0 hysteresis Enabled.
  |[3]     |WKEN      |Comparator 0 Power-Down Wake-Up Enable Bit
  |        |          |0 = Comparator 0 Wake-up function Disabled.
  |        |          |1 = Comparator 0 Wake-up function Enabled.
  |[5:4]   |NEGSEL    |Comparator 0 Negative Input Selection
  |        |          |00 = ACMP0_N0 (P2.4) pin.
  |        |          |01 = Internal comparator reference voltage (CRV).
  |        |          |10 = VBG (Band-gap).
  |        |          |11 = ACMP0_N1 (P2.0)pin.
  |[7:6]   |POSSEL    |Comparator 0 Positive Input Selection
  |        |          |00 = ACMP0_P0 (P2.5) pin.
  |        |          |01 = ACMP0_P1 (P2.3) pin.
  |        |          |10 = ACMP0_P2 (P2.1) pin.
  |        |          |11 = ACMP0_P3 (P3.1) pin.
 */
sfr ACMPCR0 = 0xD2;

/**
  @addtogroup SFR_ACMPCR0_MACRO Bit Macro Functions
  Bit Macro Functions of ACMPCR0
  @{ */

#define set_ACMPCR0_ACMPEN       ACMPCR0 |= 0x01 /*!<Set ACMPCR0.ACMPEN             */
#define set_ACMPCR0_ACMPIE       ACMPCR0 |= 0x02 /*!<Set ACMPCR0.ACMPIE             */
#define set_ACMPCR0_HYSEN        ACMPCR0 |= 0x04 /*!<Set ACMPCR0.HYSEN              */
#define set_ACMPCR0_WKEN         ACMPCR0 |= 0x08 /*!<Set ACMPCR0.WKEN               */



#define clr_ACMPCR0_ACMPEN       ACMPCR0 &=~0x01 /*!<Clear ACMPCR0.ACMPEN           */
#define clr_ACMPCR0_ACMPIE       ACMPCR0 &=~0x02 /*!<Clear ACMPCR0.ACMPIE           */
#define clr_ACMPCR0_HYSEN        ACMPCR0 &=~0x04 /*!<Clear ACMPCR0.HYSEN            */
#define clr_ACMPCR0_WKEN         ACMPCR0 &=~0x08 /*!<Clear ACMPCR0.WKEN             */



/**@}*/ /* end of SFR_ACMPCR0_MACRO group */
/**@}*/ /* end of SFR_ACMPCR0 group */

/**
   @addtogroup SFR_ACMPCR1 ACMPCR1
   Special Function Register ACMPCR1
   @{ */

/**
  @var ACMPCR1
  Address: D3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMPEN    |Comparator 1 Enable Bit
  |        |          |0 = Comparator 1 Disabled.
  |        |          |1 = Comparator 1 Enabled.
  |[1]     |ACMPIE    |Comparator 1 Interrupt Enable Bit
  |        |          |0 = Comparator 1 interrupt Disabled.
  |        |          |1 = Comparator 1 interrupt Enabled. If WKEN (ACMPCR2[3]) is set to 1,
  |        |          |the wake-up interrupt function will be enabled as well.
  |[2]     |HYSEN     |Comparator 1 Hysteresis Enable Bit
  |        |          |0 = Comparator 1 hysteresis Disabled.
  |        |          |1 = Comparator 1 hysteresis Enabled.
  |[3]     |WKEN      |Comparator 1 Power-Down Wake-Up Enable Bit
  |        |          |0 = Comparator 1 Wake-up function Disabled.
  |        |          |1 = Comparator 1 Wake-up function Enabled.
  |[5:4]   |NEGSEL    |Comparator 1 Negative Input Selection
  |        |          |00 = ACMP1_N0 (P2.2) pin.
  |        |          |01 = Internal comparator reference voltage (CRV).
  |        |          |10 = VBG (Band-gap).
  |        |          |11 = ACMP1_N1 (P3.2)pin.
  |[7:6]   |POSSEL    |Comparator 1 Positive Input Selection
  |        |          |00 = ACMP1_P0 (P2.5) pin.
  |        |          |01 = ACMP1_P1 (P2.3) pin.
  |        |          |10 = ACMP1_P2 (P2.1) pin.
  |        |          |11 = ACMP1_P3 (P3.1) pin.
 */
sfr ACMPCR1 = 0xD3;

/**
  @addtogroup SFR_ACMPCR1_MACRO Bit Macro Functions
  Bit Macro Functions of ACMPCR1
  @{ */

#define set_ACMPCR1_ACMPEN       ACMPCR1 |= 0x01 /*!<Set ACMPCR1.ACMPEN             */
#define set_ACMPCR1_ACMPIE       ACMPCR1 |= 0x02 /*!<Set ACMPCR1.ACMPIE             */
#define set_ACMPCR1_HYSEN        ACMPCR1 |= 0x04 /*!<Set ACMPCR1.HYSEN              */
#define set_ACMPCR1_WKEN         ACMPCR1 |= 0x08 /*!<Set ACMPCR1.WKEN               */



#define clr_ACMPCR1_ACMPEN       ACMPCR1 &=~0x01 /*!<Clear ACMPCR1.ACMPEN           */
#define clr_ACMPCR1_ACMPIE       ACMPCR1 &=~0x02 /*!<Clear ACMPCR1.ACMPIE           */
#define clr_ACMPCR1_HYSEN        ACMPCR1 &=~0x04 /*!<Clear ACMPCR1.HYSEN            */
#define clr_ACMPCR1_WKEN         ACMPCR1 &=~0x08 /*!<Clear ACMPCR1.WKEN             */



/**@}*/ /* end of SFR_ACMPCR1_MACRO group */
/**@}*/ /* end of SFR_ACMPCR1 group */

/**
   @addtogroup SFR_ACMPSR ACMPSR
   Special Function Register ACMPSR
   @{ */

/**
  @var ACMPSR
  Address: D4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMP0IF   |Comparator 0 Interrupt Flag
  |        |          |This bit is set by hardware whenever the comparator 0 output changes
  |        |          |state. This will generate an interrupt if ACMPIE (ACMPCR0[1]) is set
  |        |          |to 1
  |        |          |Note: Write 0 to clear this bit to 0.
  |[1]     |ACMP0O    |Comparator 0 Output
  |        |          |Synchronized to the PCLK to allow reading by software. Cleared when
  |        |          |the comparator 0 is disabled, i.e. ACMPEN (ACMPCR0[0]) is cleared to
  |        |          |0.
  |        |          |Note: This bit is read only.
  |[2]     |ACMP1IF   |Comparator 1 Interrupt Flag
  |        |          |This bit is set by hardware whenever the comparator 1 output changes
  |        |          |state. This will generate an interrupt if ACMPIE (ACMPCR1[1]) is set
  |        |          |to 1
  |        |          |Note: Write 0 to clear this bit to 0.
  |[3]     |ACMP1O    |Comparator 1 Output
  |        |          |Synchronized to the PCLK to allow reading by software. Cleared when
  |        |          |the comparator 1 is disabled, i.e. ACMPEN (ACMPCR1[0]) is cleared to
  |        |          |0.
  |        |          |Note: This bit is read only.
  |[4]     |INT_Test  |ACMP software test interrupt flag
  |[7:5]   |Reserved  |Reserved
 */
sfr ACMPSR = 0xD4;

/**
  @addtogroup SFR_ACMPSR_MACRO Bit Macro Functions
  Bit Macro Functions of ACMPSR
  @{ */

#define set_ACMPSR_ACMP0IF       ACMPSR |= 0x01 /*!<Set ACMPSR.ACMP0IF             */
#define set_ACMPSR_ACMP0O        ACMPSR |= 0x02 /*!<Set ACMPSR.ACMP0O              */
#define set_ACMPSR_ACMP1IF       ACMPSR |= 0x04 /*!<Set ACMPSR.ACMP1IF             */
#define set_ACMPSR_ACMP1O        ACMPSR |= 0x08 /*!<Set ACMPSR.ACMP1O              */
#define set_ACMPSR_INT_Test      ACMPSR |= 0x10 /*!<Set ACMPSR.INT_Test            */

#define clr_ACMPSR_ACMP0IF       ACMPSR &=~0x01 /*!<Clear ACMPSR.ACMP0IF           */
#define clr_ACMPSR_ACMP0O        ACMPSR &=~0x02 /*!<Clear ACMPSR.ACMP0O            */
#define clr_ACMPSR_ACMP1IF       ACMPSR &=~0x04 /*!<Clear ACMPSR.ACMP1IF           */
#define clr_ACMPSR_ACMP1O        ACMPSR &=~0x08 /*!<Clear ACMPSR.ACMP1O            */
#define clr_ACMPSR_INT_Test      ACMPSR &=~0x10 /*!<Clear ACMPSR.INT_Test          */

/**@}*/ /* end of SFR_ACMPSR_MACRO group */
/**@}*/ /* end of SFR_ACMPSR group */

/**
   @addtogroup SFR_ACMPVREF ACMPVREF
   Special Function Register ACMPVREF
   @{ */

/**
  @var ACMPVREF
  Address: D5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |CRV0CTL[2:0]|Comparator 0 Reference Voltage Setting
  |        |          |CRV0 = CRV source voltage * (2/12+CRV0CTL/12).
  |[3]     |Reserved  |Reserved
  |[6:4]   |CRV1CTL[2:0]|Comparator 1 Reference Voltage Setting
  |        |          |CRV1 = CRV source voltage * (2/12+CRV1CTL/12).
  |[7]     |Reserved  |Reserved
 */
sfr ACMPVREF = 0xD5;

/**
  @addtogroup SFR_ACMPVREF_MACRO Bit Macro Functions
  Bit Macro Functions of ACMPVREF
  @{ */







/**@}*/ /* end of SFR_ACMPVREF_MACRO group */
/**@}*/ /* end of SFR_ACMPVREF group */

/**
   @addtogroup SFR_SC0CR0 SC0CR0
   Special Function Register SC0CR0
   @{ */

/**
  @var SC0CR0
  Address: D6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |SCEN      |SC Engine Enable Bit
  |        |          |Set this bit to 1 to enable SC operation. If this bit is cleared, SC
  |        |          |will force all transition to IDLE state
  |        |          |Note: SCEN must be set to 1 before filling in other registers, or
  |        |          |smart card will not work properly.
  |[1]     |RXOFF     |RX Transition Disable Bit
  |        |          |0 = The receiver Enabled.
  |        |          |1 = The receiver Disabled.
  |        |          |Note: If AUTOCEN (SCnCR0[3])is enabled, these fields must be ignored.
  |[2]     |TXOFF     |TX Transition Disable Bit
  |        |          |0 = The transceiver Enabled.
  |        |          |1 = The transceiver Disabled.
  |[3]     |AUTOCEN   |Auto Convention Enable Bit
  |        |          |0 = Auto-convention Disabled.
  |        |          |1 = Auto-convention Enabled. When hardware receives TS in answer to
  |        |          |reset state and the TS is direct convention, CONSEL(SCnCR0[4]) will be
  |        |          |set to 0 automatically, otherwise if the TS is inverse convention, and
  |        |          |CONSEL (SCnCR0[4]) will be set to 1.
  |        |          |Note: If software enables auto convention function, the setting step
  |        |          |must be done before Answer to Reset state and the first data must be
  |        |          |0x3B or 0x3F. After hardware received first data and stored it at
  |        |          |buffer, hardware will decided the convention and change the CONSEL
  |        |          |(SCnCR0[4]) bits automatically.
  |[4]     |CONSEL    |Convention Selection
  |        |          |0 = Direct convention.
  |        |          |1 = Inverse convention.
  |        |          |Note 1: This bit is auto clear to 0, if AUTOCEN(SCnCR0[3]) is writing
  |        |          |1
  |        |          |Note 2: If AUTOCEN(SCnCR0[3]) is enabled, hardware will decide the
  |        |          |convention and change the CONSEL (SCnCR0[4]) bits automatically after
  |        |          |SCEN (SCnCR0[0]) =1.
  |[5]     |RXBGTEN   |Receiver Block Guard Time Function Enable Bit
  |        |          |0 = Receiver block guard time function Disabled.
  |        |          |1 = Receiver block guard time function Enabled.
  |[6]     |T         |T Mode
  |        |          |0 = T0 (ISO7816-3 T = 0 mode).
  |        |          |1 = T1 (ISO7816-3 T = 1 mode).
  |        |          |The T mode controls the BGT (Block Guard Time). Block guard time means
  |        |          |the minimum bit length between the leading edges of two consecutive
  |        |          |characters between different transfer directions. This field indicates
  |        |          |the counter for the bit length of block guard time. According to
  |        |          |ISO7816-3, in T = 0 mode, the software must clear T bit to 0 for real
  |        |          |block guard time = 16.5. In T = 1 mode, the software must set T bit to
  |        |          |1 for real block guard time = 22.5.
  |        |          |Note: In T = 0 mode, the receiver will generate the parity flag on
  |        |          |PEF(SC0TSR[4]), if parity error is detected and also drive the parity
  |        |          |error signal to transceiver. In T = 1 mode, the receiver will generate
  |        |          |the parity flag on PEF(SC0TSR[4]), if parity error detected, but
  |        |          |doesn¡¦t drive the parity error signal to transceiver.
  |        |          |Note: The description please see section 6.10.6.2Error Signal and
  |        |          |Character Repetition
  |[7]     |NSB       |Stop Bit Length
  |        |          |This field indicates the length of stop bit.
  |        |          |0 = The stop bit length is 2 ETU.
  |        |          |1= The stop bit length is 1 ETU.
  |        |          |Note: The default stop bit length is 2. SC and UART adopt NSB to
  |        |          |program the stop bit length.
 */
sfr SC0CR0 = 0xD6;

/**
  @addtogroup SFR_SC0CR0_MACRO Bit Macro Functions
  Bit Macro Functions of SC0CR0
  @{ */

#define set_SC0CR0_SCEN          SC0CR0 |= 0x01 /*!<Set SC0CR0.SCEN                */
#define set_SC0CR0_RXOFF         SC0CR0 |= 0x02 /*!<Set SC0CR0.RXOFF               */
#define set_SC0CR0_TXOFF         SC0CR0 |= 0x04 /*!<Set SC0CR0.TXOFF               */
#define set_SC0CR0_AUTOCEN       SC0CR0 |= 0x08 /*!<Set SC0CR0.AUTOCEN             */
#define set_SC0CR0_CONSEL        SC0CR0 |= 0x10 /*!<Set SC0CR0.CONSEL              */
#define set_SC0CR0_RXBGTEN       SC0CR0 |= 0x20 /*!<Set SC0CR0.RXBGTEN             */
#define set_SC0CR0_T             SC0CR0 |= 0x40 /*!<Set SC0CR0.T                   */
#define set_SC0CR0_NSB           SC0CR0 |= 0x80 /*!<Set SC0CR0.NSB                 */

#define clr_SC0CR0_SCEN          SC0CR0 &=~0x01 /*!<Clear SC0CR0.SCEN              */
#define clr_SC0CR0_RXOFF         SC0CR0 &=~0x02 /*!<Clear SC0CR0.RXOFF             */
#define clr_SC0CR0_TXOFF         SC0CR0 &=~0x04 /*!<Clear SC0CR0.TXOFF             */
#define clr_SC0CR0_AUTOCEN       SC0CR0 &=~0x08 /*!<Clear SC0CR0.AUTOCEN           */
#define clr_SC0CR0_CONSEL        SC0CR0 &=~0x10 /*!<Clear SC0CR0.CONSEL            */
#define clr_SC0CR0_RXBGTEN       SC0CR0 &=~0x20 /*!<Clear SC0CR0.RXBGTEN           */
#define clr_SC0CR0_T             SC0CR0 &=~0x40 /*!<Clear SC0CR0.T                 */
#define clr_SC0CR0_NSB           SC0CR0 &=~0x80 /*!<Clear SC0CR0.NSB               */

/**@}*/ /* end of SFR_SC0CR0_MACRO group */
/**@}*/ /* end of SFR_SC0CR0 group */

/**
   @addtogroup SFR_SC0CR1 SC0CR1
   Special Function Register SC0CR1
   @{ */

/**
  @var SC0CR1
  Address: D7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UARTEN    |UART Mode Enable Bit
  |        |          |0 = Smart Card mode.
  |        |          |1 = UART mode.
  |        |          |Note 1:When operating in UART mode, user must set CONSEL (SCnCR0[4]) =
  |        |          |0 and AUTOCEN(SCnCR0[3]) = 0.
  |        |          |Note 2:When operating in Smart Card mode, user must set UARTEN(SCnCR1
  |        |          |[0]) = 0.
  |        |          |Note 3:When UART is enabled, hardware will generate a reset to reset
  |        |          |FIFO and internal state machine.
  |[1]     |CLKKEEP   |SC Clock Enable Bit
  |        |          |0 = SC clock generation Disabled.
  |        |          |1 = SC clock always keeps free running.
  |[2]     |RXDMAEN   |SC/UART RX DMA Enable
  |        |          |This bit enables the SC/UART RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SC/UART RX operation.
  |        |          |0 = SC/UART RX DMA Disabled
  |        |          |1 = SC/UART RX DMA Enabled
  |[3]     |TXDMAEN   |SC/UART TX DMA Enable
  |        |          |This bit enables the SC/UART TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SC/UART TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |WLS[1:0]  |Word Length Selection
  |        |          |00 = Word length is 8 bits.
  |        |          |01 = Word length is 7 bits.
  |        |          |10 = Word length is 6 bits.
  |        |          |11 = Word length is 5 bits.
  |        |          |Note: In smart card mode, this WLS must be ¡¥00¡¦
  |[6]     |PBOFF     |Parity Bit Disable Control
  |        |          |0 = Parity bit is generated or checked between the last data word bit
  |        |          |and stop bit of the serial data.
  |        |          |1 = Parity bit is not generated (transmitting data) or checked
  |        |          |(receiving data) during transfer.
  |        |          |Note: In smart card mode, this field must be ¡¥0¡¦ (default setting is
  |        |          |with parity bit)
  |[7]     |OPE       |Odd Parity Enable Bit
  |        |          |0 = Even number of logic 1¡¦s are transmitted or check the data word
  |        |          |and parity bits in receiving mode.
  |        |          |1 = Odd number of logic 1¡¦s are transmitted or check the data word and
  |        |          |parity bits in receiving mode.
  |        |          |Note: This bit has effect only when PBOFF bit is ¡¥0¡¦.
 */
sfr SC0CR1 = 0xD7;

/**
  @addtogroup SFR_SC0CR1_MACRO Bit Macro Functions
  Bit Macro Functions of SC0CR1
  @{ */

#define set_SC0CR1_UARTEN        SC0CR1 |= 0x01 /*!<Set SC0CR1.UARTEN              */
#define set_SC0CR1_CLKKEEP       SC0CR1 |= 0x02 /*!<Set SC0CR1.CLKKEEP             */
#define set_SC0CR1_RXDMAEN       SC0CR1 |= 0x04 /*!<Set SC0CR1.RXDMAEN             */
#define set_SC0CR1_TXDMAEN       SC0CR1 |= 0x08 /*!<Set SC0CR1.TXDMAEN             */

#define set_SC0CR1_PBOFF         SC0CR1 |= 0x40 /*!<Set SC0CR1.PBOFF               */
#define set_SC0CR1_OPE           SC0CR1 |= 0x80 /*!<Set SC0CR1.OPE                 */

#define clr_SC0CR1_UARTEN        SC0CR1 &=~0x01 /*!<Clear SC0CR1.UARTEN            */
#define clr_SC0CR1_CLKKEEP       SC0CR1 &=~0x02 /*!<Clear SC0CR1.CLKKEEP           */
#define clr_SC0CR1_RXDMAEN       SC0CR1 &=~0x04 /*!<Clear SC0CR1.RXDMAEN           */
#define clr_SC0CR1_TXDMAEN       SC0CR1 &=~0x08 /*!<Clear SC0CR1.TXDMAEN           */

#define clr_SC0CR1_PBOFF         SC0CR1 &=~0x40 /*!<Clear SC0CR1.PBOFF             */
#define clr_SC0CR1_OPE           SC0CR1 &=~0x80 /*!<Clear SC0CR1.OPE               */

/**@}*/ /* end of SFR_SC0CR1_MACRO group */
/**@}*/ /* end of SFR_SC0CR1 group */

/**
   @addtogroup SFR_P4 P4
   Special Function Register P4
   @{ */

/**
  @var P4
  Address: D8H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
sfr P4 = 0xD8;

/**
  @addtogroup SFR_P4_MACRO Bit Macro Functions
  Bit Macro Functions of P4
  @{ */
sbit P40        = P4^0;
sbit P41        = P4^1;
sbit P42        = P4^2;
sbit P43        = P4^3;
sbit P44        = P4^4;
sbit P45        = P4^5;
sbit P46        = P4^6;
sbit P47        = P4^7;

#define set_P4_7                         P4|=0x80
#define set_P4_6                         P4|=0x40
#define set_P4_5                         P4|=0x20
#define set_P4_4                         P4|=0x10
#define set_P4_3                         P4|=0x08
#define set_P4_2                         P4|=0x04
#define set_P4_1                         P4|=0x02
#define set_P4_0                         P4|=0x01

#define clr_P4_7                         P4&=0x7F
#define clr_P4_6                         P4&=0xBF
#define clr_P4_5                         P4&=0xDF
#define clr_P4_4                         P4&=0xEF
#define clr_P4_3                         P4&=0xF7
#define clr_P4_2                         P4&=0xFB
#define clr_P4_1                         P4&=0xFD
#define clr_P4_0                         P4&=0xFE

/**@}*/ /* end of SFR_P4_MACRO group */
/**@}*/ /* end of SFR_P4 group */

/**
   @addtogroup SFR_SC0DR SC0DR
   Special Function Register SC0DR
   @{ */

/**
  @var SC0DR
  Address: D9H, Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnDR[7:0]|SC / UART Buffer Data
  |        |          |This byte is used for transmitting or receiving data on SC / UART bus.
  |        |          |A write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer.
  |        |          |Note: If SCEN(SCnCR0[0]) is not enabled, SCnDR cannot be programmed.
 */
sfr SC0DR = 0xD9;

/**
  @addtogroup SFR_SC0DR_MACRO Bit Macro Functions
  Bit Macro Functions of SC0DR
  @{ */





/**@}*/ /* end of SFR_SC0DR_MACRO group */
/**@}*/ /* end of SFR_SC0DR group */

/**
   @addtogroup SFR_SC0EGT SC0EGT
   Special Function Register SC0EGT
   @{ */

/**
  @var SC0EGT
  Address: DAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnEGT[7:0]|SC Extra Guard Time
  |        |          |This field indicates the extra guard timer value.
  |        |          |Note:
  |        |          |The counter is ETU base .
 */
sfr SC0EGT = 0xDA;

/**
  @addtogroup SFR_SC0EGT_MACRO Bit Macro Functions
  Bit Macro Functions of SC0EGT
  @{ */





/**@}*/ /* end of SFR_SC0EGT_MACRO group */
/**@}*/ /* end of SFR_SC0EGT group */

/**
   @addtogroup SFR_SC0ETURD0 SC0ETURD0
   Special Function Register SC0ETURD0
   @{ */

/**
  @var SC0ETURD0
  Address: DBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ETURDIV[7:0]|LSB Bits of ETU Rate Divider
  |        |          |The field indicates the LSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR2.
 */
sfr SC0ETURD0 = 0xDB;

/**
  @addtogroup SFR_SC0ETURD0_MACRO Bit Macro Functions
  Bit Macro Functions of SC0ETURD0
  @{ */





/**@}*/ /* end of SFR_SC0ETURD0_MACRO group */
/**@}*/ /* end of SFR_SC0ETURD0 group */

/**
   @addtogroup SFR_SC0ETURD1 SC0ETURD1
   Special Function Register SC0ETURD1
   @{ */

/**
  @var SC0ETURD1
  Address: DCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ETURDIV[11:8]|MSB Bits of ETU Rate Divider
  |        |          |The field indicates the MSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR1 .
  |[6:4]   |SCDIV[2:0]|SC Clock Divider
  |        |          |000 = FSC is FSYS/1.
  |        |          |001 = FSC is FSYS/2.
  |        |          |010 = FSC is FSYS/4.
  |        |          |011 = FSC is FSYS/8. (By default.)
  |        |          |100 = FSC is FSYS/16.
  |        |          |101 = FSC is FSYS/16.
  |        |          |110 = FSC is FSYS/16.
  |        |          |111 = FSC is FSYS/16.
  |        |          |Note: that the FSC clock should be 1Mhz ~ 5Mhz for ISO/IEC 7816-3
  |        |          |standard
  |[7]     |Reserved  |Reserved
 */
sfr SC0ETURD1 = 0xDC;

/**
  @addtogroup SFR_SC0ETURD1_MACRO Bit Macro Functions
  Bit Macro Functions of SC0ETURD1
  @{ */







/**@}*/ /* end of SFR_SC0ETURD1_MACRO group */
/**@}*/ /* end of SFR_SC0ETURD1 group */

/**
   @addtogroup SFR_SC0IE SC0IE
   Special Function Register SC0IE
   @{ */

/**
  @var SC0IE
  Address: DDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */
sfr SC0IE = 0xDD;

/**
  @addtogroup SFR_SC0IE_MACRO Bit Macro Functions
  Bit Macro Functions of SC0IE
  @{ */

#define set_SC0IE_RDAIEN         SC0IE |= 0x01 /*!<Set SC0IE.RDAIEN               */
#define set_SC0IE_TBEIEN         SC0IE |= 0x02 /*!<Set SC0IE.TBEIEN               */
#define set_SC0IE_TERRIEN        SC0IE |= 0x04 /*!<Set SC0IE.TERRIEN              */
#define set_SC0IE_BGTIEN         SC0IE |= 0x08 /*!<Set SC0IE.BGTIEN               */
#define set_SC0IE_ACERRIEN       SC0IE |= 0x10 /*!<Set SC0IE.ACERRIEN             */

#define clr_SC0IE_RDAIEN         SC0IE &=~0x01 /*!<Clear SC0IE.RDAIEN             */
#define clr_SC0IE_TBEIEN         SC0IE &=~0x02 /*!<Clear SC0IE.TBEIEN             */
#define clr_SC0IE_TERRIEN        SC0IE &=~0x04 /*!<Clear SC0IE.TERRIEN            */
#define clr_SC0IE_BGTIEN         SC0IE &=~0x08 /*!<Clear SC0IE.BGTIEN             */
#define clr_SC0IE_ACERRIEN       SC0IE &=~0x10 /*!<Clear SC0IE.ACERRIEN           */

/**@}*/ /* end of SFR_SC0IE_MACRO group */
/**@}*/ /* end of SFR_SC0IE group */

/**
   @addtogroup SFR_SC0IE SC0IE
   Special Function Register SC0IE
   @{ */

/**
  @var SC0IE
  Address: DDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_SC0IE_MACRO Bit Macro Functions
  Bit Macro Functions of SC0IE
  @{ */

#define set_SC0IE_RDAIEN         SC0IE |= 0x01 /*!<Set SC0IE.RDAIEN               */
#define set_SC0IE_TBEIEN         SC0IE |= 0x02 /*!<Set SC0IE.TBEIEN               */
#define set_SC0IE_TERRIEN        SC0IE |= 0x04 /*!<Set SC0IE.TERRIEN              */
#define set_SC0IE_BGTIEN         SC0IE |= 0x08 /*!<Set SC0IE.BGTIEN               */
#define set_SC0IE_ACERRIEN       SC0IE |= 0x10 /*!<Set SC0IE.ACERRIEN             */

#define clr_SC0IE_RDAIEN         SC0IE &=~0x01 /*!<Clear SC0IE.RDAIEN             */
#define clr_SC0IE_TBEIEN         SC0IE &=~0x02 /*!<Clear SC0IE.TBEIEN             */
#define clr_SC0IE_TERRIEN        SC0IE &=~0x04 /*!<Clear SC0IE.TERRIEN            */
#define clr_SC0IE_BGTIEN         SC0IE &=~0x08 /*!<Clear SC0IE.BGTIEN             */
#define clr_SC0IE_ACERRIEN       SC0IE &=~0x10 /*!<Clear SC0IE.ACERRIEN           */

/**@}*/ /* end of SFR_SC0IE_MACRO group */
/**@}*/ /* end of SFR_SC0IE group */

/**
   @addtogroup SFR_SC0IS SC0IS
   Special Function Register SC0IS
   @{ */

/**
  @var SC0IS
  Address: DEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIF     |Receive Data Reach Interrupt Status Flag (Read Only)
  |        |          |This field is used for received data interrupt status flag.
  |        |          |Note: This field is the status flag of received data. If software
  |        |          |reads data from SC_DAT pin, this bit will be cleared automatically.
  |[1]     |TBEIF     |Transmit Buffer Empty Interrupt Status Flag (Read Only)
  |        |          |This field is used for transmit buffer empty interrupt status flag.
  |        |          |Note: This field is the status flag of transmit buffer empty state. If
  |        |          |software wants to clear this bit, software must write data to
  |        |          |DAT(SCnDR[7:0]) buffer and then this bit will be cleared
  |        |          |automatically.
  |[2]     |TERRIF    |Transfer Error Interrupt Status Flag (Read Only)
  |        |          |This field is used for transfer error interrupt status flag. The
  |        |          |transfer error states is at SC0TSR register which includes receiver
  |        |          |break error BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]) and receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |Note: This field is the status flag of BEF(SC0TSR[6]), FEF(SC0TSR[5]),
  |        |          |PEF(SC0TSR[4]), RXOV(SC0TSR[0]) and TXOV(SC0TSR[2]). So, if software
  |        |          |wants to clear this bit, software must write 0 to each field.
  |[3]     |BGTIF     |Block Guard Time Interrupt Status Flag (Read Only)
  |        |          |This field is used for block guard time interrupt status flag.
  |        |          |Note 1: This bit is valid when RXBGTEN (SCnCR0[5]) is enabled.
  |        |          |Note 2: This bit is read only, but it can be cleared by writing 0 to
  |        |          |it.
  |[4]     |ACERRIF   |Auto Convention Error Interrupt Status Flag (Read Only)
  |        |          |This field indicates auto convention sequence error. If the received
  |        |          |TS at ATR state is neither 0x3B nor 0x3F, this bit will be set.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |Tx_Er     |TX transmit error flag
  |[6]     |SIF1      |software interrupt for test
  |[7]     |loop_test |loop test interrupt flag for software test
 */
sfr SC0IS = 0xDE;

/**
  @addtogroup SFR_SC0IS_MACRO Bit Macro Functions
  Bit Macro Functions of SC0IS
  @{ */

#define set_SC0IS_RDAIF          SC0IS |= 0x01 /*!<Set SC0IS.RDAIF                */
#define set_SC0IS_TBEIF          SC0IS |= 0x02 /*!<Set SC0IS.TBEIF                */
#define set_SC0IS_TERRIF         SC0IS |= 0x04 /*!<Set SC0IS.TERRIF               */
#define set_SC0IS_BGTIF          SC0IS |= 0x08 /*!<Set SC0IS.BGTIF                */
#define set_SC0IS_ACERRIF        SC0IS |= 0x10 /*!<Set SC0IS.ACERRIF              */
#define set_SC0IS_Tx_Er          SC0IS |= 0x20 /*!<Set SC0IS.Tx_Er                */
#define set_SC0IS_SIF1           SC0IS |= 0x40 /*!<Set SC0IS.SIF1                 */
#define set_SC0IS_loop_test      SC0IS |= 0x80 /*!<Set SC0IS.loop_test            */

#define clr_SC0IS_RDAIF          SC0IS &=~0x01 /*!<Clear SC0IS.RDAIF              */
#define clr_SC0IS_TBEIF          SC0IS &=~0x02 /*!<Clear SC0IS.TBEIF              */
#define clr_SC0IS_TERRIF         SC0IS &=~0x04 /*!<Clear SC0IS.TERRIF             */
#define clr_SC0IS_BGTIF          SC0IS &=~0x08 /*!<Clear SC0IS.BGTIF              */
#define clr_SC0IS_ACERRIF        SC0IS &=~0x10 /*!<Clear SC0IS.ACERRIF            */
#define clr_SC0IS_Tx_Er          SC0IS &=~0x20 /*!<Clear SC0IS.Tx_Er              */
#define clr_SC0IS_SIF1           SC0IS &=~0x40 /*!<Clear SC0IS.SIF1               */
#define clr_SC0IS_loop_test      SC0IS &=~0x80 /*!<Clear SC0IS.loop_test          */

/**@}*/ /* end of SFR_SC0IS_MACRO group */
/**@}*/ /* end of SFR_SC0IS group */

/**
   @addtogroup SFR_SC0TSR SC0TSR
   Special Function Register SC0TSR
   @{ */

/**
  @var SC0TSR
  Address: DFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RXOV      |RX Overflow Error Status Flag (Read Only)
  |        |          |This bit is set when RX buffer overflow.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[1]     |RXEMPTY   |Receiver Buffer Empty Status Flag(Read Only)
  |        |          |This bit indicates RX buffer empty or not.
  |        |          |Note: When Rx buffer has been read by CPU, hardware sets this bit
  |        |          |high. It will be cleared when SC receives any new data.
  |[2]     |TXOV      |TX Overflow Error Interrupt Status Flag (Read Only)
  |        |          |If TX buffer is full, an additional write to DAT(SCnDR[7:0]) will
  |        |          |cause this bit be set to 1 by hardware.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[3]     |TXEMPTY   |Transmit Buffer Empty Status Flag (Read Only)
  |        |          |This bit indicates TX buffer empty or not.
  |        |          |Note: When TX buffer has been transferred to Transmitter Shift
  |        |          |Register, hardware sets this bit high. It will be cleared when writing
  |        |          |data into DAT(SCnDR[7:0]) (TX buffer not empty).
  |[4]     |PEF       |Receiver Parity Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid
  |        |          |parity bit.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |FEF       |Receiver Frame Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid stop bit (that is, the stop bit following the last data
  |        |          |bit or parity bit is detected as logic 0).
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[6]     |BEF       |Receiver Break Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received data input (RX) held
  |        |          |in the spacing state (logic 0) is longer than a full word transmission
  |        |          |time (that is, the total time of start bit + data bits + parity + stop
  |        |          |bits). .
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[7]     |ACT       |Transmit /Receive in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when TX/RX transfer is finished
  |        |          |1 = This bit is set by hardware when TX/RX transfer is in active.
 */
sfr SC0TSR = 0xDF;

/**
  @addtogroup SFR_SC0TSR_MACRO Bit Macro Functions
  Bit Macro Functions of SC0TSR
  @{ */

#define set_SC0TSR_RXOV          SC0TSR |= 0x01 /*!<Set SC0TSR.RXOV                */
#define set_SC0TSR_RXEMPTY       SC0TSR |= 0x02 /*!<Set SC0TSR.RXEMPTY             */
#define set_SC0TSR_TXOV          SC0TSR |= 0x04 /*!<Set SC0TSR.TXOV                */
#define set_SC0TSR_TXEMPTY       SC0TSR |= 0x08 /*!<Set SC0TSR.TXEMPTY             */
#define set_SC0TSR_PEF           SC0TSR |= 0x10 /*!<Set SC0TSR.PEF                 */
#define set_SC0TSR_FEF           SC0TSR |= 0x20 /*!<Set SC0TSR.FEF                 */
#define set_SC0TSR_BEF           SC0TSR |= 0x40 /*!<Set SC0TSR.BEF                 */
#define set_SC0TSR_ACT           SC0TSR |= 0x80 /*!<Set SC0TSR.ACT                 */

#define clr_SC0TSR_RXOV          SC0TSR &=~0x01 /*!<Clear SC0TSR.RXOV              */
#define clr_SC0TSR_RXEMPTY       SC0TSR &=~0x02 /*!<Clear SC0TSR.RXEMPTY           */
#define clr_SC0TSR_TXOV          SC0TSR &=~0x04 /*!<Clear SC0TSR.TXOV              */
#define clr_SC0TSR_TXEMPTY       SC0TSR &=~0x08 /*!<Clear SC0TSR.TXEMPTY           */
#define clr_SC0TSR_PEF           SC0TSR &=~0x10 /*!<Clear SC0TSR.PEF               */
#define clr_SC0TSR_FEF           SC0TSR &=~0x20 /*!<Clear SC0TSR.FEF               */
#define clr_SC0TSR_BEF           SC0TSR &=~0x40 /*!<Clear SC0TSR.BEF               */
#define clr_SC0TSR_ACT           SC0TSR &=~0x80 /*!<Clear SC0TSR.ACT               */

/**@}*/ /* end of SFR_SC0TSR_MACRO group */
/**@}*/ /* end of SFR_SC0TSR group */

/**
   @addtogroup SFR_ADCCON1 ADCCON1
   Special Function Register ADCCON1
   @{ */

/**
  @var ADCCON1
  Address: E1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ADCEN     |ADC Enable
  |        |          |0 = ADC circuit off.
  |        |          |1 = ADC circuit on.
  |[1]     |ADCEX     |ADC External Conversion Trigger Select
  |        |          |This bit to select the methods of triggering an A/D conversion.
  |        |          |0 = A/D conversion is started only via setting ADCS bit.
  |        |          |1 = A/D conversion is started via setting ADCS bit or by external
  |        |          |trigger source depending on ETGSEL[1:0] and ETGTYP[1:0]. Note that
  |        |          |while ADCS is 1 (busy in converting), the ADC will ignore the
  |        |          |following external trigger until ADCS is hardware cleared.
  |[3:2]   |ETGTYP[1:0]|External Trigger Type Select
  |        |          |When ADCEX (ADCCON1.1) is set, these bits select which condition
  |        |          |triggers ADC conversion.
  |        |          |00 = Falling edge on PWM0/2/4 or STADC pin.
  |        |          |01 = Rising edge on PWM0/2/4 or STADC pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the period point interrupt is
  |        |          |only available for PWM center-aligned type.
  |[4]     |CONT      |ADC Continue Sampling Select
  |        |          |0 = ADC single sampling, ADC interrupt is set while an A/D conversion
  |        |          |is completed
  |        |          |1 = ADC continue sampling. ADC interrupt is set while total A/D
  |        |          |conversions are completed
  |[5]     |HIE       |ADC Half Done Interrupt Enable
  |        |          |0 = ADC interrupt is not set while half of A/D conversions are
  |        |          |complete in continue mode
  |        |          |1 = ADC interrupt is set while half of A/D conversions are complete in
  |        |          |continue mode
  |[7:6]   |Reserved  |Reserved
 */
sfr ADCCON1 = 0xE1;

/**
  @addtogroup SFR_ADCCON1_MACRO Bit Macro Functions
  Bit Macro Functions of ADCCON1
  @{ */

#define set_ADCCON1_ADCEN        ADCCON1 |= 0x01 /*!<Set ADCCON1.ADCEN              */
#define set_ADCCON1_ADCEX        ADCCON1 |= 0x02 /*!<Set ADCCON1.ADCEX              */

#define set_ADCCON1_CONT         ADCCON1 |= 0x10 /*!<Set ADCCON1.CONT               */
#define set_ADCCON1_HIE          ADCCON1 |= 0x20 /*!<Set ADCCON1.HIE                */

#define clr_ADCCON1_ADCEN        ADCCON1 &=~0x01 /*!<Clear ADCCON1.ADCEN            */
#define clr_ADCCON1_ADCEX        ADCCON1 &=~0x02 /*!<Clear ADCCON1.ADCEX            */

#define clr_ADCCON1_CONT         ADCCON1 &=~0x10 /*!<Clear ADCCON1.CONT             */
#define clr_ADCCON1_HIE          ADCCON1 &=~0x20 /*!<Clear ADCCON1.HIE              */

/**@}*/ /* end of SFR_ADCCON1_MACRO group */
/**@}*/ /* end of SFR_ADCCON1 group */

/**
   @addtogroup SFR_ADCCON2 ADCCON2
   Special Function Register ADCCON2
   @{ */

/**
  @var ADCCON2
  Address: E2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ADCDLY.8  |ADC External Trigger Delay Counter Bit 8
  |        |          |See ADCDLY register.
  |[3:1]   |ADCAQT[2:0]|ADC Acquisition Time
  |        |          |This 3-bit field decides the acquisition time for ADC sampling,
  |        |          |following by equation below:
  |        |          |ADC acquisition time =.
  |        |          |The default and minimum acquisition time is 10 ADC clock cycles. Note
  |        |          |that this field should not be changed when ADC is in converting.
  |[4]     |ADCMPO    |ADC Comparator Output Value
  |        |          |This bit is the output value of ADC result comparator based on the
  |        |          |setting of ACMPOP. This bit updates after every A/D conversion
  |        |          |complete.
  |[5]     |ADCMPEN   |ADC Result Comparator Enable.
  |        |          |ADC result comparator to trig ADCF enable bit. Only when comparator
  |        |          |value match the condition of ADC compare value defined ADCF will be
  |        |          |set to 1. This condition base on ADCMPH, ADCMPL and ADCMPOP register
  |        |          |define.
  |        |          |The ADCF register changes to 1 only when ADC comparing result matches
  |        |          |the condition and then enters interrupt vector if ADC interrupt is
  |        |          |enabled.
  |        |          |0 = ADC result comparator trig ADCF Disabled.
  |        |          |1 = ADC result comparator trig ADCF Enabled.
  |        |          |Note: After this bit is enabled and ADC start is triggered, the ADC
  |        |          |keeps converting. The register ADCRH and ADCRL value will change based
  |        |          |on the result of ADC setting and can also be read out from the
  |        |          |register. This process only stops after ADCF is set to 1
  |[6]     |ADCMPOP   |ADC Comparator Output Polarity
  |        |          |0 = ADCMPO is 1 if ADCR[11:0] is greater than or equal to ADCMP[11:0].
  |        |          |1 = ADCMPO is 1 if ADCR[11:0] is less than ADCMP[11:0].
  |[7]     |ADFBEN    |ADC Compare Result Asserting Fault Brake Enable
  |        |          |0 = ADC asserting Fault Brake Disabled.
  |        |          |1 = ADC asserting Fault Brake Enabled. Fault Brake is asserted once
  |        |          |its compare result ADCMPO is 1. Meanwhile, PWM channels output Fault
  |        |          |Brake data. PWMRUN (PWMnCON0.7) will also be automatically cleared by
  |        |          |hardware. The PWM output resumes when PWMRUN is set again.
 */
sfr ADCCON2 = 0xE2;

/**
  @addtogroup SFR_ADCCON2_MACRO Bit Macro Functions
  Bit Macro Functions of ADCCON2
  @{ */

#define set_ADCCON2_ADCDLY.8     ADCCON2 |= 0x01 /*!<Set ADCCON2.ADCDLY.8           */

#define set_ADCCON2_ADCMPO       ADCCON2 |= 0x10 /*!<Set ADCCON2.ADCMPO             */
#define set_ADCCON2_ADCMPEN      ADCCON2 |= 0x20 /*!<Set ADCCON2.ADCMPEN            */
#define set_ADCCON2_ADCMPOP      ADCCON2 |= 0x40 /*!<Set ADCCON2.ADCMPOP            */
#define set_ADCCON2_ADFBEN       ADCCON2 |= 0x80 /*!<Set ADCCON2.ADFBEN             */

#define clr_ADCCON2_ADCDLY.8     ADCCON2 &=~0x01 /*!<Clear ADCCON2.ADCDLY.8         */

#define clr_ADCCON2_ADCMPO       ADCCON2 &=~0x10 /*!<Clear ADCCON2.ADCMPO           */
#define clr_ADCCON2_ADCMPEN      ADCCON2 &=~0x20 /*!<Clear ADCCON2.ADCMPEN          */
#define clr_ADCCON2_ADCMPOP      ADCCON2 &=~0x40 /*!<Clear ADCCON2.ADCMPOP          */
#define clr_ADCCON2_ADFBEN       ADCCON2 &=~0x80 /*!<Clear ADCCON2.ADFBEN           */

/**@}*/ /* end of SFR_ADCCON2_MACRO group */
/**@}*/ /* end of SFR_ADCCON2 group */

/**
   @addtogroup SFR_ADCDLY ADCDLY
   Special Function Register ADCDLY
   @{ */

/**
  @var ADCDLY
  Address: E3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCDLY[7:0]|ADC External Trigger Delay Counter Low Byte
  |        |          |This 8-bit field combined with ADCCON2.0 forms a 9-bit counter. This
  |        |          |counter inserts a delay after detecting the external trigger. An A/D
  |        |          |converting starts after this period of delay.
  |        |          |External trigger delay time = .
  |        |          |Note that this field is valid only when ADCEX (ADCCON1.1) is set. User
  |        |          |should not modify ADCDLY during PWM run time if selecting PWM output
  |        |          |as the external ADC trigger source.
 */
sfr ADCDLY = 0xE3;

/**
  @addtogroup SFR_ADCDLY_MACRO Bit Macro Functions
  Bit Macro Functions of ADCDLY
  @{ */





/**@}*/ /* end of SFR_ADCDLY_MACRO group */
/**@}*/ /* end of SFR_ADCDLY group */

/**
   @addtogroup SFR_ADCBAH ADCBAH
   Special Function Register ADCBAH
   @{ */

/**
  @var ADCBAH
  Address: E4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCBA[3:0]|ADC RAM Base Address (High Byte)
  |        |          |The most significant 4 bits of RAM base address to store ADC continue
  |        |          |sampling data.
  |        |          |RAM base address ADCBA[11:0] = {ADCBAH[3:0], ADCBAL[7:0]}
  |[7:4]   |Reserved  |Reserved
 */
sfr ADCBAH = 0xE4;

/**
  @addtogroup SFR_ADCBAH_MACRO Bit Macro Functions
  Bit Macro Functions of ADCBAH
  @{ */





/**@}*/ /* end of SFR_ADCBAH_MACRO group */
/**@}*/ /* end of SFR_ADCBAH group */

/**
   @addtogroup SFR_ADCSN ADCSN
   Special Function Register ADCSN
   @{ */

/**
  @var ADCSN
  Address: E5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCSN[7:0]|ADC Sampling Number
  |        |          |The total sampling numbers for ADC continue sampling select.
  |        |          |Total sampling number= ADCSN[7:0] + 1
 */
sfr ADCSN = 0xE5;

/**
  @addtogroup SFR_ADCSN_MACRO Bit Macro Functions
  Bit Macro Functions of ADCSN
  @{ */





/**@}*/ /* end of SFR_ADCSN_MACRO group */
/**@}*/ /* end of SFR_ADCSN group */

/**
   @addtogroup SFR_ADCCN ADCCN
   Special Function Register ADCCN
   @{ */

/**
  @var ADCCN
  Address: E6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCCN[7:0]|ADC Current Sampling Number
  |        |          |The current sampling numbers for ADC continue sampling select.
  |        |          |The current sampling number= ADCCN[7:0] + 1
 */
sfr ADCCN = 0xE6;

/**
  @addtogroup SFR_ADCCN_MACRO Bit Macro Functions
  Bit Macro Functions of ADCCN
  @{ */





/**@}*/ /* end of SFR_ADCCN_MACRO group */
/**@}*/ /* end of SFR_ADCCN group */

/**
   @addtogroup SFR_ADCSR ADCSR
   Special Function Register ADCSR
   @{ */

/**
  @var ADCSR
  Address: E7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |A/D Conversion Full Done Flag
  |        |          |This bit is set by hardware when all of ADCSN A/D conversions are
  |        |          |complete in continue mode or single conversion in single mode.
  |        |          |Note: This bit can be cleared by writing 0 to it..
  |[1]     |HDONE     |A/D Conversion Half Done Flag
  |        |          |This bit is set by hardware when half of ADCSN A/D conversions are
  |        |          |complete in continue mode.
  |        |          |Note: This bit can be cleared by writing 0 to it
  |[2]     |CMPHIT    |ADC Comparator Hit Flag
  |        |          |This bit is set by hardware when ADCMPO (ADCCON2.4) flag rising
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[3]     |Reserved  |Reserved
  |[6:4]   |ADCDIV[2:0]|ADC Clock Divider
  |        |          |000 = FADC is FSYS/1.
  |        |          |001 = FADC is FSYS/2.
  |        |          |010 = FADC is FSYS/4.
  |        |          |011 = FADC is FSYS/8.
  |        |          |100 = FADC is FSYS/16.
  |        |          |101 = FADC is FSYS/32.
  |        |          |110 = FADC is FSYS/64.
  |        |          |111 = FADC is FSYS/128.
  |[7]     |SLOW      |ADC Slow Speed Selection
  |        |          |This bit is used to select ADC low speed.
  |        |          |0 = high speed 500 ksps
  |        |          |1 = low speed 200 ksps
 */
sfr ADCSR = 0xE7;

/**
  @addtogroup SFR_ADCSR_MACRO Bit Macro Functions
  Bit Macro Functions of ADCSR
  @{ */

#define set_ADCSR_FDONE          ADCSR |= 0x01 /*!<Set ADCSR.FDONE                */
#define set_ADCSR_HDONE          ADCSR |= 0x02 /*!<Set ADCSR.HDONE                */
#define set_ADCSR_CMPHIT         ADCSR |= 0x04 /*!<Set ADCSR.CMPHIT               */

#define set_ADCSR_SLOW           ADCSR |= 0x80 /*!<Set ADCSR.SLOW                 */

#define clr_ADCSR_FDONE          ADCSR &=~0x01 /*!<Clear ADCSR.FDONE              */
#define clr_ADCSR_HDONE          ADCSR &=~0x02 /*!<Clear ADCSR.HDONE              */
#define clr_ADCSR_CMPHIT         ADCSR &=~0x04 /*!<Clear ADCSR.CMPHIT             */

#define clr_ADCSR_SLOW           ADCSR &=~0x80 /*!<Clear ADCSR.SLOW               */

/**@}*/ /* end of SFR_ADCSR_MACRO group */
/**@}*/ /* end of SFR_ADCSR group */

/**
   @addtogroup SFR_I2C1CON I2C1CON
   Special Function Register I2C1CON
   @{ */

/**
  @var I2C1CON
  Address: E8H, All pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */
sfr I2C1CON = 0xE8;

/**
  @addtogroup SFR_I2C1CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1CON
  @{ */
sbit I2CEN1      = I2C1CON^6;
sbit STA1        = I2C1CON^5;
sbit STO1        = I2C1CON^4;
sbit SI1         = I2C1CON^3;
sbit AA1         = I2C1CON^2;
sbit I2CPX1      = I2C1CON^0;

#define set_I2C1CON_AA           I2C1CON |= 0x04 /*!<Set I2C1CON.AA                 */
#define set_I2C1CON_SI           I2C1CON |= 0x08 /*!<Set I2C1CON.SI                 */
#define set_I2C1CON_STO          I2C1CON |= 0x10 /*!<Set I2C1CON.STO                */
#define set_I2C1CON_STA          I2C1CON |= 0x20 /*!<Set I2C1CON.STA                */
#define set_I2C1CON_I2CEN        I2C1CON |= 0x40 /*!<Set I2C1CON.I2CEN              */
#define set_I2C1CON_I            I2C1CON |= 0x80 /*!<Set I2C1CON.I                  */

#define clr_I2C1CON_AA           I2C1CON &=~0x04 /*!<Clear I2C1CON.AA               */
#define clr_I2C1CON_SI           I2C1CON &=~0x08 /*!<Clear I2C1CON.SI               */
#define clr_I2C1CON_STO          I2C1CON &=~0x10 /*!<Clear I2C1CON.STO              */
#define clr_I2C1CON_STA          I2C1CON &=~0x20 /*!<Clear I2C1CON.STA              */
#define clr_I2C1CON_I2CEN        I2C1CON &=~0x40 /*!<Clear I2C1CON.I2CEN            */
#define clr_I2C1CON_I            I2C1CON &=~0x80 /*!<Clear I2C1CON.I                */

/**@}*/ /* end of SFR_I2C1CON_MACRO group */
/**@}*/ /* end of SFR_I2C1CON group */

/**
   @addtogroup SFR_DMA0TSR DMA0TSR
   Special Function Register DMA0TSR
   @{ */

/**
  @var DMA0TSR
  Address: E9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */
sfr DMA0TSR = 0xE9;

/**
  @addtogroup SFR_DMA0TSR_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0TSR
  @{ */

#define set_DMA0TSR_FDONE        DMA0TSR |= 0x01 /*!<Set DMA0TSR.FDONE              */
#define set_DMA0TSR_HDONE        DMA0TSR |= 0x02 /*!<Set DMA0TSR.HDONE              */
#define set_DMA0TSR_ACT          DMA0TSR |= 0x04 /*!<Set DMA0TSR.ACT                */
#define set_DMA0TSR_INT_Test     DMA0TSR |= 0x08 /*!<Set DMA0TSR.INT_Test           */

#define clr_DMA0TSR_FDONE        DMA0TSR &=~0x01 /*!<Clear DMA0TSR.FDONE            */
#define clr_DMA0TSR_HDONE        DMA0TSR &=~0x02 /*!<Clear DMA0TSR.HDONE            */
#define clr_DMA0TSR_ACT          DMA0TSR &=~0x04 /*!<Clear DMA0TSR.ACT              */
#define clr_DMA0TSR_INT_Test     DMA0TSR &=~0x08 /*!<Clear DMA0TSR.INT_Test         */

/**@}*/ /* end of SFR_DMA0TSR_MACRO group */
/**@}*/ /* end of SFR_DMA0TSR group */

/**
   @addtogroup SFR_MTM0DA MTM0DA
   Special Function Register MTM0DA
   @{ */

/**
  @var MTM0DA
  Address: EAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */
sfr MTM0DA = 0xEA;

/**
  @addtogroup SFR_MTM0DA_MACRO Bit Macro Functions
  Bit Macro Functions of MTM0DA
  @{ */





/**@}*/ /* end of SFR_MTM0DA_MACRO group */
/**@}*/ /* end of SFR_MTM0DA group */

/**
   @addtogroup SFR_DMA1CR0 DMA1CR0
   Special Function Register DMA1CR0
   @{ */

/**
  @var DMA1CR0
  Address: EBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */
sfr DMA1CR0 = 0xEB;

/**
  @addtogroup SFR_DMA1CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CR0
  @{ */

#define set_DMA1CR0_EN           DMA1CR0 |= 0x01 /*!<Set DMA1CR0.EN                 */
#define set_DMA1CR0_RUN          DMA1CR0 |= 0x02 /*!<Set DMA1CR0.RUN                */
#define set_DMA1CR0_FIE          DMA1CR0 |= 0x04 /*!<Set DMA1CR0.FIE                */
#define set_DMA1CR0_HIE          DMA1CR0 |= 0x08 /*!<Set DMA1CR0.HIE                */


#define clr_DMA1CR0_EN           DMA1CR0 &=~0x01 /*!<Clear DMA1CR0.EN               */
#define clr_DMA1CR0_RUN          DMA1CR0 &=~0x02 /*!<Clear DMA1CR0.RUN              */
#define clr_DMA1CR0_FIE          DMA1CR0 &=~0x04 /*!<Clear DMA1CR0.FIE              */
#define clr_DMA1CR0_HIE          DMA1CR0 &=~0x08 /*!<Clear DMA1CR0.HIE              */


/**@}*/ /* end of SFR_DMA1CR0_MACRO group */
/**@}*/ /* end of SFR_DMA1CR0 group */

/**
   @addtogroup SFR_DMA1CR0 DMA1CR0
   Special Function Register DMA1CR0
   @{ */

/**
  @var DMA1CR0
  Address: EBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA1CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CR0
  @{ */

#define set_DMA1CR0_EN           DMA1CR0 |= 0x01 /*!<Set DMA1CR0.EN                 */
#define set_DMA1CR0_RUN          DMA1CR0 |= 0x02 /*!<Set DMA1CR0.RUN                */
#define set_DMA1CR0_FIE          DMA1CR0 |= 0x04 /*!<Set DMA1CR0.FIE                */
#define set_DMA1CR0_HIE          DMA1CR0 |= 0x08 /*!<Set DMA1CR0.HIE                */


#define clr_DMA1CR0_EN           DMA1CR0 &=~0x01 /*!<Clear DMA1CR0.EN               */
#define clr_DMA1CR0_RUN          DMA1CR0 &=~0x02 /*!<Clear DMA1CR0.RUN              */
#define clr_DMA1CR0_FIE          DMA1CR0 &=~0x04 /*!<Clear DMA1CR0.FIE              */
#define clr_DMA1CR0_HIE          DMA1CR0 &=~0x08 /*!<Clear DMA1CR0.HIE              */


/**@}*/ /* end of SFR_DMA1CR0_MACRO group */
/**@}*/ /* end of SFR_DMA1CR0 group */

/**
   @addtogroup SFR_DMA1MAL DMA1MAL
   Special Function Register DMA1MAL
   @{ */

/**
  @var DMA1MAL
  Address: ECH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */
sfr DMA1MAL = 0xEC;

/**
  @addtogroup SFR_DMA1MAL_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1MAL
  @{ */





/**@}*/ /* end of SFR_DMA1MAL_MACRO group */
/**@}*/ /* end of SFR_DMA1MAL group */

/**
   @addtogroup SFR_DMA1CNT DMA1CNT
   Special Function Register DMA1CNT
   @{ */

/**
  @var DMA1CNT
  Address: EDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */
sfr DMA1CNT = 0xED;

/**
  @addtogroup SFR_DMA1CNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CNT
  @{ */





/**@}*/ /* end of SFR_DMA1CNT_MACRO group */
/**@}*/ /* end of SFR_DMA1CNT group */

/**
   @addtogroup SFR_DMA1CCNT DMA1CCNT
   Special Function Register DMA1CCNT
   @{ */

/**
  @var DMA1CCNT
  Address: EEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */
sfr DMA1CCNT = 0xEE;

/**
  @addtogroup SFR_DMA1CCNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CCNT
  @{ */





/**@}*/ /* end of SFR_DMA1CCNT_MACRO group */
/**@}*/ /* end of SFR_DMA1CCNT group */

/**
   @addtogroup SFR_EIP0 EIP0
   Special Function Register EIP0
   @{ */

/**
  @var EIP0
  Address: EFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PI2C0     |I2C interrupt priority low bit
  |[1]     |PPI       |Pin interrupt priority low bit
  |[2]     |PCAP      |Input capture interrupt priority low bit
  |[3]     |PPWM0     |PWM interrupt priority low bit
  |[4]     |PWDT      |WDT interrupt priority low bit
  |[5]     |PFB       |Fault Brake interrupt priority low bit
  |[6]     |PSPI0     |SPI0 interrupt priority low bit
  |[7]     |PT2       |Timer 2 interrupt priority low bit
 */
sfr EIP0 = 0xEF;

/**
  @addtogroup SFR_EIP0_MACRO Bit Macro Functions
  Bit Macro Functions of EIP0
  @{ */

#define set_EIP0_PI2C0           EIP0 |= 0x01 /*!<Set EIP0.PI2C0                 */
#define set_EIP0_PPI             EIP0 |= 0x02 /*!<Set EIP0.PPI                   */
#define set_EIP0_PCAP            EIP0 |= 0x04 /*!<Set EIP0.PCAP                  */
#define set_EIP0_PPWM0           EIP0 |= 0x08 /*!<Set EIP0.PPWM0                 */
#define set_EIP0_PWDT            EIP0 |= 0x10 /*!<Set EIP0.PWDT                  */
#define set_EIP0_PFB             EIP0 |= 0x20 /*!<Set EIP0.PFB                   */
#define set_EIP0_PSPI0           EIP0 |= 0x40 /*!<Set EIP0.PSPI0                 */
#define set_EIP0_PT2             EIP0 |= 0x80 /*!<Set EIP0.PT2                   */

#define clr_EIP0_PI2C0           EIP0 &=~0x01 /*!<Clear EIP0.PI2C0               */
#define clr_EIP0_PPI             EIP0 &=~0x02 /*!<Clear EIP0.PPI                 */
#define clr_EIP0_PCAP            EIP0 &=~0x04 /*!<Clear EIP0.PCAP                */
#define clr_EIP0_PPWM0           EIP0 &=~0x08 /*!<Clear EIP0.PPWM0               */
#define clr_EIP0_PWDT            EIP0 &=~0x10 /*!<Clear EIP0.PWDT                */
#define clr_EIP0_PFB             EIP0 &=~0x20 /*!<Clear EIP0.PFB                 */
#define clr_EIP0_PSPI0           EIP0 &=~0x40 /*!<Clear EIP0.PSPI0               */
#define clr_EIP0_PT2             EIP0 &=~0x80 /*!<Clear EIP0.PT2                 */

/**@}*/ /* end of SFR_EIP0_MACRO group */
/**@}*/ /* end of SFR_EIP0 group */

/**
   @addtogroup SFR_DMA1TSR DMA1TSR
   Special Function Register DMA1TSR
   @{ */

/**
  @var DMA1TSR
  Address: F1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */
sfr DMA1TSR = 0xF1;

/**
  @addtogroup SFR_DMA1TSR_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1TSR
  @{ */

#define set_DMA1TSR_FDONE        DMA1TSR |= 0x01 /*!<Set DMA1TSR.FDONE              */
#define set_DMA1TSR_HDONE        DMA1TSR |= 0x02 /*!<Set DMA1TSR.HDONE              */
#define set_DMA1TSR_ACT          DMA1TSR |= 0x04 /*!<Set DMA1TSR.ACT                */
#define set_DMA1TSR_INT_Test     DMA1TSR |= 0x08 /*!<Set DMA1TSR.INT_Test           */

#define clr_DMA1TSR_FDONE        DMA1TSR &=~0x01 /*!<Clear DMA1TSR.FDONE            */
#define clr_DMA1TSR_HDONE        DMA1TSR &=~0x02 /*!<Clear DMA1TSR.HDONE            */
#define clr_DMA1TSR_ACT          DMA1TSR &=~0x04 /*!<Clear DMA1TSR.ACT              */
#define clr_DMA1TSR_INT_Test     DMA1TSR &=~0x08 /*!<Clear DMA1TSR.INT_Test         */

/**@}*/ /* end of SFR_DMA1TSR_MACRO group */
/**@}*/ /* end of SFR_DMA1TSR group */

/**
   @addtogroup SFR_MTM1DA MTM1DA
   Special Function Register MTM1DA
   @{ */

/**
  @var MTM1DA
  Address: F2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */
sfr MTM1DA = 0xF2;

/**
  @addtogroup SFR_MTM1DA_MACRO Bit Macro Functions
  Bit Macro Functions of MTM1DA
  @{ */





/**@}*/ /* end of SFR_MTM1DA_MACRO group */
/**@}*/ /* end of SFR_MTM1DA group */

/**
   @addtogroup SFR_SPI0CR0 SPI0CR0
   Special Function Register SPI0CR0
   @{ */

/**
  @var SPI0CR0
  Address: F3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPR[1:0]  |SPI Clock Rate Select
  |        |          |These four bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. See Table
  |        |          |6.112 SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[2]     |CPHA      |SPI Clock Phase Select
  |        |          |CPHA bit determines the data sampling edge of the SPI clock. See
  |        |          |Figure 6.114 SPI Clock Formats
  |        |          |0 = The data is sampled on the first edge of the SPI clock.
  |        |          |1 = The data is sampled on the second edge of the SPI clock.
  |[3]     |CPOL      |SPI Clock Polarity Select
  |        |          |CPOL bit determines the idle state level of the SPI clock. See Figure
  |        |          |6.114 SPI Clock Formats
  |        |          |0 = The SPI clock is low in idle state.
  |        |          |1 = The SPI clock is high in idle state.
  |[4]     |MSTR      |Master Mode Enable
  |        |          |This bit switches the SPI operating between Master and Slave modes.
  |        |          |0 = The SPI is configured as Slave mode.
  |        |          |1 = The SPI is configured as Master mode.
  |[5]     |LSBFE     |LSB First Enable
  |        |          |0 = The SPI data is transferred MSB first.
  |        |          |1 = The SPI data is transferred LSB first.
  |[6]     |SPIEN     |SPI Enable
  |        |          |0 = SPI function Disabled.
  |        |          |1 = SPI function Enabled.
  |[7]     |SSOE      |Slave Select Output Enable
  |        |          |This bit is used in combination with the DISMODF (SPInSR.3) bit to
  |        |          |determine the feature of pin as shown inTable 6.114 Slave Select Pin
  |        |          |Configurations. This bit takes effect only under MSTR = 1 and DISMODF
  |        |          |= 1 condition.
  |        |          |0 = functions as a general purpose I/O pin.
  |        |          |1 = automatically goes low for each transmission when selecting
  |        |          |external Slave device and goes high during each idle state to de-
  |        |          |select the Slave device.
 */
sfr SPI0CR0 = 0xF3;

/**
  @addtogroup SFR_SPI0CR0_MACRO Bit Macro Functions
  Bit Macro Functions of SPI0CR0
  @{ */


#define set_SPI0CR0_CPHA         SPI0CR0 |= 0x04 /*!<Set SPI0CR0.CPHA               */
#define set_SPI0CR0_CPOL         SPI0CR0 |= 0x08 /*!<Set SPI0CR0.CPOL               */
#define set_SPI0CR0_MSTR         SPI0CR0 |= 0x10 /*!<Set SPI0CR0.MSTR               */
#define set_SPI0CR0_LSBFE        SPI0CR0 |= 0x20 /*!<Set SPI0CR0.LSBFE              */
#define set_SPI0CR0_SPIEN        SPI0CR0 |= 0x40 /*!<Set SPI0CR0.SPIEN              */
#define set_SPI0CR0_SSOE         SPI0CR0 |= 0x80 /*!<Set SPI0CR0.SSOE               */


#define clr_SPI0CR0_CPHA         SPI0CR0 &=~0x04 /*!<Clear SPI0CR0.CPHA             */
#define clr_SPI0CR0_CPOL         SPI0CR0 &=~0x08 /*!<Clear SPI0CR0.CPOL             */
#define clr_SPI0CR0_MSTR         SPI0CR0 &=~0x10 /*!<Clear SPI0CR0.MSTR             */
#define clr_SPI0CR0_LSBFE        SPI0CR0 &=~0x20 /*!<Clear SPI0CR0.LSBFE            */
#define clr_SPI0CR0_SPIEN        SPI0CR0 &=~0x40 /*!<Clear SPI0CR0.SPIEN            */
#define clr_SPI0CR0_SSOE         SPI0CR0 &=~0x80 /*!<Clear SPI0CR0.SSOE             */

/**@}*/ /* end of SFR_SPI0CR0_MACRO group */
/**@}*/ /* end of SFR_SPI0CR0 group */

/**
   @addtogroup SFR_SPI0SR SPI0SR
   Special Function Register SPI0SR
   @{ */

/**
  @var SPI0SR
  Address: F4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |TXBFF     |SPI TX Buffer Full Flag
  |        |          |0 = SPI TX buffer is empty
  |        |          |1 = SPI TX buffer is full
  |[2]     |DISSPIF   |Disable SPI Complete Interrupt
  |        |          |This bit is used to disable SPI complete interrupt while an SPI data
  |        |          |transfer is complete or an receiving data has been moved into the SPI
  |        |          |read buffer. Especially in SPI PDMA operation.
  |        |          |0 = SPI Complete Interrupt Enabled while ESPI and EA are enabled,
  |        |          |1 = SPI Complete Interrupt Disabled
  |[3]     |DISMODF   |Disable Mode Fault Error Detection
  |        |          |This bit is used in combination with the SSOE (SPInCR.7) bit to
  |        |          |determine the feature of pin as shown in Table 6.114 Slave Select Pin
  |        |          |Configurations. DISMODF is valid only in Master mode (MSTR = 1).
  |        |          |0 = Mode Fault detection Enabled. serves as input pin for Mode Fault
  |        |          |detection disregard of SSOE.
  |        |          |1 = Mode Fault detection Disabled. The feature of follows SSOE bit.
  |[4]     |MODF      |Mode Fault Error Flag
  |        |          |This bit indicates a Mode Fault error event. If pin is configured as
  |        |          |Mode Fault input (MSTR = 1 and DISMODF = 0) and is pulled low by
  |        |          |external devices, a Mode Fault error occurs. Instantly MODF will be
  |        |          |set as logic 1. If ESPI and EA are enabled, an SPI interrupt will be
  |        |          |required. This bit should be cleared via software.
  |[5]     |SPIOVF    |SPI Overrun Error Flag
  |        |          |This bit indicates an overrun event. Once an overrun event occurs,
  |        |          |this bit will be set. If ESPI and EA are enabled, an SPI interrupt
  |        |          |will be required. This bit should be cleared via software.
  |[6]     |WCOL      |Write Collision Error Flag
  |        |          |This bit indicates a write collision event. Once a write collision
  |        |          |event occurs, this bit will be set. It should be cleared via software.
  |[7]     |SPIF      |SPI Complete Flag
  |        |          |This bit is set to logic 1 via hardware while an SPI data transfer is
  |        |          |complete or an receiving data has been moved into the SPI read buffer.
  |        |          |If ESPI and EA are enabled, an SPI interrupt will be required. This
  |        |          |bit should be cleared via software. Attempting to write to SPInDR is
  |        |          |inhibited if SPIF is set.
 */
sfr SPI0SR = 0xF4;

/**
  @addtogroup SFR_SPI0SR_MACRO Bit Macro Functions
  Bit Macro Functions of SPI0SR
  @{ */

#define set_SPI0SR_TXBFF         SPI0SR |= 0x02 /*!<Set SPI0SR.TXBFF               */
#define set_SPI0SR_DISSPIF       SPI0SR |= 0x04 /*!<Set SPI0SR.DISSPIF             */
#define set_SPI0SR_DISMODF       SPI0SR |= 0x08 /*!<Set SPI0SR.DISMODF             */
#define set_SPI0SR_MODF          SPI0SR |= 0x10 /*!<Set SPI0SR.MODF                */
#define set_SPI0SR_SPIOVF        SPI0SR |= 0x20 /*!<Set SPI0SR.SPIOVF              */
#define set_SPI0SR_WCOL          SPI0SR |= 0x40 /*!<Set SPI0SR.WCOL                */
#define set_SPI0SR_SPIF          SPI0SR |= 0x80 /*!<Set SPI0SR.SPIF                */

#define clr_SPI0SR_TXBFF         SPI0SR &=~0x02 /*!<Clear SPI0SR.TXBFF             */
#define clr_SPI0SR_DISSPIF       SPI0SR &=~0x04 /*!<Clear SPI0SR.DISSPIF           */
#define clr_SPI0SR_DISMODF       SPI0SR &=~0x08 /*!<Clear SPI0SR.DISMODF           */
#define clr_SPI0SR_MODF          SPI0SR &=~0x10 /*!<Clear SPI0SR.MODF              */
#define clr_SPI0SR_SPIOVF        SPI0SR &=~0x20 /*!<Clear SPI0SR.SPIOVF            */
#define clr_SPI0SR_WCOL          SPI0SR &=~0x40 /*!<Clear SPI0SR.WCOL              */
#define clr_SPI0SR_SPIF          SPI0SR &=~0x80 /*!<Clear SPI0SR.SPIF              */

/**@}*/ /* end of SFR_SPI0SR_MACRO group */
/**@}*/ /* end of SFR_SPI0SR group */

/**
   @addtogroup SFR_SPI0DR SPI0DR
   Special Function Register SPI0DR
   @{ */

/**
  @var SPI0DR
  Address: F5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SPInDR[7:0]|Serial Peripheral Data
  |        |          |This byte is used for transmitting or receiving data on SPI bus. A
  |        |          |write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer. In Master mode, a
  |        |          |write to this register initiates transmission and reception of a byte
  |        |          |simultaneously.
 */
sfr SPI0DR = 0xF5;

/**
  @addtogroup SFR_SPI0DR_MACRO Bit Macro Functions
  Bit Macro Functions of SPI0DR
  @{ */





/**@}*/ /* end of SFR_SPI0DR_MACRO group */
/**@}*/ /* end of SFR_SPI0DR group */

/**
   @addtogroup SFR_DMA0BAH DMA0BAH
   Special Function Register DMA0BAH
   @{ */

/**
  @var DMA0BAH
  Address: F6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */
sfr DMA0BAH = 0xF6;

/**
  @addtogroup SFR_DMA0BAH_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0BAH
  @{ */







/**@}*/ /* end of SFR_DMA0BAH_MACRO group */
/**@}*/ /* end of SFR_DMA0BAH group */

/**
   @addtogroup SFR_EIPH0 EIPH0
   Special Function Register EIPH0
   @{ */

/**
  @var EIPH0
  Address: F7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PI2C0H    |I2C interrupt priority high bit
  |[1]     |PPIH      |Pin interrupt priority high bit
  |[2]     |PCAPH     |Input capture interrupt priority high bit
  |[3]     |PPWM0H    |PWM0 interrupt priority high bit
  |[4]     |PWDTH     |WDT interrupt priority high bit
  |[5]     |PFBH      |Fault Brake interrupt priority high bit
  |[6]     |PSPI0H    |SPI0 interrupt priority high bit
  |[7]     |PT2H      |Timer 2 interrupt priority high bit
 */
sfr EIPH0 = 0xF7;

/**
  @addtogroup SFR_EIPH0_MACRO Bit Macro Functions
  Bit Macro Functions of EIPH0
  @{ */

#define set_EIPH0_PI2C0H         EIPH0 |= 0x01 /*!<Set EIPH0.PI2C0H               */
#define set_EIPH0_PPIH           EIPH0 |= 0x02 /*!<Set EIPH0.PPIH                 */
#define set_EIPH0_PCAPH          EIPH0 |= 0x04 /*!<Set EIPH0.PCAPH                */
#define set_EIPH0_PPWM0H         EIPH0 |= 0x08 /*!<Set EIPH0.PPWM0H               */
#define set_EIPH0_PWDTH          EIPH0 |= 0x10 /*!<Set EIPH0.PWDTH                */
#define set_EIPH0_PFBH           EIPH0 |= 0x20 /*!<Set EIPH0.PFBH                 */
#define set_EIPH0_PSPI0H         EIPH0 |= 0x40 /*!<Set EIPH0.PSPI0H               */
#define set_EIPH0_PT2H           EIPH0 |= 0x80 /*!<Set EIPH0.PT2H                 */

#define clr_EIPH0_PI2C0H         EIPH0 &=~0x01 /*!<Clear EIPH0.PI2C0H             */
#define clr_EIPH0_PPIH           EIPH0 &=~0x02 /*!<Clear EIPH0.PPIH               */
#define clr_EIPH0_PCAPH          EIPH0 &=~0x04 /*!<Clear EIPH0.PCAPH              */
#define clr_EIPH0_PPWM0H         EIPH0 &=~0x08 /*!<Clear EIPH0.PPWM0H             */
#define clr_EIPH0_PWDTH          EIPH0 &=~0x10 /*!<Clear EIPH0.PWDTH              */
#define clr_EIPH0_PFBH           EIPH0 &=~0x20 /*!<Clear EIPH0.PFBH               */
#define clr_EIPH0_PSPI0H         EIPH0 &=~0x40 /*!<Clear EIPH0.PSPI0H             */
#define clr_EIPH0_PT2H           EIPH0 &=~0x80 /*!<Clear EIPH0.PT2H               */

/**@}*/ /* end of SFR_EIPH0_MACRO group */
/**@}*/ /* end of SFR_EIPH0 group */

/**
   @addtogroup SFR_S1CON S1CON
   Special Function Register S1CON
   @{ */

/**
  @var S1CON
  Address: F8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI_1      |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2_1 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[1]     |TI_1      |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[2]     |RB8_1     |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 1 Mode 2 or 3. In Mode 1, RB8_1 is the logic level of the
  |        |          |received stop bit. SM2_1 bit as logic 1 has restriction for exception.
  |        |          |RB8_1 is not used in Mode 0.
  |[3]     |TB8_1     |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |1 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN_1     |Receiving Enable
  |        |          |0 = Serial port 1 reception Disabled.
  |        |          |1 = Serial port 1 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN_1 = 1 and RI_1 = 0.
  |[5]     |SM2_1     |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 1 mode.
  |        |          |Mode 0:
  |        |          |No effect.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1_1     |Check with bit 7 description.
  |[7]     |SM0_1/FE_1|Serial Port 1 Mode Select
  |        |          |SMOD0_1 (T3CON.6) = 0:
  |        |          |See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
  |        |          |SMOD0_1 (T3CON.6) = 1:
  |        |          |SM0_1/FE_1 bit is used as frame error (FE) status flag. It is cleared
  |        |          |by software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */
sfr S1CON = 0xF8;

/**
  @addtogroup SFR_S1CON_MACRO Bit Macro Functions
  Bit Macro Functions of S1CON
  @{ */
sbit SM0_1      = S1CON^7;
sbit FE_1       = S1CON^7;
sbit SM1_1      = S1CON^6;
sbit SM2_1      = S1CON^5;
sbit REN_1      = S1CON^4;
sbit TB8_1      = S1CON^3;
sbit RB8_1      = S1CON^2;
sbit TI_1       = S1CON^1;
sbit RI_1       = S1CON^0;

#define set_S1CON_RI_1           S1CON |= 0x01 /*!<Set S1CON.RI_1                 */
#define set_S1CON_TI_1           S1CON |= 0x02 /*!<Set S1CON.TI_1                 */
#define set_S1CON_RB8_1          S1CON |= 0x04 /*!<Set S1CON.RB8_1                */
#define set_S1CON_TB8_1          S1CON |= 0x08 /*!<Set S1CON.TB8_1                */
#define set_S1CON_REN_1          S1CON |= 0x10 /*!<Set S1CON.REN_1                */
#define set_S1CON_SM2_1          S1CON |= 0x20 /*!<Set S1CON.SM2_1                */
#define set_S1CON_SM1_1          S1CON |= 0x40 /*!<Set S1CON.SM1_1                */
#define set_S1CON_SM0_1/FE_1     S1CON |= 0x80 /*!<Set S1CON.SM0_1/FE_1           */

#define clr_S1CON_RI_1           S1CON &=~0x01 /*!<Clear S1CON.RI_1               */
#define clr_S1CON_TI_1           S1CON &=~0x02 /*!<Clear S1CON.TI_1               */
#define clr_S1CON_RB8_1          S1CON &=~0x04 /*!<Clear S1CON.RB8_1              */
#define clr_S1CON_TB8_1          S1CON &=~0x08 /*!<Clear S1CON.TB8_1              */
#define clr_S1CON_REN_1          S1CON &=~0x10 /*!<Clear S1CON.REN_1              */
#define clr_S1CON_SM2_1          S1CON &=~0x20 /*!<Clear S1CON.SM2_1              */
#define clr_S1CON_SM1_1          S1CON &=~0x40 /*!<Clear S1CON.SM1_1              */
#define clr_S1CON_SM0_1/FE_1     S1CON &=~0x80 /*!<Clear S1CON.SM0_1/FE_1         */

/**@}*/ /* end of SFR_S1CON_MACRO group */
/**@}*/ /* end of SFR_S1CON group */

/**
   @addtogroup SFR_SPI1CR0 SPI1CR0
   Special Function Register SPI1CR0
   @{ */

/**
  @var SPI1CR0
  Address: F9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPR[1:0]  |SPI Clock Rate Select
  |        |          |These four bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. See Table
  |        |          |6.112 SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[2]     |CPHA      |SPI Clock Phase Select
  |        |          |CPHA bit determines the data sampling edge of the SPI clock. See
  |        |          |Figure 6.114 SPI Clock Formats
  |        |          |0 = The data is sampled on the first edge of the SPI clock.
  |        |          |1 = The data is sampled on the second edge of the SPI clock.
  |[3]     |CPOL      |SPI Clock Polarity Select
  |        |          |CPOL bit determines the idle state level of the SPI clock. See Figure
  |        |          |6.114 SPI Clock Formats
  |        |          |0 = The SPI clock is low in idle state.
  |        |          |1 = The SPI clock is high in idle state.
  |[4]     |MSTR      |Master Mode Enable
  |        |          |This bit switches the SPI operating between Master and Slave modes.
  |        |          |0 = The SPI is configured as Slave mode.
  |        |          |1 = The SPI is configured as Master mode.
  |[5]     |LSBFE     |LSB First Enable
  |        |          |0 = The SPI data is transferred MSB first.
  |        |          |1 = The SPI data is transferred LSB first.
  |[6]     |SPIEN     |SPI Enable
  |        |          |0 = SPI function Disabled.
  |        |          |1 = SPI function Enabled.
  |[7]     |SSOE      |Slave Select Output Enable
  |        |          |This bit is used in combination with the DISMODF (SPInSR.3) bit to
  |        |          |determine the feature of pin as shown inTable 6.114 Slave Select Pin
  |        |          |Configurations. This bit takes effect only under MSTR = 1 and DISMODF
  |        |          |= 1 condition.
  |        |          |0 = functions as a general purpose I/O pin.
  |        |          |1 = automatically goes low for each transmission when selecting
  |        |          |external Slave device and goes high during each idle state to de-
  |        |          |select the Slave device.
 */
sfr SPI1CR0 = 0xF9;

/**
  @addtogroup SFR_SPI1CR0_MACRO Bit Macro Functions
  Bit Macro Functions of SPI1CR0
  @{ */


#define set_SPI1CR0_CPHA         SPI1CR0 |= 0x04 /*!<Set SPI1CR0.CPHA               */
#define set_SPI1CR0_CPOL         SPI1CR0 |= 0x08 /*!<Set SPI1CR0.CPOL               */
#define set_SPI1CR0_MSTR         SPI1CR0 |= 0x10 /*!<Set SPI1CR0.MSTR               */
#define set_SPI1CR0_LSBFE        SPI1CR0 |= 0x20 /*!<Set SPI1CR0.LSBFE              */
#define set_SPI1CR0_SPIEN        SPI1CR0 |= 0x40 /*!<Set SPI1CR0.SPIEN              */
#define set_SPI1CR0_SSOE         SPI1CR0 |= 0x80 /*!<Set SPI1CR0.SSOE               */


#define clr_SPI1CR0_CPHA         SPI1CR0 &=~0x04 /*!<Clear SPI1CR0.CPHA             */
#define clr_SPI1CR0_CPOL         SPI1CR0 &=~0x08 /*!<Clear SPI1CR0.CPOL             */
#define clr_SPI1CR0_MSTR         SPI1CR0 &=~0x10 /*!<Clear SPI1CR0.MSTR             */
#define clr_SPI1CR0_LSBFE        SPI1CR0 &=~0x20 /*!<Clear SPI1CR0.LSBFE            */
#define clr_SPI1CR0_SPIEN        SPI1CR0 &=~0x40 /*!<Clear SPI1CR0.SPIEN            */
#define clr_SPI1CR0_SSOE         SPI1CR0 &=~0x80 /*!<Clear SPI1CR0.SSOE             */

/**@}*/ /* end of SFR_SPI1CR0_MACRO group */
/**@}*/ /* end of SFR_SPI1CR0 group */

/**
   @addtogroup SFR_SPI1CR1 SPI1CR1
   Special Function Register SPI1CR1
   @{ */

/**
  @var SPI1CR1
  Address: FAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPIS[1:0] |SPI Interval Time Selection Between Adjacent Bytes
  |        |          |SPIS[1:0] and CPHA select eight grades of SPI interval time selection
  |        |          |between adjacent bytes. As see Table 6.113 SPI Clock Suspend Interval
  |        |          |Select
  |        |          |SPIS[1:0] are valid only under Master mode (MSTR = 1).
  |[2]     |RXDMAEN   |SPI RX DMA Enable
  |        |          |This bit enables the SPI RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SPI RX operation.
  |        |          |0 = SPI RX DMA Disabled
  |        |          |1 = SPI RX DMA Enabled
  |[3]     |TXDMAEN   |SPI TX DMA Enable
  |        |          |This bit enables the SPI TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SPI TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |SPR[3:2]  |SPI Clock Rate Select
  |        |          |These two bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. Table 6.112
  |        |          |SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[6]     |SPSYNC    |SPI1 Master Clock Sync with SPI0 Master Clock. This bit is only valid in SPI0CR0
  |[7]     |Loop test(TA protect)|internal MISO connect to MOSI
 */
sfr SPI1CR1 = 0xFA;

/**
  @addtogroup SFR_SPI1CR1_MACRO Bit Macro Functions
  Bit Macro Functions of SPI1CR1
  @{ */


#define set_SPI1CR1_RXDMAEN      SPI1CR1 |= 0x04 /*!<Set SPI1CR1.RXDMAEN            */
#define set_SPI1CR1_TXDMAEN      SPI1CR1 |= 0x08 /*!<Set SPI1CR1.TXDMAEN            */

#define set_SPI1CR1_SPSYNC       SPI1CR1 |= 0x40 /*!<Set SPI1CR1.SPSYNC             */
#define set_SPI1CR1_Loop test(TA protect) SPI1CR1 |= 0x80 /*!<Set SPI1CR1.Loop test(TA protect) */


#define clr_SPI1CR1_RXDMAEN      SPI1CR1 &=~0x04 /*!<Clear SPI1CR1.RXDMAEN          */
#define clr_SPI1CR1_TXDMAEN      SPI1CR1 &=~0x08 /*!<Clear SPI1CR1.TXDMAEN          */

#define clr_SPI1CR1_SPSYNC       SPI1CR1 &=~0x40 /*!<Clear SPI1CR1.SPSYNC           */
#define clr_SPI1CR1_Loop test(TA protect) SPI1CR1 &=~0x80 /*!<Clear SPI1CR1.Loop test(TA protect) */

/**@}*/ /* end of SFR_SPI1CR1_MACRO group */
/**@}*/ /* end of SFR_SPI1CR1 group */

/**
   @addtogroup SFR_SPI1SR SPI1SR
   Special Function Register SPI1SR
   @{ */

/**
  @var SPI1SR
  Address: FBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |TXBFF     |SPI TX Buffer Full Flag
  |        |          |0 = SPI TX buffer is empty
  |        |          |1 = SPI TX buffer is full
  |[2]     |DISSPIF   |Disable SPI Complete Interrupt
  |        |          |This bit is used to disable SPI complete interrupt while an SPI data
  |        |          |transfer is complete or an receiving data has been moved into the SPI
  |        |          |read buffer. Especially in SPI PDMA operation.
  |        |          |0 = SPI Complete Interrupt Enabled while ESPI and EA are enabled,
  |        |          |1 = SPI Complete Interrupt Disabled
  |[3]     |DISMODF   |Disable Mode Fault Error Detection
  |        |          |This bit is used in combination with the SSOE (SPInCR.7) bit to
  |        |          |determine the feature of pin as shown in Table 6.114 Slave Select Pin
  |        |          |Configurations. DISMODF is valid only in Master mode (MSTR = 1).
  |        |          |0 = Mode Fault detection Enabled. serves as input pin for Mode Fault
  |        |          |detection disregard of SSOE.
  |        |          |1 = Mode Fault detection Disabled. The feature of follows SSOE bit.
  |[4]     |MODF      |Mode Fault Error Flag
  |        |          |This bit indicates a Mode Fault error event. If pin is configured as
  |        |          |Mode Fault input (MSTR = 1 and DISMODF = 0) and is pulled low by
  |        |          |external devices, a Mode Fault error occurs. Instantly MODF will be
  |        |          |set as logic 1. If ESPI and EA are enabled, an SPI interrupt will be
  |        |          |required. This bit should be cleared via software.
  |[5]     |SPIOVF    |SPI Overrun Error Flag
  |        |          |This bit indicates an overrun event. Once an overrun event occurs,
  |        |          |this bit will be set. If ESPI and EA are enabled, an SPI interrupt
  |        |          |will be required. This bit should be cleared via software.
  |[6]     |WCOL      |Write Collision Error Flag
  |        |          |This bit indicates a write collision event. Once a write collision
  |        |          |event occurs, this bit will be set. It should be cleared via software.
  |[7]     |SPIF      |SPI Complete Flag
  |        |          |This bit is set to logic 1 via hardware while an SPI data transfer is
  |        |          |complete or an receiving data has been moved into the SPI read buffer.
  |        |          |If ESPI and EA are enabled, an SPI interrupt will be required. This
  |        |          |bit should be cleared via software. Attempting to write to SPInDR is
  |        |          |inhibited if SPIF is set.
 */
sfr SPI1SR = 0xFB;

/**
  @addtogroup SFR_SPI1SR_MACRO Bit Macro Functions
  Bit Macro Functions of SPI1SR
  @{ */

#define set_SPI1SR_TXBFF         SPI1SR |= 0x02 /*!<Set SPI1SR.TXBFF               */
#define set_SPI1SR_DISSPIF       SPI1SR |= 0x04 /*!<Set SPI1SR.DISSPIF             */
#define set_SPI1SR_DISMODF       SPI1SR |= 0x08 /*!<Set SPI1SR.DISMODF             */
#define set_SPI1SR_MODF          SPI1SR |= 0x10 /*!<Set SPI1SR.MODF                */
#define set_SPI1SR_SPIOVF        SPI1SR |= 0x20 /*!<Set SPI1SR.SPIOVF              */
#define set_SPI1SR_WCOL          SPI1SR |= 0x40 /*!<Set SPI1SR.WCOL                */
#define set_SPI1SR_SPIF          SPI1SR |= 0x80 /*!<Set SPI1SR.SPIF                */

#define clr_SPI1SR_TXBFF         SPI1SR &=~0x02 /*!<Clear SPI1SR.TXBFF             */
#define clr_SPI1SR_DISSPIF       SPI1SR &=~0x04 /*!<Clear SPI1SR.DISSPIF           */
#define clr_SPI1SR_DISMODF       SPI1SR &=~0x08 /*!<Clear SPI1SR.DISMODF           */
#define clr_SPI1SR_MODF          SPI1SR &=~0x10 /*!<Clear SPI1SR.MODF              */
#define clr_SPI1SR_SPIOVF        SPI1SR &=~0x20 /*!<Clear SPI1SR.SPIOVF            */
#define clr_SPI1SR_WCOL          SPI1SR &=~0x40 /*!<Clear SPI1SR.WCOL              */
#define clr_SPI1SR_SPIF          SPI1SR &=~0x80 /*!<Clear SPI1SR.SPIF              */

/**@}*/ /* end of SFR_SPI1SR_MACRO group */
/**@}*/ /* end of SFR_SPI1SR group */

/**
   @addtogroup SFR_SPI1DR SPI1DR
   Special Function Register SPI1DR
   @{ */

/**
  @var SPI1DR
  Address: FCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SPInDR[7:0]|Serial Peripheral Data
  |        |          |This byte is used for transmitting or receiving data on SPI bus. A
  |        |          |write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer. In Master mode, a
  |        |          |write to this register initiates transmission and reception of a byte
  |        |          |simultaneously.
 */
sfr SPI1DR = 0xFC;

/**
  @addtogroup SFR_SPI1DR_MACRO Bit Macro Functions
  Bit Macro Functions of SPI1DR
  @{ */





/**@}*/ /* end of SFR_SPI1DR_MACRO group */
/**@}*/ /* end of SFR_SPI1DR group */

/**
   @addtogroup SFR_DMA1BAH DMA1BAH
   Special Function Register DMA1BAH
   @{ */

/**
  @var DMA1BAH
  Address: FDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */
sfr DMA1BAH = 0xFD;

/**
  @addtogroup SFR_DMA1BAH_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1BAH
  @{ */







/**@}*/ /* end of SFR_DMA1BAH_MACRO group */
/**@}*/ /* end of SFR_DMA1BAH group */

/**
   @addtogroup SFR_EIP1 EIP1
   Special Function Register EIP1
   @{ */

/**
  @var EIP1
  Address: FEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PS1       |Serial port 1 interrupt priority low bit
  |[1]     |PT3       |Timer 3 interrupt priority low bit
  |[2]     |PWKT      |WKT interrupt priority low bit
  |[3]     |PHF       |Hard fault interrupt priority low bit
  |[4]     |PSMC      |SMC interrupt priority low bit
  |[5]     |PDMA0     |PDMA0 interrupt priority low bit
  |[6]     |PDMA1     |PDMA1 interrupt priority low bit
  |[7]     |PSPI1     |SPI1 interrupt priority low bit
 */
sfr EIP1 = 0xFE;

/**
  @addtogroup SFR_EIP1_MACRO Bit Macro Functions
  Bit Macro Functions of EIP1
  @{ */

#define set_EIP1_PS1             EIP1 |= 0x01 /*!<Set EIP1.PS1                   */
#define set_EIP1_PT3             EIP1 |= 0x02 /*!<Set EIP1.PT3                   */
#define set_EIP1_PWKT            EIP1 |= 0x04 /*!<Set EIP1.PWKT                  */
#define set_EIP1_PHF             EIP1 |= 0x08 /*!<Set EIP1.PHF                   */
#define set_EIP1_PSMC            EIP1 |= 0x10 /*!<Set EIP1.PSMC                  */
#define set_EIP1_PDMA0           EIP1 |= 0x20 /*!<Set EIP1.PDMA0                 */
#define set_EIP1_PDMA1           EIP1 |= 0x40 /*!<Set EIP1.PDMA1                 */
#define set_EIP1_PSPI1           EIP1 |= 0x80 /*!<Set EIP1.PSPI1                 */

#define clr_EIP1_PS1             EIP1 &=~0x01 /*!<Clear EIP1.PS1                 */
#define clr_EIP1_PT3             EIP1 &=~0x02 /*!<Clear EIP1.PT3                 */
#define clr_EIP1_PWKT            EIP1 &=~0x04 /*!<Clear EIP1.PWKT                */
#define clr_EIP1_PHF             EIP1 &=~0x08 /*!<Clear EIP1.PHF                 */
#define clr_EIP1_PSMC            EIP1 &=~0x10 /*!<Clear EIP1.PSMC                */
#define clr_EIP1_PDMA0           EIP1 &=~0x20 /*!<Clear EIP1.PDMA0               */
#define clr_EIP1_PDMA1           EIP1 &=~0x40 /*!<Clear EIP1.PDMA1               */
#define clr_EIP1_PSPI1           EIP1 &=~0x80 /*!<Clear EIP1.PSPI1               */

/**@}*/ /* end of SFR_EIP1_MACRO group */
/**@}*/ /* end of SFR_EIP1 group */

/**
   @addtogroup SFR_EIPH1 EIPH1
   Special Function Register EIPH1
   @{ */

/**
  @var EIPH1
  Address: FFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PS1H      |Serial port 1 interrupt priority high bit
  |[1]     |PT3H      |Timer 3 interrupt priority high bit
  |[2]     |PWKTH     |WKT interrupt priority high bit
  |[3]     |PHFH      |Hard fault interrupt priority high bit
  |[4]     |PSMCH     |SMC interrupt priority high bit
  |[5]     |PDMA0H    |PDMA0 interrupt priority high bit
  |[6]     |PDMA1H    |PDMA1 interrupt priority high bit
  |[7]     |PSPI1H    |SPI1 interrupt priority high bit
 */
sfr EIPH1 = 0xFF;

/**
  @addtogroup SFR_EIPH1_MACRO Bit Macro Functions
  Bit Macro Functions of EIPH1
  @{ */

#define set_EIPH1_PS1H           EIPH1 |= 0x01 /*!<Set EIPH1.PS1H                 */
#define set_EIPH1_PT3H           EIPH1 |= 0x02 /*!<Set EIPH1.PT3H                 */
#define set_EIPH1_PWKTH          EIPH1 |= 0x04 /*!<Set EIPH1.PWKTH                */
#define set_EIPH1_PHFH           EIPH1 |= 0x08 /*!<Set EIPH1.PHFH                 */
#define set_EIPH1_PSMCH          EIPH1 |= 0x10 /*!<Set EIPH1.PSMCH                */
#define set_EIPH1_PDMA0H         EIPH1 |= 0x20 /*!<Set EIPH1.PDMA0H               */
#define set_EIPH1_PDMA1H         EIPH1 |= 0x40 /*!<Set EIPH1.PDMA1H               */
#define set_EIPH1_PSPI1H         EIPH1 |= 0x80 /*!<Set EIPH1.PSPI1H               */

#define clr_EIPH1_PS1H           EIPH1 &=~0x01 /*!<Clear EIPH1.PS1H               */
#define clr_EIPH1_PT3H           EIPH1 &=~0x02 /*!<Clear EIPH1.PT3H               */
#define clr_EIPH1_PWKTH          EIPH1 &=~0x04 /*!<Clear EIPH1.PWKTH              */
#define clr_EIPH1_PHFH           EIPH1 &=~0x08 /*!<Clear EIPH1.PHFH               */
#define clr_EIPH1_PSMCH          EIPH1 &=~0x10 /*!<Clear EIPH1.PSMCH              */
#define clr_EIPH1_PDMA0H         EIPH1 &=~0x20 /*!<Clear EIPH1.PDMA0H             */
#define clr_EIPH1_PDMA1H         EIPH1 &=~0x40 /*!<Clear EIPH1.PDMA1H             */
#define clr_EIPH1_PSPI1H         EIPH1 &=~0x80 /*!<Clear EIPH1.PSPI1H             */

/**@}*/ /* end of SFR_EIPH1_MACRO group */
/**@}*/ /* end of SFR_EIPH1 group */

/**@}*/ /* end of SFR_PAGE0 group */


/**
 @addtogroup SFR_PAGE1 SFR Page 1
 @{ */

/**
   @addtogroup SFR_DPL DPL
   Special Function Register DPL
   @{ */

/**
  @var DPL
  Address: 82H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[7:0] |Data Pointer Low Byte
  |        |          |This is the low byte of 16-bit data pointer. DPL combined with DPH
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPL_MACRO Bit Macro Functions
  Bit Macro Functions of DPL
  @{ */





/**@}*/ /* end of SFR_DPL_MACRO group */
/**@}*/ /* end of SFR_DPL group */

/**
   @addtogroup SFR_DPH DPH
   Special Function Register DPH
   @{ */

/**
  @var DPH
  Address: 83H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[15:8]|Data Pointer High Byte
  |        |          |This is the high byte of 16-bit data pointer. DPH combined with DPL
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPH_MACRO Bit Macro Functions
  Bit Macro Functions of DPH
  @{ */





/**@}*/ /* end of SFR_DPH_MACRO group */
/**@}*/ /* end of SFR_DPH group */

/**
   @addtogroup SFR_XLTCON XLTCON
   Special Function Register XLTCON
   @{ */

/**
  @var XLTCON
  Address: 85H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LXSG[1:0] |LXT Gain Value Select
  |        |          |00 = L0 mode (smallest value)
  |        |          |01 = L1 mode
  |        |          |10 = L2 mode
  |        |          |11 = L3 mode (largest value)
  |[3:2]   |Reserved  |Reserved
  |[6:4]   |HXSG[2:0] |HXT Gain Value Select
  |        |          |000 = L0 mode (smallest value)
  |        |          |001 = L1 mode
  |        |          |010 = L2 mode
  |        |          |011 = L3 mode
  |        |          |100 = L4 mode
  |        |          |101 = L5 mode
  |        |          |110 = L6 mode
  |        |          |111 = L7 mode (largest value)
  |[7]     |HSCH      |HXT Schmitt Trigger Select
  |        |          |0 = disable
  |        |          |1 = enable
 */

/**
  @addtogroup SFR_XLTCON_MACRO Bit Macro Functions
  Bit Macro Functions of XLTCON
  @{ */



#define set_XLTCON_HSCH          XLTCON |= 0x80 /*!<Set XLTCON.HSCH                */



#define clr_XLTCON_HSCH          XLTCON &=~0x80 /*!<Clear XLTCON.HSCH              */

/**@}*/ /* end of SFR_XLTCON_MACRO group */
/**@}*/ /* end of SFR_XLTCON group */

/**
   @addtogroup SFR_CWKL CWKL
   Special Function Register CWKL
   @{ */

/**
  @var CWKL
  Address: 86H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CWK[7:0]  |WKT Current Count Value Low Byte Low Byte
  |        |          |It is store value of WKT current count.
 */

/**
  @addtogroup SFR_CWKL_MACRO Bit Macro Functions
  Bit Macro Functions of CWKL
  @{ */





/**@}*/ /* end of SFR_CWKL_MACRO group */
/**@}*/ /* end of SFR_CWKL group */



/**
   @addtogroup SFR_P0DW P0DW
   Special Function Register P0DW
   @{ */

/**
  @var P0DW
  Address: 8AH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P0DW_MACRO Bit Macro Functions
  Bit Macro Functions of P0DW
  @{ */





/**@}*/ /* end of SFR_P0DW_MACRO group */
/**@}*/ /* end of SFR_P0DW group */

/**
   @addtogroup SFR_P1DW P1DW
   Special Function Register P1DW
   @{ */

/**
  @var P1DW
  Address: 8BH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P1DW_MACRO Bit Macro Functions
  Bit Macro Functions of P1DW
  @{ */





/**@}*/ /* end of SFR_P1DW_MACRO group */
/**@}*/ /* end of SFR_P1DW group */

/**
   @addtogroup SFR_P2DW P2DW
   Special Function Register P2DW
   @{ */

/**
  @var P2DW
  Address: 8CH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P2DW_MACRO Bit Macro Functions
  Bit Macro Functions of P2DW
  @{ */





/**@}*/ /* end of SFR_P2DW_MACRO group */
/**@}*/ /* end of SFR_P2DW group */

/**
   @addtogroup SFR_P3DW P3DW
   Special Function Register P3DW
   @{ */

/**
  @var P3DW
  Address: 8DH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P3DW_MACRO Bit Macro Functions
  Bit Macro Functions of P3DW
  @{ */





/**@}*/ /* end of SFR_P3DW_MACRO group */
/**@}*/ /* end of SFR_P3DW group */

/**
   @addtogroup SFR_P4DW P4DW
   Special Function Register P4DW
   @{ */

/**
  @var P4DW
  Address: 8EH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P4DW_MACRO Bit Macro Functions
  Bit Macro Functions of P4DW
  @{ */





/**@}*/ /* end of SFR_P4DW_MACRO group */
/**@}*/ /* end of SFR_P4DW group */

/**
   @addtogroup SFR_P5DW P5DW
   Special Function Register P5DW
   @{ */

/**
  @var P5DW
  Address: 8FH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P5DW_MACRO Bit Macro Functions
  Bit Macro Functions of P5DW
  @{ */





/**@}*/ /* end of SFR_P5DW_MACRO group */
/**@}*/ /* end of SFR_P5DW group */


/**
   @addtogroup SFR_SFRS SFRS
   Special Function Register SFRS
   @{ */

/**
  @var SFRS
  Address: 91H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SFRPAGE[1:0]|SFR Page Select
  |        |          |00 = Instructions access SFR Page 0.
  |        |          |01 = Instructions access SFR Page 1.
  |        |          |10 = Instructions access SFR page 2.
  |        |          |11 = Instructions access SFR page 3.
 */

/**
  @addtogroup SFR_SFRS_MACRO Bit Macro Functions
  Bit Macro Functions of SFRS
  @{ */





/**@}*/ /* end of SFR_SFRS_MACRO group */
/**@}*/ /* end of SFR_SFRS group */

/**
   @addtogroup SFR_P0UP P0UP
   Special Function Register P0UP
   @{ */

/**
  @var P0UP
  Address: 92H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P0UP_MACRO Bit Macro Functions
  Bit Macro Functions of P0UP
  @{ */





/**@}*/ /* end of SFR_P0UP_MACRO group */
/**@}*/ /* end of SFR_P0UP group */

/**
   @addtogroup SFR_P1UP P1UP
   Special Function Register P1UP
   @{ */

/**
  @var P1UP
  Address: 93H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P1UP_MACRO Bit Macro Functions
  Bit Macro Functions of P1UP
  @{ */





/**@}*/ /* end of SFR_P1UP_MACRO group */
/**@}*/ /* end of SFR_P1UP group */

/**
   @addtogroup SFR_P2UP P2UP
   Special Function Register P2UP
   @{ */

/**
  @var P2UP
  Address: 94H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P2UP_MACRO Bit Macro Functions
  Bit Macro Functions of P2UP
  @{ */





/**@}*/ /* end of SFR_P2UP_MACRO group */
/**@}*/ /* end of SFR_P2UP group */

/**
   @addtogroup SFR_P3UP P3UP
   Special Function Register P3UP
   @{ */

/**
  @var P3UP
  Address: 95H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P3UP_MACRO Bit Macro Functions
  Bit Macro Functions of P3UP
  @{ */





/**@}*/ /* end of SFR_P3UP_MACRO group */
/**@}*/ /* end of SFR_P3UP group */

/**
   @addtogroup SFR_P6S P6S
   Special Function Register P6S
   @{ */

/**
  @var P6S
  Address: 96H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup SFR_P6S_MACRO Bit Macro Functions
  Bit Macro Functions of P6S
  @{ */





/**@}*/ /* end of SFR_P6S_MACRO group */
/**@}*/ /* end of SFR_P6S group */

/**
   @addtogroup SFR_P4UP P4UP
   Special Function Register P4UP
   @{ */

/**
  @var P4UP
  Address: 96H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P4UP_MACRO Bit Macro Functions
  Bit Macro Functions of P4UP
  @{ */





/**@}*/ /* end of SFR_P4UP_MACRO group */
/**@}*/ /* end of SFR_P4UP group */

/**
   @addtogroup SFR_P5UP P5UP
   Special Function Register P5UP
   @{ */

/**
  @var P5UP
  Address: 97H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P5UP_MACRO Bit Macro Functions
  Bit Macro Functions of P5UP
  @{ */





/**@}*/ /* end of SFR_P5UP_MACRO group */
/**@}*/ /* end of SFR_P5UP group */


/**
   @addtogroup SFR_P0S P0S
   Special Function Register P0S
   @{ */

/**
  @var P0S
  Address: 99H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup SFR_P0S_MACRO Bit Macro Functions
  Bit Macro Functions of P0S
  @{ */





/**@}*/ /* end of SFR_P0S_MACRO group */
/**@}*/ /* end of SFR_P0S group */

/**
   @addtogroup SFR_P0SR P0SR
   Special Function Register P0SR
   @{ */

/**
  @var P0SR
  Address: 9AH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P0SR_MACRO Bit Macro Functions
  Bit Macro Functions of P0SR
  @{ */





/**@}*/ /* end of SFR_P0SR_MACRO group */
/**@}*/ /* end of SFR_P0SR group */

/**
   @addtogroup SFR_P1S P1S
   Special Function Register P1S
   @{ */

/**
  @var P1S
  Address: 9BH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup SFR_P1S_MACRO Bit Macro Functions
  Bit Macro Functions of P1S
  @{ */





/**@}*/ /* end of SFR_P1S_MACRO group */
/**@}*/ /* end of SFR_P1S group */

/**
   @addtogroup SFR_P1SR P1SR
   Special Function Register P1SR
   @{ */

/**
  @var P1SR
  Address: 9CH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P1SR_MACRO Bit Macro Functions
  Bit Macro Functions of P1SR
  @{ */





/**@}*/ /* end of SFR_P1SR_MACRO group */
/**@}*/ /* end of SFR_P1SR group */

/**
   @addtogroup SFR_P2S P2S
   Special Function Register P2S
   @{ */

/**
  @var P2S
  Address: 9DH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup SFR_P2S_MACRO Bit Macro Functions
  Bit Macro Functions of P2S
  @{ */





/**@}*/ /* end of SFR_P2S_MACRO group */
/**@}*/ /* end of SFR_P2S group */

/**
   @addtogroup SFR_P2SR P2SR
   Special Function Register P2SR
   @{ */

/**
  @var P2SR
  Address: 9EH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P2SR_MACRO Bit Macro Functions
  Bit Macro Functions of P2SR
  @{ */





/**@}*/ /* end of SFR_P2SR_MACRO group */
/**@}*/ /* end of SFR_P2SR group */

/**
   @addtogroup SFR_P2 P2
   Special Function Register P2
   @{ */

/**
  @var P2
  Address: A0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P2_MACRO Bit Macro Functions
  Bit Macro Functions of P2
  @{ */





/**@}*/ /* end of SFR_P2_MACRO group */
/**@}*/ /* end of SFR_P2 group */

/**
   @addtogroup SFR_PIPS0 PIPS0
   Special Function Register PIPS0
   @{ */

/**
  @var PIPS0
  Address: A1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS0_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS0
  @{ */







/**@}*/ /* end of SFR_PIPS0_MACRO group */
/**@}*/ /* end of SFR_PIPS0 group */

/**
   @addtogroup SFR_PIPS1 PIPS1
   Special Function Register PIPS1
   @{ */

/**
  @var PIPS1
  Address: A2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS1_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS1
  @{ */







/**@}*/ /* end of SFR_PIPS1_MACRO group */
/**@}*/ /* end of SFR_PIPS1 group */

/**
   @addtogroup SFR_PIPS2 PIPS2
   Special Function Register PIPS2
   @{ */

/**
  @var PIPS2
  Address: A3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS2_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS2
  @{ */







/**@}*/ /* end of SFR_PIPS2_MACRO group */
/**@}*/ /* end of SFR_PIPS2 group */

/**
   @addtogroup SFR_PIPS3 PIPS3
   Special Function Register PIPS3
   @{ */

/**
  @var PIPS3
  Address: A4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS3_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS3
  @{ */







/**@}*/ /* end of SFR_PIPS3_MACRO group */
/**@}*/ /* end of SFR_PIPS3 group */

/**
   @addtogroup SFR_PIPS4 PIPS4
   Special Function Register PIPS4
   @{ */

/**
  @var PIPS4
  Address: A5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS4_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS4
  @{ */







/**@}*/ /* end of SFR_PIPS4_MACRO group */
/**@}*/ /* end of SFR_PIPS4 group */

/**
   @addtogroup SFR_PIPS5 PIPS5
   Special Function Register PIPS5
   @{ */

/**
  @var PIPS5
  Address: A6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS5_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS5
  @{ */







/**@}*/ /* end of SFR_PIPS5_MACRO group */
/**@}*/ /* end of SFR_PIPS5 group */

/**
   @addtogroup SFR_PIPS6 PIPS6
   Special Function Register PIPS6
   @{ */

/**
  @var PIPS6
  Address: A7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS6_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS6
  @{ */







/**@}*/ /* end of SFR_PIPS6_MACRO group */
/**@}*/ /* end of SFR_PIPS6 group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EX0       |Enable External Interrupt 0
  |        |          |0 = External interrupt 0 Disabled.
  |        |          |1 = External interrupt 0 interrupt Enable. When interrupt generated
  |        |          |INT0 pin set 1.
  |[1]     |ET0       |Enable Timer 0 Interrupt
  |        |          |0 = Timer 0 interrupt Disabled.
  |        |          |1 = Timer 0 interrupt Enable. When interrupt generated TF0 (TCON.5)
  |        |          |set 1.
  |[2]     |EX1       |Enable External Interrupt 1
  |        |          |0 = External interrupt 1 Disabled.
  |        |          |1 = External interrupt 1 interrupt Enable. When interrupt generated
  |        |          |INT1 pin set 1.
  |[3]     |ET1       |Enable Timer 1 Interrupt
  |        |          |0 = Timer 1 interrupt Disabled.
  |        |          |1 = Timer 1 interrupt Enable. When interrupt generated TF1 (TCON.7)
  |        |          |set 1.
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Serial port 0 interrupt Enable. When interrupt generated TI
  |        |          |(SCON.1) or RI (SCON.0) set 1.
  |[5]     |EBOD      |Enable Brown-Out Interrupt
  |        |          |0 = Brown-out detection interrupt Disabled.
  |        |          |1 = Brown-out detection interrupt Enable. When interrupt generated BOF
  |        |          |(BODCON0.3) set 1.
  |[6]     |EADC      |Enable ADC Interrupt
  |        |          |0 = ADC interrupt Disabled.
  |        |          |1 = ADC interrupt Enable. When interrupt generated ADCF (ADCCON0.7)
  |        |          |set 1.
  |[7]     |EA        |Enable All Interrupt
  |        |          |This bit globally enables/disables all interrupts that are
  |        |          |individually enabled.
  |        |          |0 = All interrupt sources Disabled.
  |        |          |1 = Each interrupt Enabled depending on its individual mask setting.
  |        |          |Individual interrupts will occur if enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_EX0               IE |= 0x01 /*!<Set IE.EX0                     */
#define set_IE_ET0               IE |= 0x02 /*!<Set IE.ET0                     */
#define set_IE_EX1               IE |= 0x04 /*!<Set IE.EX1                     */
#define set_IE_ET1               IE |= 0x08 /*!<Set IE.ET1                     */
#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */
#define set_IE_EBOD              IE |= 0x20 /*!<Set IE.EBOD                    */
#define set_IE_EADC              IE |= 0x40 /*!<Set IE.EADC                    */
#define set_IE_EA                IE |= 0x80 /*!<Set IE.EA                      */

#define clr_IE_EX0               IE &=~0x01 /*!<Clear IE.EX0                   */
#define clr_IE_ET0               IE &=~0x02 /*!<Clear IE.ET0                   */
#define clr_IE_EX1               IE &=~0x04 /*!<Clear IE.EX1                   */
#define clr_IE_ET1               IE &=~0x08 /*!<Clear IE.ET1                   */
#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */
#define clr_IE_EBOD              IE &=~0x20 /*!<Clear IE.EBOD                  */
#define clr_IE_EADC              IE &=~0x40 /*!<Clear IE.EADC                  */
#define clr_IE_EA                IE &=~0x80 /*!<Clear IE.EA                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Interrupt generated by TI (SCON.1) or RI (SCON.0) Enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */

#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_VRFCON VRFCON
   Special Function Register VRFCON
   @{ */

/**
  @var VRFCON
  Address: A9H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ENVRF     |Internal VREF Enable
  |        |          |1 = Internal VREF Enabled,
  |        |          |0 = Internal VREF Disabled
  |        |          |Note that a 1 uF has to add on VREF pin while internal VREF is
  |        |          |enabled.
  |[1]     |ENLOAD    |Internal VREF Pre-Load Enable
  |        |          |1 = Internal VREF Pre-load Enabled.
  |        |          |0 = Internal VREF Pre-load Disabled
  |[3:2]   |Reserved  |Reserved
  |[6:4]   |VRFSEL[2:0]|Internal VREF Output Voltage Select
  |        |          |This field selects VREF output voltage.
  |        |          |000 = 1.538V , when VDD > 2.0V
  |        |          |001 = 2.048V , when VDD > 2.4V
  |        |          |010 = 2.560V , when VDD > 2.9V
  |        |          |011 = 3.072V , when VDD > 3.4V
  |        |          |100 = 4.096V , when VDD > 4.5V
  |        |          |101 = reserved
  |        |          |110 = reserved
  |        |          |111 = reserved
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_VRFCON_MACRO Bit Macro Functions
  Bit Macro Functions of VRFCON
  @{ */

#define set_VRFCON_ENVRF         VRFCON |= 0x01 /*!<Set VRFCON.ENVRF               */
#define set_VRFCON_ENLOAD        VRFCON |= 0x02 /*!<Set VRFCON.ENLOAD              */


#define clr_VRFCON_ENVRF         VRFCON &=~0x01 /*!<Clear VRFCON.ENVRF             */
#define clr_VRFCON_ENLOAD        VRFCON &=~0x02 /*!<Clear VRFCON.ENLOAD            */


/**@}*/ /* end of SFR_VRFCON_MACRO group */
/**@}*/ /* end of SFR_VRFCON group */

/**
   @addtogroup SFR_ACMPCR2 ACMPCR2
   Special Function Register ACMPCR2
   @{ */

/**
  @var ACMPCR2
  Address: ABH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRVEN     |CRV Enable Bit
  |        |          |0 = CRV Disabled.
  |        |          |1 = CRV Enabled.
  |[1]     |CRVSSEL   |CRV Source Voltage Selection
  |        |          |0 = VDD is selected as CRV source voltage.
  |        |          |1 = The reference voltage (VREF) is selected as CRV source voltage.
  |[3:2]   |SPEED0    |Analog Comparator 0 Speed Control
  |        |          |00 = slow speed, propagation delay : 4.5us, 1.2uA (typ.)
  |        |          |01 = slow+ speed, propagation delay : 2.0us, 3uA (typ.)
  |        |          |10 = fast speed, propagation delay : 0.6us, 10uA (typ.)
  |        |          |11 = fast+ speed, propagation delay : 0.2us, 75uA (typ.)
  |[4]     |POE0      |Analog Comparator 0 Polarity Output Enable
  |        |          |0 = ACMP0 outputs directly.
  |        |          |1 = ACMP0 outputs inversely.
  |[5]     |POE1      |Analog Comparator 1 Polarity Output Enable
  |        |          |0 = ACMP1 output directly.
  |        |          |1 = ACMP1 output inversely.
  |[7:6]   |SPEED1    |Analog Comparator 1 Speed Control
  |        |          |00 = slow speed, propagation delay : 4.5us, 1.2uA (typ.)
  |        |          |01 = slow+ speed, propagation delay : 2.0us, 3uA (typ.)
  |        |          |10 = fast speed, propagation delay : 0.6us, 10uA (typ.)
  |        |          |11 = fast+ speed, propagation delay : 0.2us, 75uA (typ.)
 */

/**
  @addtogroup SFR_ACMPCR2_MACRO Bit Macro Functions
  Bit Macro Functions of ACMPCR2
  @{ */

#define set_ACMPCR2_CRVEN        ACMPCR2 |= 0x01 /*!<Set ACMPCR2.CRVEN              */
#define set_ACMPCR2_CRVSSEL      ACMPCR2 |= 0x02 /*!<Set ACMPCR2.CRVSSEL            */

#define set_ACMPCR2_POE0         ACMPCR2 |= 0x10 /*!<Set ACMPCR2.POE0               */
#define set_ACMPCR2_POE1         ACMPCR2 |= 0x20 /*!<Set ACMPCR2.POE1               */


#define clr_ACMPCR2_CRVEN        ACMPCR2 &=~0x01 /*!<Clear ACMPCR2.CRVEN            */
#define clr_ACMPCR2_CRVSSEL      ACMPCR2 &=~0x02 /*!<Clear ACMPCR2.CRVSSEL          */

#define clr_ACMPCR2_POE0         ACMPCR2 &=~0x10 /*!<Clear ACMPCR2.POE0             */
#define clr_ACMPCR2_POE1         ACMPCR2 &=~0x20 /*!<Clear ACMPCR2.POE1             */


/**@}*/ /* end of SFR_ACMPCR2_MACRO group */
/**@}*/ /* end of SFR_ACMPCR2 group */

/**
   @addtogroup SFR_P3S P3S
   Special Function Register P3S
   @{ */

/**
  @var P3S
  Address: ACH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup SFR_P3S_MACRO Bit Macro Functions
  Bit Macro Functions of P3S
  @{ */





/**@}*/ /* end of SFR_P3S_MACRO group */
/**@}*/ /* end of SFR_P3S group */

/**
   @addtogroup SFR_P3SR P3SR
   Special Function Register P3SR
   @{ */

/**
  @var P3SR
  Address: ADH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P3SR_MACRO Bit Macro Functions
  Bit Macro Functions of P3SR
  @{ */





/**@}*/ /* end of SFR_P3SR_MACRO group */
/**@}*/ /* end of SFR_P3SR group */

/**
   @addtogroup SFR_P5SR P5SR
   Special Function Register P5SR
   @{ */

/**
  @var P5SR
  Address: AEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P5SR_MACRO Bit Macro Functions
  Bit Macro Functions of P5SR
  @{ */





/**@}*/ /* end of SFR_P5SR_MACRO group */
/**@}*/ /* end of SFR_P5SR group */

/**
   @addtogroup SFR_PIPS7 PIPS7
   Special Function Register PIPS7
   @{ */

/**
  @var PIPS7
  Address: AFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PIPS7_MACRO Bit Macro Functions
  Bit Macro Functions of PIPS7
  @{ */







/**@}*/ /* end of SFR_PIPS7_MACRO group */
/**@}*/ /* end of SFR_PIPS7 group */

/**
   @addtogroup SFR_P3 P3
   Special Function Register P3
   @{ */

/**
  @var P3
  Address: B0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P3_MACRO Bit Macro Functions
  Bit Macro Functions of P3
  @{ */





/**@}*/ /* end of SFR_P3_MACRO group */
/**@}*/ /* end of SFR_P3 group */

/**
   @addtogroup SFR_P0M1 P0M1
   Special Function Register P0M1
   @{ */

/**
  @var P0M1
  Address: B1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */
sfr P0M1                       =0xB1;
/**
  @addtogroup SFR_P0M1_MACRO Bit Macro Functions
  Bit Macro Functions of P0M1
  @{ */


/**@}*/ /* end of SFR_P0M1_MACRO group */
/**@}*/ /* end of SFR_P0M1 group */

/**
   @addtogroup SFR_P0M2 P0M2
   Special Function Register P0M2
   @{ */

/**
  @var P0M2
  Address: B2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P0M2                       =0xB2;
/**
  @addtogroup SFR_P0M2_MACRO Bit Macro Functions
  Bit Macro Functions of P0M2
  @{ */


/**@}*/ /* end of SFR_P0M2_MACRO group */
/**@}*/ /* end of SFR_P0M2 group */

/**
   @addtogroup SFR_P1M1 P1M1
   Special Function Register P1M1
   @{ */

/**
  @var P1M1
  Address: B3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */
sfr P1M1                       =0xB3;
/**
  @addtogroup SFR_P1M1_MACRO Bit Macro Functions
  Bit Macro Functions of P1M1
  @{ */

/**@}*/ /* end of SFR_P1M1_MACRO group */
/**@}*/ /* end of SFR_P1M1 group */

/**
   @addtogroup SFR_P1M2 P1M2
   Special Function Register P1M2
   @{ */

/**
  @var P1M2
  Address: B4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P1M2                       =0xB4;
/**
  @addtogroup SFR_P1M2_MACRO Bit Macro Functions
  Bit Macro Functions of P1M2
  @{ */


/**@}*/ /* end of SFR_P1M2_MACRO group */
/**@}*/ /* end of SFR_P1M2 group */

/**
   @addtogroup SFR_P2M1 P2M1
   Special Function Register P2M1
   @{ */

/**
  @var P2M1
  Address: B5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */
sfr P2M1                       =0xB5;
/**
  @addtogroup SFR_P2M1_MACRO Bit Macro Functions
  Bit Macro Functions of P2M1
  @{ */


/**@}*/ /* end of SFR_P2M1_MACRO group */
/**@}*/ /* end of SFR_P2M1 group */

/**
   @addtogroup SFR_P2M2 P2M2
   Special Function Register P2M2
   @{ */

/**
  @var P2M2
  Address: B6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P2M2                       =0xB6;
/**
  @addtogroup SFR_P2M2_MACRO Bit Macro Functions
  Bit Macro Functions of P2M2
  @{ */


/**@}*/ /* end of SFR_P2M2_MACRO group */
/**@}*/ /* end of SFR_P2M2 group */



/**
   @addtogroup SFR_PWM0INTC PWM0INTC
   Special Function Register PWM0INTC
   @{ */

/**
  @var PWM0INTC
  Address: B7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */
sfr PWM0INTC                   =0xB7;
/**
  @addtogroup SFR_PWM0INTC_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0INTC
  @{ */


/**@}*/ /* end of SFR_PWM0INTC_MACRO group */
/**@}*/ /* end of SFR_PWM0INTC group */

/**
   @addtogroup SFR_IP IP
   Special Function Register IP
   @{ */

/**
  @var IP
  Address: B8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0       |External interrupt 0 priority low bit
  |[1]     |PT0       |Timer 0 interrupt priority low bit
  |[2]     |PX1       |External interrupt 1 priority low bit
  |[3]     |PT1       |Timer 1 interrupt priority low bit
  |[4]     |PS        |Serial port 0 interrupt priority low bit
  |[5]     |PBOD      |Brown-out detection interrupt priority low bit
  |[6]     |PADC      |ADC interrupt priority low bit
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_IP_MACRO Bit Macro Functions
  Bit Macro Functions of IP
  @{ */

#define set_IP_PX0               IP |= 0x01 /*!<Set IP.PX0                     */
#define set_IP_PT0               IP |= 0x02 /*!<Set IP.PT0                     */
#define set_IP_PX1               IP |= 0x04 /*!<Set IP.PX1                     */
#define set_IP_PT1               IP |= 0x08 /*!<Set IP.PT1                     */
#define set_IP_PS                IP |= 0x10 /*!<Set IP.PS                      */
#define set_IP_PBOD              IP |= 0x20 /*!<Set IP.PBOD                    */
#define set_IP_PADC              IP |= 0x40 /*!<Set IP.PADC                    */

#define clr_IP_PX0               IP &=~0x01 /*!<Clear IP.PX0                   */
#define clr_IP_PT0               IP &=~0x02 /*!<Clear IP.PT0                   */
#define clr_IP_PX1               IP &=~0x04 /*!<Clear IP.PX1                   */
#define clr_IP_PT1               IP &=~0x08 /*!<Clear IP.PT1                   */
#define clr_IP_PS                IP &=~0x10 /*!<Clear IP.PS                    */
#define clr_IP_PBOD              IP &=~0x20 /*!<Clear IP.PBOD                  */
#define clr_IP_PADC              IP &=~0x40 /*!<Clear IP.PADC                  */

/**@}*/ /* end of SFR_IP_MACRO group */
/**@}*/ /* end of SFR_IP group */

/**
   @addtogroup SFR_P4M1 P4M1
   Special Function Register P4M1
   @{ */

/**
  @var P4M1
  Address: B9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */
sfr P4M1                       =0xB9;
/**
  @addtogroup SFR_P4M1_MACRO Bit Macro Functions
  Bit Macro Functions of P4M1
  @{ */


/**@}*/ /* end of SFR_P4M1_MACRO group */
/**@}*/ /* end of SFR_P4M1 group */

/**
   @addtogroup SFR_P4M2 P4M2
   Special Function Register P4M2
   @{ */

/**
  @var P4M2
  Address: BAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P4M2                       =0xBA;
/**
  @addtogroup SFR_P4M2_MACRO Bit Macro Functions
  Bit Macro Functions of P4M2
  @{ */


/**@}*/ /* end of SFR_P4M2_MACRO group */
/**@}*/ /* end of SFR_P4M2 group */

/**
   @addtogroup SFR_P4S P4S
   Special Function Register P4S
   @{ */

/**
  @var P4S
  Address: BBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */
sfr P4S                        =0xBB;
/**
  @addtogroup SFR_P4S_MACRO Bit Macro Functions
  Bit Macro Functions of P4S
  @{ */

/**@}*/ /* end of SFR_P4S_MACRO group */
/**@}*/ /* end of SFR_P4S group */

/**
   @addtogroup SFR_P4SR P4SR
   Special Function Register P4SR
   @{ */

/**
  @var P4SR
  Address: BCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */
sfr P4SR                       =0xBC;
/**
  @addtogroup SFR_P4SR_MACRO Bit Macro Functions
  Bit Macro Functions of P4SR
  @{ */

/**@}*/ /* end of SFR_P4SR_MACRO group */
/**@}*/ /* end of SFR_P4SR group */

/**
   @addtogroup SFR_P5M1 P5M1
   Special Function Register P5M1
   @{ */

/**
  @var P5M1
  Address: BDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */
sfr P5M1                       =0xBD;
/**
  @addtogroup SFR_P5M1_MACRO Bit Macro Functions
  Bit Macro Functions of P5M1
  @{ */

/**@}*/ /* end of SFR_P5M1_MACRO group */
/**@}*/ /* end of SFR_P5M1 group */

/**
   @addtogroup SFR_P5M2 P5M2
   Special Function Register P5M2
   @{ */

/**
  @var P5M2
  Address: BEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P5M2                       =0xBE;
/**
  @addtogroup SFR_P5M2_MACRO Bit Macro Functions
  Bit Macro Functions of P5M2
  @{ */

/**@}*/ /* end of SFR_P5M2_MACRO group */
/**@}*/ /* end of SFR_P5M2 group */

/**
   @addtogroup SFR_P5S P5S
   Special Function Register P5S
   @{ */

/**
  @var P5S
  Address: BFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */
sfr P5S                        =0xBF;
/**
  @addtogroup SFR_P5S_MACRO Bit Macro Functions
  Bit Macro Functions of P5S
  @{ */

/**@}*/ /* end of SFR_P5S_MACRO group */
/**@}*/ /* end of SFR_P5S group */

/**
   @addtogroup SFR_I2C0CON I2C0CON
   Special Function Register I2C0CON
   @{ */

/**
  @var I2C0CON
  Address: C0H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C0CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0CON
  @{ */

#define set_I2C0CON_AA           I2C0CON |= 0x04 /*!<Set I2C0CON.AA                 */
#define set_I2C0CON_SI           I2C0CON |= 0x08 /*!<Set I2C0CON.SI                 */
#define set_I2C0CON_STO          I2C0CON |= 0x10 /*!<Set I2C0CON.STO                */
#define set_I2C0CON_STA          I2C0CON |= 0x20 /*!<Set I2C0CON.STA                */
#define set_I2C0CON_I2CEN        I2C0CON |= 0x40 /*!<Set I2C0CON.I2CEN              */
#define set_I2C0CON_I            I2C0CON |= 0x80 /*!<Set I2C0CON.I                  */

#define clr_I2C0CON_AA           I2C0CON &=~0x04 /*!<Clear I2C0CON.AA               */
#define clr_I2C0CON_SI           I2C0CON &=~0x08 /*!<Clear I2C0CON.SI               */
#define clr_I2C0CON_STO          I2C0CON &=~0x10 /*!<Clear I2C0CON.STO              */
#define clr_I2C0CON_STA          I2C0CON &=~0x20 /*!<Clear I2C0CON.STA              */
#define clr_I2C0CON_I2CEN        I2C0CON &=~0x40 /*!<Clear I2C0CON.I2CEN            */
#define clr_I2C0CON_I            I2C0CON &=~0x80 /*!<Clear I2C0CON.I                */

/**@}*/ /* end of SFR_I2C0CON_MACRO group */
/**@}*/ /* end of SFR_I2C0CON group */

/**
   @addtogroup SFR_CKDIV CKDIV
   Special Function Register CKDIV
   @{ */

/**
  @var CKDIV
  Address: C1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CKDIV[7:0]|Clock Divider
  |        |          |The system clock frequency FSYS follows the equation below according
  |        |          |to CKDIV value.
  |        |          |, while CKDIV = 00H, and
  |        |          |, while CKDIV = 01H to FFH.
 */
sfr CKDIV                      =0xC1;
/**
  @addtogroup SFR_CKDIV_MACRO Bit Macro Functions
  Bit Macro Functions of CKDIV
  @{ */


/**@}*/ /* end of SFR_CKDIV_MACRO group */
/**@}*/ /* end of SFR_CKDIV group */

/**
   @addtogroup SFR_P3M1 P3M1
   Special Function Register P3M1
   @{ */

/**
  @var P3M1
  Address: C2H, Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

sfr P3M1                       =0xC2;

/**
  @addtogroup SFR_P3M1_MACRO Bit Macro Functions
  Bit Macro Functions of P3M1
  @{ */



/**@}*/ /* end of SFR_P3M1_MACRO group */
/**@}*/ /* end of SFR_P3M1 group */

/**
   @addtogroup SFR_P3M2 P3M2
   Special Function Register P3M2
   @{ */

/**
  @var P3M2
  Address: C3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */
sfr P3M2 = 0xC3;
/**
  @addtogroup SFR_P3M2_MACRO Bit Macro Functions
  Bit Macro Functions of P3M2
  @{ */

/**@}*/ /* end of SFR_P3M2_MACRO group */
/**@}*/ /* end of SFR_P3M2 group */

/**
   @addtogroup SFR_PWM0C4H PWM0C4H
   Special Function Register PWM0C4H
   @{ */

/**
  @var PWM0C4H
  Address: C4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */
sfr PWM0C4H                    =0xC4;
/**
  @addtogroup SFR_PWM0C4H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C4H
  @{ */

/**@}*/ /* end of SFR_PWM0C4H_MACRO group */
/**@}*/ /* end of SFR_PWM0C4H group */

/**
   @addtogroup SFR_PWM0C5H PWM0C5H
   Special Function Register PWM0C5H
   @{ */

/**
  @var PWM0C5H
  Address: C5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */
sfr PWM0C5H                    =0xC5;
/**
  @addtogroup SFR_PWM0C5H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C5H
  @{ */

/**@}*/ /* end of SFR_PWM0C5H_MACRO group */
/**@}*/ /* end of SFR_PWM0C5H group */


/**
   @addtogroup SFR_AUXR1 AUXR1
   Special Function Register AUXR1
   @{ */

/**
  @var AUXR1
  Address: C9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UART0PX   |Serial Port 0 RX/TX Pin Exchange
  |        |          |0 = Assign UART0 RXD to multiple I/O pin RXD
  |        |          |UART0 TXD to multiple I/O pin TXD
  |        |          |1 = Assign UART0 RXD to multiple I/O pin TXD
  |        |          |UART0 TXD to multiple I/O pin RXD
  |        |          |Note:
  |        |          |that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[1]     |UART1PX   |Serial Port 1 RX/TX Pin Exchange
  |        |          |0 = Assign UART1 RXD to multiple I/O pin RXD
  |        |          |UART1 TXD to multiple I/O pin TXD
  |        |          |1 = Assign UART1 RXD to multiple I/O pin TXD
  |        |          |UART1 TXD to multiple I/O pin RXD
  |        |          |Note:
  |        |          |that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[2]     |UART2PX   |Serial Port 2 RX (SMC0 DATA) /TX (SMC0 CLK) Pin Exchange
  |        |          |0 = Assign UART2 RXD (SMC0 DATA) to multiple I/O pin RXD
  |        |          |UART2 TXD (SMC CLK) to multiple I/O pin TXD
  |        |          |1 = Assign UART2 RXD (SMC0 DATA) to multiple I/O pin TXD
  |        |          |UART2 TXD (SMC CLK) to multiple I/O pin RXD
  |        |          |Note : that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[3]     |UART3PX   |Serial Port 3 RX (SMC1 DATA) /TX (SMC1 CLK) Pin Exchange
  |        |          |0 = Assign UART3 RXD (SMC1 DATA) to multiple I/O pin RXD
  |        |          |UART3 TXD (SMC CLK) to multiple I/O pin TXD
  |        |          |1 = Assign UART3 RXD (SMC1 DATA) to multiple I/O pin TXD
  |        |          |UART3 TXD (SMC CLK) to multiple I/O pin RXD
  |        |          |Note : that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_AUXR1_MACRO Bit Macro Functions
  Bit Macro Functions of AUXR1
  @{ */

#define set_AUXR1_UART0PX        AUXR1 |= 0x01 /*!<Set AUXR1.UART0PX              */
#define set_AUXR1_UART1PX        AUXR1 |= 0x02 /*!<Set AUXR1.UART1PX              */
#define set_AUXR1_UART2PX        AUXR1 |= 0x04 /*!<Set AUXR1.UART2PX              */
#define set_AUXR1_UART3PX        AUXR1 |= 0x08 /*!<Set AUXR1.UART3PX              */

#define clr_AUXR1_UART0PX        AUXR1 &=~0x01 /*!<Clear AUXR1.UART0PX            */
#define clr_AUXR1_UART1PX        AUXR1 &=~0x02 /*!<Clear AUXR1.UART1PX            */
#define clr_AUXR1_UART2PX        AUXR1 &=~0x04 /*!<Clear AUXR1.UART2PX            */
#define clr_AUXR1_UART3PX        AUXR1 &=~0x08 /*!<Clear AUXR1.UART3PX            */

/**@}*/ /* end of SFR_AUXR1_MACRO group */
/**@}*/ /* end of SFR_AUXR1 group */

/**
   @addtogroup SFR_PWM0C4L PWM0C4L
   Special Function Register PWM0C4L
   @{ */

/**
  @var PWM0C4L
  Address: CCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C4L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C4L
  @{ */





/**@}*/ /* end of SFR_PWM0C4L_MACRO group */
/**@}*/ /* end of SFR_PWM0C4L group */

/**
   @addtogroup SFR_PWM0C5L PWM0C5L
   Special Function Register PWM0C5L
   @{ */

/**
  @var PWM0C5L
  Address: CDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C5L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C5L
  @{ */





/**@}*/ /* end of SFR_PWM0C5L_MACRO group */
/**@}*/ /* end of SFR_PWM0C5L group */

/**
   @addtogroup SFR_AINDIDS0 AINDIDS0
   Special Function Register AINDIDS0
   @{ */

/**
  @var AINDIDS0
  Address: CEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |AINnDIDS  |ADC Channel Digital Input Disable
  |        |          |0 = Enabled digital input at ADC channel n.
  |        |          |1 = Disabled digital input at ADC channel n . ADC channel n is read
  |        |          |always 0.
 */

/**
  @addtogroup SFR_AINDIDS0_MACRO Bit Macro Functions
  Bit Macro Functions of AINDIDS0
  @{ */





/**@}*/ /* end of SFR_AINDIDS0_MACRO group */
/**@}*/ /* end of SFR_AINDIDS0 group */

/**
   @addtogroup SFR_PWM0PH PWM0PH
   Special Function Register PWM0PH
   @{ */

/**
  @var PWM0PH
  Address: D1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM0PH_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0PH
  @{ */





/**@}*/ /* end of SFR_PWM0PH_MACRO group */
/**@}*/ /* end of SFR_PWM0PH group */

/**
   @addtogroup SFR_PWM0C0H PWM0C0H
   Special Function Register PWM0C0H
   @{ */

/**
  @var PWM0C0H
  Address: D2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C0H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C0H
  @{ */





/**@}*/ /* end of SFR_PWM0C0H_MACRO group */
/**@}*/ /* end of SFR_PWM0C0H group */

/**
   @addtogroup SFR_PWM0C1H PWM0C1H
   Special Function Register PWM0C1H
   @{ */

/**
  @var PWM0C1H
  Address: D3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C1H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C1H
  @{ */





/**@}*/ /* end of SFR_PWM0C1H_MACRO group */
/**@}*/ /* end of SFR_PWM0C1H group */

/**
   @addtogroup SFR_PWM0C2H PWM0C2H
   Special Function Register PWM0C2H
   @{ */

/**
  @var PWM0C2H
  Address: D4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C2H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C2H
  @{ */





/**@}*/ /* end of SFR_PWM0C2H_MACRO group */
/**@}*/ /* end of SFR_PWM0C2H group */

/**
   @addtogroup SFR_PWM0C3H PWM0C3H
   Special Function Register PWM0C3H
   @{ */

/**
  @var PWM0C3H
  Address: D5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C3H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C3H
  @{ */





/**@}*/ /* end of SFR_PWM0C3H_MACRO group */
/**@}*/ /* end of SFR_PWM0C3H group */

/**
   @addtogroup SFR_PWM0NP PWM0NP
   Special Function Register PWM0NP
   @{ */

/**
  @var PWM0NP
  Address: D6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PNPn      |PWMn Negative Polarity Output Enable
  |        |          |0 = PWMn signal outputs directly on PWMn pin.
  |        |          |1 = PWMn signal outputs inversely on PWMn pin.
 */

/**
  @addtogroup SFR_PWM0NP_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0NP
  @{ */





/**@}*/ /* end of SFR_PWM0NP_MACRO group */
/**@}*/ /* end of SFR_PWM0NP group */

/**
   @addtogroup SFR_PWM0FBD PWM0FBD
   Special Function Register PWM0FBD
   @{ */

/**
  @var PWM0FBD
  Address: D7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |FBDn      |PWMn Fault Brake Data
  |        |          |0 = PWMn signal is overwritten by 0 once Fault Brake asserted.
  |        |          |1 = PWMn signal is overwritten by 1 once Fault Brake asserted.
  |[6]     |FBINLS    |PWM_BRAKE Pin Input Level Selection
  |        |          |0 = Falling edge.
  |        |          |1 = Rising edge.
  |[7]     |FBF       |Fault Brake Flag
  |        |          |This flag is set when FBINEN is set as 1 and FB pin detects an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection. This bit is cleared by
  |        |          |software. After FBF is cleared, Fault Brake data output will not be
  |        |          |released until PWM0RUN (PWM0CON0.7) is set.
 */

/**
  @addtogroup SFR_PWM0FBD_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0FBD
  @{ */


#define set_PWM0FBD_FBINLS       PWM0FBD |= 0x40 /*!<Set PWM0FBD.FBINLS             */
#define set_PWM0FBD_FBF          PWM0FBD |= 0x80 /*!<Set PWM0FBD.FBF                */


#define clr_PWM0FBD_FBINLS       PWM0FBD &=~0x40 /*!<Clear PWM0FBD.FBINLS           */
#define clr_PWM0FBD_FBF          PWM0FBD &=~0x80 /*!<Clear PWM0FBD.FBF              */

/**@}*/ /* end of SFR_PWM0FBD_MACRO group */
/**@}*/ /* end of SFR_PWM0FBD group */

/**
   @addtogroup SFR_P4 P4
   Special Function Register P4
   @{ */

/**
  @var P4
  Address: D8H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P4_MACRO Bit Macro Functions
  Bit Macro Functions of P4
  @{ */





/**@}*/ /* end of SFR_P4_MACRO group */
/**@}*/ /* end of SFR_P4 group */

/**
   @addtogroup SFR_PWM0PL PWM0PL
   Special Function Register PWM0PL
   @{ */

/**
  @var PWM0PL
  Address: D9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM0PL_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0PL
  @{ */





/**@}*/ /* end of SFR_PWM0PL_MACRO group */
/**@}*/ /* end of SFR_PWM0PL group */

/**
   @addtogroup SFR_PWM0C0L PWM0C0L
   Special Function Register PWM0C0L
   @{ */

/**
  @var PWM0C0L
  Address: DAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C0L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C0L
  @{ */





/**@}*/ /* end of SFR_PWM0C0L_MACRO group */
/**@}*/ /* end of SFR_PWM0C0L group */

/**
   @addtogroup SFR_PWM0C1L PWM0C1L
   Special Function Register PWM0C1L
   @{ */

/**
  @var PWM0C1L
  Address: DBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C1L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C1L
  @{ */





/**@}*/ /* end of SFR_PWM0C1L_MACRO group */
/**@}*/ /* end of SFR_PWM0C1L group */

/**
   @addtogroup SFR_PWM0C2L PWM0C2L
   Special Function Register PWM0C2L
   @{ */

/**
  @var PWM0C2L
  Address: DCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C2L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C2L
  @{ */





/**@}*/ /* end of SFR_PWM0C2L_MACRO group */
/**@}*/ /* end of SFR_PWM0C2L group */

/**
   @addtogroup SFR_PWM0C3L PWM0C3L
   Special Function Register PWM0C3L
   @{ */

/**
  @var PWM0C3L
  Address: DDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM0C3L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0C3L
  @{ */





/**@}*/ /* end of SFR_PWM0C3L_MACRO group */
/**@}*/ /* end of SFR_PWM0C3L group */

/**
   @addtogroup SFR_PWM0CON1 PWM0CON1
   Special Function Register PWM0CON1
   @{ */

/**
  @var PWM0CON1
  Address: DFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup SFR_PWM0CON1_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0CON1
  @{ */


#define set_PWM0CON1_FBINEN      PWM0CON1 |= 0x08 /*!<Set PWM0CON1.FBINEN            */
#define set_PWM0CON1_PWMTYP      PWM0CON1 |= 0x10 /*!<Set PWM0CON1.PWMTYP            */
#define set_PWM0CON1_GP          PWM0CON1 |= 0x20 /*!<Set PWM0CON1.GP                */



#define clr_PWM0CON1_FBINEN      PWM0CON1 &=~0x08 /*!<Clear PWM0CON1.FBINEN          */
#define clr_PWM0CON1_PWMTYP      PWM0CON1 &=~0x10 /*!<Clear PWM0CON1.PWMTYP          */
#define clr_PWM0CON1_GP          PWM0CON1 &=~0x20 /*!<Clear PWM0CON1.GP              */


/**@}*/ /* end of SFR_PWM0CON1_MACRO group */
/**@}*/ /* end of SFR_PWM0CON1 group */

/**
   @addtogroup SFR_CAPCON0 CAPCON0
   Special Function Register CAPCON0
   @{ */

/**
  @var CAPCON0
  Address: E1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CAPF0     |Input Capture 0 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 0
  |        |          |occurs. This bit should cleared by software.
  |[1]     |CAPF1     |Input Capture 1 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 1
  |        |          |occurs. This bit should cleared by software.
  |[2]     |CAPF2     |Input Capture 2 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 2
  |        |          |occurs. This bit should cleared by software.
  |[3]     |Reserved  |Reserved
  |[4]     |CAPEN0    |Input Capture 0 Enable
  |        |          |0 = Input capture channel 0 Disabled.
  |        |          |1 = Input capture channel 0 Enabled.
  |[5]     |CAPEN1    |Input Capture 1 Enable
  |        |          |0 = Input capture channel 1 Disabled.
  |        |          |1 = Input capture channel 1 Enabled.
  |[6]     |CAPEN2    |Input Capture 2 Enable
  |        |          |0 = Input capture channel 2 Disabled.
  |        |          |1 = Input capture channel 2 Enabled.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_CAPCON0_MACRO Bit Macro Functions
  Bit Macro Functions of CAPCON0
  @{ */

#define set_CAPCON0_CAPF0        CAPCON0 |= 0x01 /*!<Set CAPCON0.CAPF0              */
#define set_CAPCON0_CAPF1        CAPCON0 |= 0x02 /*!<Set CAPCON0.CAPF1              */
#define set_CAPCON0_CAPF2        CAPCON0 |= 0x04 /*!<Set CAPCON0.CAPF2              */
#define set_CAPCON0_CAPEN0       CAPCON0 |= 0x10 /*!<Set CAPCON0.CAPEN0             */
#define set_CAPCON0_CAPEN1       CAPCON0 |= 0x20 /*!<Set CAPCON0.CAPEN1             */
#define set_CAPCON0_CAPEN2       CAPCON0 |= 0x40 /*!<Set CAPCON0.CAPEN2             */

#define clr_CAPCON0_CAPF0        CAPCON0 &=~0x01 /*!<Clear CAPCON0.CAPF0            */
#define clr_CAPCON0_CAPF1        CAPCON0 &=~0x02 /*!<Clear CAPCON0.CAPF1            */
#define clr_CAPCON0_CAPF2        CAPCON0 &=~0x04 /*!<Clear CAPCON0.CAPF2            */
#define clr_CAPCON0_CAPEN0       CAPCON0 &=~0x10 /*!<Clear CAPCON0.CAPEN0           */
#define clr_CAPCON0_CAPEN1       CAPCON0 &=~0x20 /*!<Clear CAPCON0.CAPEN1           */
#define clr_CAPCON0_CAPEN2       CAPCON0 &=~0x40 /*!<Clear CAPCON0.CAPEN2           */

/**@}*/ /* end of SFR_CAPCON0_MACRO group */
/**@}*/ /* end of SFR_CAPCON0 group */

/**
   @addtogroup SFR_CAPCON1 CAPCON1
   Special Function Register CAPCON1
   @{ */

/**
  @var CAPCON1
  Address: E2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |CAP0LS[1:0]|Input Capture 0 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[3:2]   |CAP1LS[1:0]|Input Capture 1 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[5:4]   |CAP2LS[1:0]|Input Capture 2 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_CAPCON1_MACRO Bit Macro Functions
  Bit Macro Functions of CAPCON1
  @{ */









/**@}*/ /* end of SFR_CAPCON1_MACRO group */
/**@}*/ /* end of SFR_CAPCON1 group */

/**
   @addtogroup SFR_CAPCON2 CAPCON2
   Special Function Register CAPCON2
   @{ */

/**
  @var CAPCON2
  Address: E3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ENF0      |Enable Noise Filer on Input Capture 0
  |        |          |0 = Noise filter on input capture channel 0 Disabled.
  |        |          |1 = Noise filter on input capture channel 0 Enabled.
  |[5]     |ENF1      |Enable Noise Filer on Input Capture 1
  |        |          |0 = Noise filter on input capture channel 1 Disabled.
  |        |          |1 = Noise filter on input capture channel 1 Enabled.
  |[6]     |ENF2      |Enable Noise Filer on Input Capture 2
  |        |          |0 = Noise filter on input capture channel 2 Disabled.
  |        |          |1 = Noise filter on input capture channel 2 Enabled.
 */

/**
  @addtogroup SFR_CAPCON2_MACRO Bit Macro Functions
  Bit Macro Functions of CAPCON2
  @{ */

#define set_CAPCON2_ENF0         CAPCON2 |= 0x10 /*!<Set CAPCON2.ENF0               */
#define set_CAPCON2_ENF1         CAPCON2 |= 0x20 /*!<Set CAPCON2.ENF1               */
#define set_CAPCON2_ENF2         CAPCON2 |= 0x40 /*!<Set CAPCON2.ENF2               */

#define clr_CAPCON2_ENF0         CAPCON2 &=~0x10 /*!<Clear CAPCON2.ENF0             */
#define clr_CAPCON2_ENF1         CAPCON2 &=~0x20 /*!<Clear CAPCON2.ENF1             */
#define clr_CAPCON2_ENF2         CAPCON2 &=~0x40 /*!<Clear CAPCON2.ENF2             */

/**@}*/ /* end of SFR_CAPCON2_MACRO group */
/**@}*/ /* end of SFR_CAPCON2 group */

/**
   @addtogroup SFR_C0L C0L
   Special Function Register C0L
   @{ */

/**
  @var C0L
  Address: E4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C0L_MACRO Bit Macro Functions
  Bit Macro Functions of C0L
  @{ */





/**@}*/ /* end of SFR_C0L_MACRO group */
/**@}*/ /* end of SFR_C0L group */

/**
   @addtogroup SFR_C0H C0H
   Special Function Register C0H
   @{ */

/**
  @var C0H
  Address: E5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C0H_MACRO Bit Macro Functions
  Bit Macro Functions of C0H
  @{ */





/**@}*/ /* end of SFR_C0H_MACRO group */
/**@}*/ /* end of SFR_C0H group */

/**
   @addtogroup SFR_C1L C1L
   Special Function Register C1L
   @{ */

/**
  @var C1L
  Address: E6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C1L_MACRO Bit Macro Functions
  Bit Macro Functions of C1L
  @{ */





/**@}*/ /* end of SFR_C1L_MACRO group */
/**@}*/ /* end of SFR_C1L group */

/**
   @addtogroup SFR_C1H C1H
   Special Function Register C1H
   @{ */

/**
  @var C1H
  Address: E7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C1H_MACRO Bit Macro Functions
  Bit Macro Functions of C1H
  @{ */





/**@}*/ /* end of SFR_C1H_MACRO group */
/**@}*/ /* end of SFR_C1H group */

/**
   @addtogroup SFR_I2C1CON I2C1CON
   Special Function Register I2C1CON
   @{ */

/**
  @var I2C1CON
  Address: E8H, All pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C1CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1CON
  @{ */

#define set_I2C1CON_AA           I2C1CON |= 0x04 /*!<Set I2C1CON.AA                 */
#define set_I2C1CON_SI           I2C1CON |= 0x08 /*!<Set I2C1CON.SI                 */
#define set_I2C1CON_STO          I2C1CON |= 0x10 /*!<Set I2C1CON.STO                */
#define set_I2C1CON_STA          I2C1CON |= 0x20 /*!<Set I2C1CON.STA                */
#define set_I2C1CON_I2CEN        I2C1CON |= 0x40 /*!<Set I2C1CON.I2CEN              */
#define set_I2C1CON_I            I2C1CON |= 0x80 /*!<Set I2C1CON.I                  */

#define clr_I2C1CON_AA           I2C1CON &=~0x04 /*!<Clear I2C1CON.AA               */
#define clr_I2C1CON_SI           I2C1CON &=~0x08 /*!<Clear I2C1CON.SI               */
#define clr_I2C1CON_STO          I2C1CON &=~0x10 /*!<Clear I2C1CON.STO              */
#define clr_I2C1CON_STA          I2C1CON &=~0x20 /*!<Clear I2C1CON.STA              */
#define clr_I2C1CON_I2CEN        I2C1CON &=~0x40 /*!<Clear I2C1CON.I2CEN            */
#define clr_I2C1CON_I            I2C1CON &=~0x80 /*!<Clear I2C1CON.I                */

/**@}*/ /* end of SFR_I2C1CON_MACRO group */
/**@}*/ /* end of SFR_I2C1CON group */

/**
   @addtogroup SFR_PICON PICON
   Special Function Register PICON
   @{ */

/**
  @var PICON
  Address: E9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PIT0      |Pin Interrupt Channel 0 Type Select
  |        |          |This bit selects which type that pin interrupt channel 0 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[1]     |PIT1      |Pin Interrupt Channel 1 Type Select
  |        |          |This bit selects which type that pin interrupt channel 1 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[2]     |PIT2      |Pin Interrupt Channel 2 Type Select
  |        |          |This bit selects which type that pin interrupt channel 2 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[3]     |PIT3      |Pin Interrupt Channel 3 Type Select
  |        |          |This bit selects which type that pin interrupt channel 3 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[4]     |PIT4      |Pin Interrupt Channel 4 Type Select
  |        |          |This bit selects which type that pin interrupt channel 4 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[5]     |PIT5      |Pin Interrupt Channel 5 Type Select
  |        |          |This bit selects which type that pin interrupt channel 5 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[6]     |PIT6      |Pin Interrupt Channel 6 Type Select
  |        |          |This bit selects which type that pin interrupt channel 6 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[7]     |PIT7      |Pin Interrupt Channel 7 Type Select
  |        |          |This bit selects which type that pin interrupt channel 7 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
 */

/**
  @addtogroup SFR_PICON_MACRO Bit Macro Functions
  Bit Macro Functions of PICON
  @{ */

#define set_PICON_PIT0           PICON |= 0x01 /*!<Set PICON.PIT0                 */
#define set_PICON_PIT1           PICON |= 0x02 /*!<Set PICON.PIT1                 */
#define set_PICON_PIT2           PICON |= 0x04 /*!<Set PICON.PIT2                 */
#define set_PICON_PIT3           PICON |= 0x08 /*!<Set PICON.PIT3                 */
#define set_PICON_PIT4           PICON |= 0x10 /*!<Set PICON.PIT4                 */
#define set_PICON_PIT5           PICON |= 0x20 /*!<Set PICON.PIT5                 */
#define set_PICON_PIT6           PICON |= 0x40 /*!<Set PICON.PIT6                 */
#define set_PICON_PIT7           PICON |= 0x80 /*!<Set PICON.PIT7                 */

#define clr_PICON_PIT0           PICON &=~0x01 /*!<Clear PICON.PIT0               */
#define clr_PICON_PIT1           PICON &=~0x02 /*!<Clear PICON.PIT1               */
#define clr_PICON_PIT2           PICON &=~0x04 /*!<Clear PICON.PIT2               */
#define clr_PICON_PIT3           PICON &=~0x08 /*!<Clear PICON.PIT3               */
#define clr_PICON_PIT4           PICON &=~0x10 /*!<Clear PICON.PIT4               */
#define clr_PICON_PIT5           PICON &=~0x20 /*!<Clear PICON.PIT5               */
#define clr_PICON_PIT6           PICON &=~0x40 /*!<Clear PICON.PIT6               */
#define clr_PICON_PIT7           PICON &=~0x80 /*!<Clear PICON.PIT7               */

/**@}*/ /* end of SFR_PICON_MACRO group */
/**@}*/ /* end of SFR_PICON group */

/**
   @addtogroup SFR_PINEN PINEN
   Special Function Register PINEN
   @{ */

/**
  @var PINEN
  Address: EAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PINENn    |Pin Interrupt Channel n Negative Polarity Enable
  |        |          |This bit enables low-level/falling edge triggering pin interrupt
  |        |          |channel n. The level or edge triggered selection depends on each
  |        |          |control bit PITn in PICON.
  |        |          |0 = Low-level/falling edge detect Disabled.
  |        |          |1 = Low-level/falling edge detect Enabled.
 */

/**
  @addtogroup SFR_PINEN_MACRO Bit Macro Functions
  Bit Macro Functions of PINEN
  @{ */





/**@}*/ /* end of SFR_PINEN_MACRO group */
/**@}*/ /* end of SFR_PINEN group */

/**
   @addtogroup SFR_PIPEN PIPEN
   Special Function Register PIPEN
   @{ */

/**
  @var PIPEN
  Address: EBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PIPENn    |Pin Interrupt Channel n Positive Polarity Enable
  |        |          |This bit enables high-level/rising edge triggering pin interrupt
  |        |          |channel n. The level or edge triggered selection depends on each
  |        |          |control bit PITn in PICON.
  |        |          |0 = High-level/rising edge detect Disabled.
  |        |          |1 = High-level/rising edge detect Enabled.
 */

/**
  @addtogroup SFR_PIPEN_MACRO Bit Macro Functions
  Bit Macro Functions of PIPEN
  @{ */





/**@}*/ /* end of SFR_PIPEN_MACRO group */
/**@}*/ /* end of SFR_PIPEN group */

/**
   @addtogroup SFR_C2L C2L
   Special Function Register C2L
   @{ */

/**
  @var C2L
  Address: EDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C2L_MACRO Bit Macro Functions
  Bit Macro Functions of C2L
  @{ */





/**@}*/ /* end of SFR_C2L_MACRO group */
/**@}*/ /* end of SFR_C2L group */

/**
   @addtogroup SFR_C2H C2H
   Special Function Register C2H
   @{ */

/**
  @var C2H
  Address: EEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup SFR_C2H_MACRO Bit Macro Functions
  Bit Macro Functions of C2H
  @{ */





/**@}*/ /* end of SFR_C2H_MACRO group */
/**@}*/ /* end of SFR_C2H group */

/**
   @addtogroup SFR_SPI0CR1 SPI0CR1
   Special Function Register SPI0CR1
   @{ */

/**
  @var SPI0CR1
  Address: F3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPIS[1:0] |SPI Interval Time Selection Between Adjacent Bytes
  |        |          |SPIS[1:0] and CPHA select eight grades of SPI interval time selection
  |        |          |between adjacent bytes. As see Table 6.113 SPI Clock Suspend Interval
  |        |          |Select
  |        |          |SPIS[1:0] are valid only under Master mode (MSTR = 1).
  |[2]     |RXDMAEN   |SPI RX DMA Enable
  |        |          |This bit enables the SPI RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SPI RX operation.
  |        |          |0 = SPI RX DMA Disabled
  |        |          |1 = SPI RX DMA Enabled
  |[3]     |TXDMAEN   |SPI TX DMA Enable
  |        |          |This bit enables the SPI TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SPI TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |SPR[3:2]  |SPI Clock Rate Select
  |        |          |These two bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. Table 6.112
  |        |          |SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[6]     |SPSYNC    |SPI1 Master Clock Sync with SPI0 Master Clock. This bit is only valid in SPI0CR0
  |[7]     |Loop test(TA protect)|internal MISO connect to MOSI
 */

/**
  @addtogroup SFR_SPI0CR1_MACRO Bit Macro Functions
  Bit Macro Functions of SPI0CR1
  @{ */


#define set_SPI0CR1_RXDMAEN      SPI0CR1 |= 0x04 /*!<Set SPI0CR1.RXDMAEN            */
#define set_SPI0CR1_TXDMAEN      SPI0CR1 |= 0x08 /*!<Set SPI0CR1.TXDMAEN            */

#define set_SPI0CR1_SPSYNC       SPI0CR1 |= 0x40 /*!<Set SPI0CR1.SPSYNC             */
#define set_SPI0CR1_Loop test(TA protect) SPI0CR1 |= 0x80 /*!<Set SPI0CR1.Loop test(TA protect) */


#define clr_SPI0CR1_RXDMAEN      SPI0CR1 &=~0x04 /*!<Clear SPI0CR1.RXDMAEN          */
#define clr_SPI0CR1_TXDMAEN      SPI0CR1 &=~0x08 /*!<Clear SPI0CR1.TXDMAEN          */

#define clr_SPI0CR1_SPSYNC       SPI0CR1 &=~0x40 /*!<Clear SPI0CR1.SPSYNC           */
#define clr_SPI0CR1_Loop test(TA protect) SPI0CR1 &=~0x80 /*!<Clear SPI0CR1.Loop test(TA protect) */

/**@}*/ /* end of SFR_SPI0CR1_MACRO group */
/**@}*/ /* end of SFR_SPI0CR1 group */

/**
   @addtogroup SFR_S1CON S1CON
   Special Function Register S1CON
   @{ */

/**
  @var S1CON
  Address: F8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI_1      |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2_1 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[1]     |TI_1      |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[2]     |RB8_1     |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 1 Mode 2 or 3. In Mode 1, RB8_1 is the logic level of the
  |        |          |received stop bit. SM2_1 bit as logic 1 has restriction for exception.
  |        |          |RB8_1 is not used in Mode 0.
  |[3]     |TB8_1     |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |1 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN_1     |Receiving Enable
  |        |          |0 = Serial port 1 reception Disabled.
  |        |          |1 = Serial port 1 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN_1 = 1 and RI_1 = 0.
  |[5]     |SM2_1     |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 1 mode.
  |        |          |Mode 0:
  |        |          |No effect.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1_1     |Check with bit 7 description.
  |[7]     |SM0_1/FE_1|Serial Port 1 Mode Select
  |        |          |SMOD0_1 (T3CON.6) = 0:
  |        |          |See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
  |        |          |SMOD0_1 (T3CON.6) = 1:
  |        |          |SM0_1/FE_1 bit is used as frame error (FE) status flag. It is cleared
  |        |          |by software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */

/**
  @addtogroup SFR_S1CON_MACRO Bit Macro Functions
  Bit Macro Functions of S1CON
  @{ */

#define set_S1CON_RI_1           S1CON |= 0x01 /*!<Set S1CON.RI_1                 */
#define set_S1CON_TI_1           S1CON |= 0x02 /*!<Set S1CON.TI_1                 */
#define set_S1CON_RB8_1          S1CON |= 0x04 /*!<Set S1CON.RB8_1                */
#define set_S1CON_TB8_1          S1CON |= 0x08 /*!<Set S1CON.TB8_1                */
#define set_S1CON_REN_1          S1CON |= 0x10 /*!<Set S1CON.REN_1                */
#define set_S1CON_SM2_1          S1CON |= 0x20 /*!<Set S1CON.SM2_1                */
#define set_S1CON_SM1_1          S1CON |= 0x40 /*!<Set S1CON.SM1_1                */
#define set_S1CON_SM0_1/FE_1     S1CON |= 0x80 /*!<Set S1CON.SM0_1/FE_1           */

#define clr_S1CON_RI_1           S1CON &=~0x01 /*!<Clear S1CON.RI_1               */
#define clr_S1CON_TI_1           S1CON &=~0x02 /*!<Clear S1CON.TI_1               */
#define clr_S1CON_RB8_1          S1CON &=~0x04 /*!<Clear S1CON.RB8_1              */
#define clr_S1CON_TB8_1          S1CON &=~0x08 /*!<Clear S1CON.TB8_1              */
#define clr_S1CON_REN_1          S1CON &=~0x10 /*!<Clear S1CON.REN_1              */
#define clr_S1CON_SM2_1          S1CON &=~0x20 /*!<Clear S1CON.SM2_1              */
#define clr_S1CON_SM1_1          S1CON &=~0x40 /*!<Clear S1CON.SM1_1              */
#define clr_S1CON_SM0_1/FE_1     S1CON &=~0x80 /*!<Clear S1CON.SM0_1/FE_1         */

/**@}*/ /* end of SFR_S1CON_MACRO group */
/**@}*/ /* end of SFR_S1CON group */

/**
   @addtogroup SFR_PWM0DTEN PWM0DTEN
   Special Function Register PWM0DTEN
   @{ */

/**
  @var PWM0DTEN
  Address: F9H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PDT01EN   |PWM0/1 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM0/1 is under complementary mode.
  |        |          |0 = No delay on GP0/GP1 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP0/GP1 pair signals.
  |[1]     |PDT23EN   |PWM2/3 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM2/3 is under complementary mode.
  |        |          |0 = No delay on GP2/GP3 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP2/GP3 pair signals.
  |[2]     |PDT45EN   |PWM4/5 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM4/5 is under complementary mode.
  |        |          |0 = No delay on GP4/GP5 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP4/GP5 pair signals.
  |[3]     |0         |Reserved
  |[4]     |PWMnDTCNT.8|PWM Dead-Time Counter Bit 8
  |        |          |See PWMnDTCNT register.
  |[7:5]   |0         |Reserved
 */

/**
  @addtogroup SFR_PWM0DTEN_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0DTEN
  @{ */

#define set_PWM0DTEN_PDT01EN     PWM0DTEN |= 0x01 /*!<Set PWM0DTEN.PDT01EN           */
#define set_PWM0DTEN_PDT23EN     PWM0DTEN |= 0x02 /*!<Set PWM0DTEN.PDT23EN           */
#define set_PWM0DTEN_PDT45EN     PWM0DTEN |= 0x04 /*!<Set PWM0DTEN.PDT45EN           */
#define set_PWM0DTEN_0           PWM0DTEN |= 0x08 /*!<Set PWM0DTEN.0                 */
#define set_PWM0DTEN_PWMnDTCNT.8 PWM0DTEN |= 0x10 /*!<Set PWM0DTEN.PWMnDTCNT.8       */


#define clr_PWM0DTEN_PDT01EN     PWM0DTEN &=~0x01 /*!<Clear PWM0DTEN.PDT01EN         */
#define clr_PWM0DTEN_PDT23EN     PWM0DTEN &=~0x02 /*!<Clear PWM0DTEN.PDT23EN         */
#define clr_PWM0DTEN_PDT45EN     PWM0DTEN &=~0x04 /*!<Clear PWM0DTEN.PDT45EN         */
#define clr_PWM0DTEN_0           PWM0DTEN &=~0x08 /*!<Clear PWM0DTEN.0               */
#define clr_PWM0DTEN_PWMnDTCNT.8 PWM0DTEN &=~0x10 /*!<Clear PWM0DTEN.PWMnDTCNT.8     */


/**@}*/ /* end of SFR_PWM0DTEN_MACRO group */
/**@}*/ /* end of SFR_PWM0DTEN group */

/**
   @addtogroup SFR_PWM0DTCNT PWM0DTCNT
   Special Function Register PWM0DTCNT
   @{ */

/**
  @var PWM0DTCNT
  Address: FAH, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWM0DTCNT[7:0]|PWM Dead-Time Counter Low Byte
  |        |          |This 8-bit field combined with PWMnDTEN .4 forms a 9-bit PWM dead-time
  |        |          |counter PWM0DTCNT. This counter is valid only when PWM is under
  |        |          |complementary mode and the correspond PWMnDTEN bit for PWM pair is
  |        |          |set.
  |        |          |PWM dead-time = .
  |        |          |Note that user should not modify PWM0DTCNT during PWM run time.
 */

/**
  @addtogroup SFR_PWM0DTCNT_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0DTCNT
  @{ */





/**@}*/ /* end of SFR_PWM0DTCNT_MACRO group */
/**@}*/ /* end of SFR_PWM0DTCNT group */

/**
   @addtogroup SFR_PWM0MEN PWM0MEN
   Special Function Register PWM0MEN
   @{ */

/**
  @var PWM0MEN
  Address: FBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup SFR_PWM0MEN_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0MEN
  @{ */





/**@}*/ /* end of SFR_PWM0MEN_MACRO group */
/**@}*/ /* end of SFR_PWM0MEN group */

/**
   @addtogroup SFR_PWM0MD PWM0MD
   Special Function Register PWM0MD
   @{ */

/**
  @var PWM0MD
  Address: FCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup SFR_PWM0MD_MACRO Bit Macro Functions
  Bit Macro Functions of PWM0MD
  @{ */







/**@}*/ /* end of SFR_PWM0MD_MACRO group */
/**@}*/ /* end of SFR_PWM0MD group */

/**@}*/ /* end of SFR_PAGE1 group */


/**
 @addtogroup SFR_PAGE2 SFR Page 2
 @{ */

/**
   @addtogroup SFR_P0 P0
   Special Function Register P0
   @{ */

/**
  @var P0
  Address: 80H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P0_MACRO Bit Macro Functions
  Bit Macro Functions of P0
  @{ */





/**@}*/ /* end of SFR_P0_MACRO group */
/**@}*/ /* end of SFR_P0 group */

/**
   @addtogroup SFR_DPL DPL
   Special Function Register DPL
   @{ */

/**
  @var DPL
  Address: 82H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[7:0] |Data Pointer Low Byte
  |        |          |This is the low byte of 16-bit data pointer. DPL combined with DPH
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPL_MACRO Bit Macro Functions
  Bit Macro Functions of DPL
  @{ */





/**@}*/ /* end of SFR_DPL_MACRO group */
/**@}*/ /* end of SFR_DPL group */

/**
   @addtogroup SFR_DPH DPH
   Special Function Register DPH
   @{ */

/**
  @var DPH
  Address: 83H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[15:8]|Data Pointer High Byte
  |        |          |This is the high byte of 16-bit data pointer. DPH combined with DPL
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPH_MACRO Bit Macro Functions
  Bit Macro Functions of DPH
  @{ */





/**@}*/ /* end of SFR_DPH_MACRO group */
/**@}*/ /* end of SFR_DPH group */

/**
   @addtogroup SFR_P6M1 P6M1
   Special Function Register P6M1
   @{ */

/**
  @var P6M1
  Address: 84H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup SFR_P6M1_MACRO Bit Macro Functions
  Bit Macro Functions of P6M1
  @{ */





/**@}*/ /* end of SFR_P6M1_MACRO group */
/**@}*/ /* end of SFR_P6M1 group */

/**
   @addtogroup SFR_P6M2 P6M2
   Special Function Register P6M2
   @{ */

/**
  @var P6M2
  Address: 85H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup SFR_P6M2_MACRO Bit Macro Functions
  Bit Macro Functions of P6M2
  @{ */





/**@}*/ /* end of SFR_P6M2_MACRO group */
/**@}*/ /* end of SFR_P6M2 group */

/**
   @addtogroup SFR_PWM1PH PWM1PH
   Special Function Register PWM1PH
   @{ */

/**
  @var PWM1PH
  Address: 86H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM1PH_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1PH
  @{ */





/**@}*/ /* end of SFR_PWM1PH_MACRO group */
/**@}*/ /* end of SFR_PWM1PH group */



/**
   @addtogroup SFR_TCON TCON
   Special Function Register TCON
   @{ */

/**
  @var TCON
  Address: 88H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IT0       |External Interrupt 0 Type Select
  |        |          |This bit selects by which type that INT0 is triggered.
  |        |          |0 = INT0 is low level triggered.
  |        |          |1 = INT0 is falling edge triggered.
  |[1]     |IE0       |External Interrupt 0 Edge Flag
  |        |          |If IT0 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT0 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT0 input signal¡¦s logic level. Software cannot control it.
  |[2]     |IT1       |External Interrupt 1 Type Select
  |        |          |This bit selects by which type that INT1 is triggered.
  |        |          |0 = INT1 is low level triggered.
  |        |          |1 = INT1 is fallinVg edge triggered.
  |[3]     |IE1       |External Interrupt 1 Edge Flag
  |        |          |If IT1 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT1 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT1 input signal¡¦s logic level. Software cannot control it.
  |[4]     |TR0       |Timer 0 Run Control
  |        |          |0 = Timer 0 Disabled. Clearing this bit will halt Timer 0 and the
  |        |          |current count will be preserved in TH0 and TL0.
  |        |          |1 = Timer 0 Enabled.
  |[5]     |TF0       |Timer 0 Overflow Flag
  |        |          |This bit is set when Timer 0 overflows. It is automatically cleared
  |        |          |via hardware when the program executes the Timer 0 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
  |[6]     |TR1       |Timer 1 Run Control
  |        |          |0 = Timer 1 Disabled. Clearing this bit will halt Timer 1 and the
  |        |          |current count will be preserved in TH1 and TL1.
  |        |          |1 = Timer 1 Enabled.
  |[7]     |TF1       |Timer 1 Overflow Flag
  |        |          |This bit is set when Timer 1 overflows. It is automatically cleared by
  |        |          |hardware when the program executes the Timer 1 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
 */

/**
  @addtogroup SFR_TCON_MACRO Bit Macro Functions
  Bit Macro Functions of TCON
  @{ */

#define set_TCON_IT0             TCON |= 0x01 /*!<Set TCON.IT0                   */
#define set_TCON_IE0             TCON |= 0x02 /*!<Set TCON.IE0                   */
#define set_TCON_IT1             TCON |= 0x04 /*!<Set TCON.IT1                   */
#define set_TCON_IE1             TCON |= 0x08 /*!<Set TCON.IE1                   */
#define set_TCON_TR0             TCON |= 0x10 /*!<Set TCON.TR0                   */
#define set_TCON_TF0             TCON |= 0x20 /*!<Set TCON.TF0                   */
#define set_TCON_TR1             TCON |= 0x40 /*!<Set TCON.TR1                   */
#define set_TCON_TF1             TCON |= 0x80 /*!<Set TCON.TF1                   */

#define clr_TCON_IT0             TCON &=~0x01 /*!<Clear TCON.IT0                 */
#define clr_TCON_IE0             TCON &=~0x02 /*!<Clear TCON.IE0                 */
#define clr_TCON_IT1             TCON &=~0x04 /*!<Clear TCON.IT1                 */
#define clr_TCON_IE1             TCON &=~0x08 /*!<Clear TCON.IE1                 */
#define clr_TCON_TR0             TCON &=~0x10 /*!<Clear TCON.TR0                 */
#define clr_TCON_TF0             TCON &=~0x20 /*!<Clear TCON.TF0                 */
#define clr_TCON_TR1             TCON &=~0x40 /*!<Clear TCON.TR1                 */
#define clr_TCON_TF1             TCON &=~0x80 /*!<Clear TCON.TF1                 */

/**@}*/ /* end of SFR_TCON_MACRO group */
/**@}*/ /* end of SFR_TCON group */


/**
   @addtogroup SFR_PWM1C0H PWM1C0H
   Special Function Register PWM1C0H
   @{ */

/**
  @var PWM1C0H
  Address: 8AH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM1C0H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1C0H
  @{ */





/**@}*/ /* end of SFR_PWM1C0H_MACRO group */
/**@}*/ /* end of SFR_PWM1C0H group */

/**
   @addtogroup SFR_PWM1C1H PWM1C1H
   Special Function Register PWM1C1H
   @{ */

/**
  @var PWM1C1H
  Address: 8BH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM1C1H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1C1H
  @{ */





/**@}*/ /* end of SFR_PWM1C1H_MACRO group */
/**@}*/ /* end of SFR_PWM1C1H group */

/**
   @addtogroup SFR_PWM1MD PWM1MD
   Special Function Register PWM1MD
   @{ */

/**
  @var PWM1MD
  Address: 8CH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup SFR_PWM1MD_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1MD
  @{ */







/**@}*/ /* end of SFR_PWM1MD_MACRO group */
/**@}*/ /* end of SFR_PWM1MD group */

/**
   @addtogroup SFR_PWM1MEN PWM1MEN
   Special Function Register PWM1MEN
   @{ */

/**
  @var PWM1MEN
  Address: 8DH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup SFR_PWM1MEN_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1MEN
  @{ */





/**@}*/ /* end of SFR_PWM1MEN_MACRO group */
/**@}*/ /* end of SFR_PWM1MEN group */

/**
   @addtogroup SFR_P6SR P6SR
   Special Function Register P6SR
   @{ */

/**
  @var P6SR
  Address: 8EH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup SFR_P6SR_MACRO Bit Macro Functions
  Bit Macro Functions of P6SR
  @{ */





/**@}*/ /* end of SFR_P6SR_MACRO group */
/**@}*/ /* end of SFR_P6SR group */

/**
   @addtogroup SFR_P6DW P6DW
   Special Function Register P6DW
   @{ */

/**
  @var P6DW
  Address: 8FH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup SFR_P6DW_MACRO Bit Macro Functions
  Bit Macro Functions of P6DW
  @{ */





/**@}*/ /* end of SFR_P6DW_MACRO group */
/**@}*/ /* end of SFR_P6DW group */

/**
   @addtogroup SFR_P1 P1
   Special Function Register P1
   @{ */

/**
  @var P1
  Address: 90H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P1_MACRO Bit Macro Functions
  Bit Macro Functions of P1
  @{ */





/**@}*/ /* end of SFR_P1_MACRO group */
/**@}*/ /* end of SFR_P1 group */

/**
   @addtogroup SFR_SFRS SFRS
   Special Function Register SFRS
   @{ */

/**
  @var SFRS
  Address: 91H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SFRPAGE[1:0]|SFR Page Select
  |        |          |00 = Instructions access SFR Page 0.
  |        |          |01 = Instructions access SFR Page 1.
  |        |          |10 = Instructions access SFR page 2.
  |        |          |11 = Instructions access SFR page 3.
 */

/**
  @addtogroup SFR_SFRS_MACRO Bit Macro Functions
  Bit Macro Functions of SFRS
  @{ */





/**@}*/ /* end of SFR_SFRS_MACRO group */
/**@}*/ /* end of SFR_SFRS group */

/**
   @addtogroup SFR_P6MF10 P6MF10
   Special Function Register P6MF10
   @{ */

/**
  @var P6MF10
  Address: 92H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup SFR_P6MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P6MF10
  @{ */







/**@}*/ /* end of SFR_P6MF10_MACRO group */
/**@}*/ /* end of SFR_P6MF10 group */

/**
   @addtogroup SFR_P6MF32 P6MF32
   Special Function Register P6MF32
   @{ */

/**
  @var P6MF32
  Address: 93H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup SFR_P6MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P6MF32
  @{ */







/**@}*/ /* end of SFR_P6MF32_MACRO group */
/**@}*/ /* end of SFR_P6MF32 group */

/**
   @addtogroup SFR_P6MF54 P6MF54
   Special Function Register P6MF54
   @{ */

/**
  @var P6MF54
  Address: 94H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup SFR_P6MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P6MF54
  @{ */







/**@}*/ /* end of SFR_P6MF54_MACRO group */
/**@}*/ /* end of SFR_P6MF54 group */

/**
   @addtogroup SFR_P5MF76 P5MF76
   Special Function Register P5MF76
   @{ */

/**
  @var P5MF76
  Address: 95H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */
sfr P5MF76 = 0x95;


/**
  @addtogroup SFR_P5MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P5MF76
  @{ */







/**@}*/ /* end of SFR_P5MF76_MACRO group */
/**@}*/ /* end of SFR_P5MF76 group */

/**
   @addtogroup SFR_P6UP P6UP
   Special Function Register P6UP
   @{ */

/**
  @var P6UP
  Address: 97H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup SFR_P6UP_MACRO Bit Macro Functions
  Bit Macro Functions of P6UP
  @{ */





/**@}*/ /* end of SFR_P6UP_MACRO group */
/**@}*/ /* end of SFR_P6UP group */



/**
   @addtogroup SFR_PWM1PL PWM1PL
   Special Function Register PWM1PL
   @{ */

/**
  @var PWM1PL
  Address: 99H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM1PL_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1PL
  @{ */





/**@}*/ /* end of SFR_PWM1PL_MACRO group */
/**@}*/ /* end of SFR_PWM1PL group */

/**
   @addtogroup SFR_PWM1C0L PWM1C0L
   Special Function Register PWM1C0L
   @{ */

/**
  @var PWM1C0L
  Address: 9AH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM1C0L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1C0L
  @{ */





/**@}*/ /* end of SFR_PWM1C0L_MACRO group */
/**@}*/ /* end of SFR_PWM1C0L group */

/**
   @addtogroup SFR_PWM1C1L PWM1C1L
   Special Function Register PWM1C1L
   @{ */

/**
  @var PWM1C1L
  Address: 9BH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM1C1L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1C1L
  @{ */





/**@}*/ /* end of SFR_PWM1C1L_MACRO group */
/**@}*/ /* end of SFR_PWM1C1L group */

/**
   @addtogroup SFR_PWM1CON0 PWM1CON0
   Special Function Register PWM1CON0
   @{ */

/**
  @var PWM1CON0
  Address: 9CH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup SFR_PWM1CON0_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1CON0
  @{ */

#define set_PWM1CON0_CLRPWM      PWM1CON0 |= 0x10 /*!<Set PWM1CON0.CLRPWM            */
#define set_PWM1CON0_PWMF        PWM1CON0 |= 0x20 /*!<Set PWM1CON0.PWMF              */
#define set_PWM1CON0_LOAD        PWM1CON0 |= 0x40 /*!<Set PWM1CON0.LOAD              */
#define set_PWM1CON0_PWMnRUN     PWM1CON0 |= 0x80 /*!<Set PWM1CON0.PWMnRUN           */

#define clr_PWM1CON0_CLRPWM      PWM1CON0 &=~0x10 /*!<Clear PWM1CON0.CLRPWM          */
#define clr_PWM1CON0_PWMF        PWM1CON0 &=~0x20 /*!<Clear PWM1CON0.PWMF            */
#define clr_PWM1CON0_LOAD        PWM1CON0 &=~0x40 /*!<Clear PWM1CON0.LOAD            */
#define clr_PWM1CON0_PWMnRUN     PWM1CON0 &=~0x80 /*!<Clear PWM1CON0.PWMnRUN         */

/**@}*/ /* end of SFR_PWM1CON0_MACRO group */
/**@}*/ /* end of SFR_PWM1CON0 group */

/**
   @addtogroup SFR_PWM1CON1 PWM1CON1
   Special Function Register PWM1CON1
   @{ */

/**
  @var PWM1CON1
  Address: 9DH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup SFR_PWM1CON1_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1CON1
  @{ */


#define set_PWM1CON1_FBINEN      PWM1CON1 |= 0x08 /*!<Set PWM1CON1.FBINEN            */
#define set_PWM1CON1_PWMTYP      PWM1CON1 |= 0x10 /*!<Set PWM1CON1.PWMTYP            */
#define set_PWM1CON1_GP          PWM1CON1 |= 0x20 /*!<Set PWM1CON1.GP                */



#define clr_PWM1CON1_FBINEN      PWM1CON1 &=~0x08 /*!<Clear PWM1CON1.FBINEN          */
#define clr_PWM1CON1_PWMTYP      PWM1CON1 &=~0x10 /*!<Clear PWM1CON1.PWMTYP          */
#define clr_PWM1CON1_GP          PWM1CON1 &=~0x20 /*!<Clear PWM1CON1.GP              */


/**@}*/ /* end of SFR_PWM1CON1_MACRO group */
/**@}*/ /* end of SFR_PWM1CON1 group */

/**
   @addtogroup SFR_PWM1INTC PWM1INTC
   Special Function Register PWM1INTC
   @{ */

/**
  @var PWM1INTC
  Address: 9EH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PWM1INTC_MACRO Bit Macro Functions
  Bit Macro Functions of PWM1INTC
  @{ */







/**@}*/ /* end of SFR_PWM1INTC_MACRO group */
/**@}*/ /* end of SFR_PWM1INTC group */

/**
   @addtogroup SFR_P2 P2
   Special Function Register P2
   @{ */

/**
  @var P2
  Address: A0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P2_MACRO Bit Macro Functions
  Bit Macro Functions of P2
  @{ */





/**@}*/ /* end of SFR_P2_MACRO group */
/**@}*/ /* end of SFR_P2 group */

/**
   @addtogroup SFR_I2C0ADDR1 I2C0ADDR1
   Special Function Register I2C0ADDR1
   @{ */

/**
  @var I2C0ADDR1
  Address: A1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C0ADDR1_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0ADDR1
  @{ */

#define set_I2C0ADDR1_GC         I2C0ADDR1 |= 0x01 /*!<Set I2C0ADDR1.GC               */


#define clr_I2C0ADDR1_GC         I2C0ADDR1 &=~0x01 /*!<Clear I2C0ADDR1.GC             */


/**@}*/ /* end of SFR_I2C0ADDR1_MACRO group */
/**@}*/ /* end of SFR_I2C0ADDR1 group */

/**
   @addtogroup SFR_I2C0ADDR2 I2C0ADDR2
   Special Function Register I2C0ADDR2
   @{ */

/**
  @var I2C0ADDR2
  Address: A2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C0ADDR2_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0ADDR2
  @{ */

#define set_I2C0ADDR2_GC         I2C0ADDR2 |= 0x01 /*!<Set I2C0ADDR2.GC               */


#define clr_I2C0ADDR2_GC         I2C0ADDR2 &=~0x01 /*!<Clear I2C0ADDR2.GC             */


/**@}*/ /* end of SFR_I2C0ADDR2_MACRO group */
/**@}*/ /* end of SFR_I2C0ADDR2 group */

/**
   @addtogroup SFR_I2C0ADDR3 I2C0ADDR3
   Special Function Register I2C0ADDR3
   @{ */

/**
  @var I2C0ADDR3
  Address: A3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C0ADDR3_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0ADDR3
  @{ */

#define set_I2C0ADDR3_GC         I2C0ADDR3 |= 0x01 /*!<Set I2C0ADDR3.GC               */


#define clr_I2C0ADDR3_GC         I2C0ADDR3 &=~0x01 /*!<Clear I2C0ADDR3.GC             */


/**@}*/ /* end of SFR_I2C0ADDR3_MACRO group */
/**@}*/ /* end of SFR_I2C0ADDR3 group */

/**
   @addtogroup SFR_I2C1ADDR1 I2C1ADDR1
   Special Function Register I2C1ADDR1
   @{ */

/**
  @var I2C1ADDR1
  Address: A4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C1ADDR1_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1ADDR1
  @{ */

#define set_I2C1ADDR1_GC         I2C1ADDR1 |= 0x01 /*!<Set I2C1ADDR1.GC               */


#define clr_I2C1ADDR1_GC         I2C1ADDR1 &=~0x01 /*!<Clear I2C1ADDR1.GC             */


/**@}*/ /* end of SFR_I2C1ADDR1_MACRO group */
/**@}*/ /* end of SFR_I2C1ADDR1 group */

/**
   @addtogroup SFR_I2C1ADDR2 I2C1ADDR2
   Special Function Register I2C1ADDR2
   @{ */

/**
  @var I2C1ADDR2
  Address: A5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C1ADDR2_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1ADDR2
  @{ */

#define set_I2C1ADDR2_GC         I2C1ADDR2 |= 0x01 /*!<Set I2C1ADDR2.GC               */


#define clr_I2C1ADDR2_GC         I2C1ADDR2 &=~0x01 /*!<Clear I2C1ADDR2.GC             */


/**@}*/ /* end of SFR_I2C1ADDR2_MACRO group */
/**@}*/ /* end of SFR_I2C1ADDR2 group */

/**
   @addtogroup SFR_I2C1ADDR3 I2C1ADDR3
   Special Function Register I2C1ADDR3
   @{ */

/**
  @var I2C1ADDR3
  Address: A6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup SFR_I2C1ADDR3_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1ADDR3
  @{ */

#define set_I2C1ADDR3_GC         I2C1ADDR3 |= 0x01 /*!<Set I2C1ADDR3.GC               */


#define clr_I2C1ADDR3_GC         I2C1ADDR3 &=~0x01 /*!<Clear I2C1ADDR3.GC             */


/**@}*/ /* end of SFR_I2C1ADDR3_MACRO group */
/**@}*/ /* end of SFR_I2C1ADDR3 group */

/**
   @addtogroup SFR_P6 P6
   Special Function Register P6
   @{ */

/**
  @var P6
  Address: A7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P6_MACRO Bit Macro Functions
  Bit Macro Functions of P6
  @{ */





/**@}*/ /* end of SFR_P6_MACRO group */
/**@}*/ /* end of SFR_P6 group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EX0       |Enable External Interrupt 0
  |        |          |0 = External interrupt 0 Disabled.
  |        |          |1 = External interrupt 0 interrupt Enable. When interrupt generated
  |        |          |INT0 pin set 1.
  |[1]     |ET0       |Enable Timer 0 Interrupt
  |        |          |0 = Timer 0 interrupt Disabled.
  |        |          |1 = Timer 0 interrupt Enable. When interrupt generated TF0 (TCON.5)
  |        |          |set 1.
  |[2]     |EX1       |Enable External Interrupt 1
  |        |          |0 = External interrupt 1 Disabled.
  |        |          |1 = External interrupt 1 interrupt Enable. When interrupt generated
  |        |          |INT1 pin set 1.
  |[3]     |ET1       |Enable Timer 1 Interrupt
  |        |          |0 = Timer 1 interrupt Disabled.
  |        |          |1 = Timer 1 interrupt Enable. When interrupt generated TF1 (TCON.7)
  |        |          |set 1.
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Serial port 0 interrupt Enable. When interrupt generated TI
  |        |          |(SCON.1) or RI (SCON.0) set 1.
  |[5]     |EBOD      |Enable Brown-Out Interrupt
  |        |          |0 = Brown-out detection interrupt Disabled.
  |        |          |1 = Brown-out detection interrupt Enable. When interrupt generated BOF
  |        |          |(BODCON0.3) set 1.
  |[6]     |EADC      |Enable ADC Interrupt
  |        |          |0 = ADC interrupt Disabled.
  |        |          |1 = ADC interrupt Enable. When interrupt generated ADCF (ADCCON0.7)
  |        |          |set 1.
  |[7]     |EA        |Enable All Interrupt
  |        |          |This bit globally enables/disables all interrupts that are
  |        |          |individually enabled.
  |        |          |0 = All interrupt sources Disabled.
  |        |          |1 = Each interrupt Enabled depending on its individual mask setting.
  |        |          |Individual interrupts will occur if enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_EX0               IE |= 0x01 /*!<Set IE.EX0                     */
#define set_IE_ET0               IE |= 0x02 /*!<Set IE.ET0                     */
#define set_IE_EX1               IE |= 0x04 /*!<Set IE.EX1                     */
#define set_IE_ET1               IE |= 0x08 /*!<Set IE.ET1                     */
#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */
#define set_IE_EBOD              IE |= 0x20 /*!<Set IE.EBOD                    */
#define set_IE_EADC              IE |= 0x40 /*!<Set IE.EADC                    */
#define set_IE_EA                IE |= 0x80 /*!<Set IE.EA                      */

#define clr_IE_EX0               IE &=~0x01 /*!<Clear IE.EX0                   */
#define clr_IE_ET0               IE &=~0x02 /*!<Clear IE.ET0                   */
#define clr_IE_EX1               IE &=~0x04 /*!<Clear IE.EX1                   */
#define clr_IE_ET1               IE &=~0x08 /*!<Clear IE.ET1                   */
#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */
#define clr_IE_EBOD              IE &=~0x20 /*!<Clear IE.EBOD                  */
#define clr_IE_EADC              IE &=~0x40 /*!<Clear IE.EADC                  */
#define clr_IE_EA                IE &=~0x80 /*!<Clear IE.EA                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Interrupt generated by TI (SCON.1) or RI (SCON.0) Enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */

#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_DMA3TSR DMA3TSR
   Special Function Register DMA3TSR
   @{ */

/**
  @var DMA3TSR
  Address: A9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA3TSR_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3TSR
  @{ */

#define set_DMA3TSR_FDONE        DMA3TSR |= 0x01 /*!<Set DMA3TSR.FDONE              */
#define set_DMA3TSR_HDONE        DMA3TSR |= 0x02 /*!<Set DMA3TSR.HDONE              */
#define set_DMA3TSR_ACT          DMA3TSR |= 0x04 /*!<Set DMA3TSR.ACT                */
#define set_DMA3TSR_INT_Test     DMA3TSR |= 0x08 /*!<Set DMA3TSR.INT_Test           */

#define clr_DMA3TSR_FDONE        DMA3TSR &=~0x01 /*!<Clear DMA3TSR.FDONE            */
#define clr_DMA3TSR_HDONE        DMA3TSR &=~0x02 /*!<Clear DMA3TSR.HDONE            */
#define clr_DMA3TSR_ACT          DMA3TSR &=~0x04 /*!<Clear DMA3TSR.ACT              */
#define clr_DMA3TSR_INT_Test     DMA3TSR &=~0x08 /*!<Clear DMA3TSR.INT_Test         */

/**@}*/ /* end of SFR_DMA3TSR_MACRO group */
/**@}*/ /* end of SFR_DMA3TSR group */

/**
   @addtogroup SFR_DMA3BAH DMA3BAH
   Special Function Register DMA3BAH
   @{ */

/**
  @var DMA3BAH
  Address: AAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup SFR_DMA3BAH_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3BAH
  @{ */







/**@}*/ /* end of SFR_DMA3BAH_MACRO group */
/**@}*/ /* end of SFR_DMA3BAH group */

/**
   @addtogroup SFR_DMA3CR0 DMA3CR0
   Special Function Register DMA3CR0
   @{ */

/**
  @var DMA3CR0
  Address: ABH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA3CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CR0
  @{ */

#define set_DMA3CR0_EN           DMA3CR0 |= 0x01 /*!<Set DMA3CR0.EN                 */
#define set_DMA3CR0_RUN          DMA3CR0 |= 0x02 /*!<Set DMA3CR0.RUN                */
#define set_DMA3CR0_FIE          DMA3CR0 |= 0x04 /*!<Set DMA3CR0.FIE                */
#define set_DMA3CR0_HIE          DMA3CR0 |= 0x08 /*!<Set DMA3CR0.HIE                */


#define clr_DMA3CR0_EN           DMA3CR0 &=~0x01 /*!<Clear DMA3CR0.EN               */
#define clr_DMA3CR0_RUN          DMA3CR0 &=~0x02 /*!<Clear DMA3CR0.RUN              */
#define clr_DMA3CR0_FIE          DMA3CR0 &=~0x04 /*!<Clear DMA3CR0.FIE              */
#define clr_DMA3CR0_HIE          DMA3CR0 &=~0x08 /*!<Clear DMA3CR0.HIE              */


/**@}*/ /* end of SFR_DMA3CR0_MACRO group */
/**@}*/ /* end of SFR_DMA3CR0 group */

/**
   @addtogroup SFR_DMA3CR0 DMA3CR0
   Special Function Register DMA3CR0
   @{ */

/**
  @var DMA3CR0
  Address: ABH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA3CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CR0
  @{ */

#define set_DMA3CR0_EN           DMA3CR0 |= 0x01 /*!<Set DMA3CR0.EN                 */
#define set_DMA3CR0_RUN          DMA3CR0 |= 0x02 /*!<Set DMA3CR0.RUN                */
#define set_DMA3CR0_FIE          DMA3CR0 |= 0x04 /*!<Set DMA3CR0.FIE                */
#define set_DMA3CR0_HIE          DMA3CR0 |= 0x08 /*!<Set DMA3CR0.HIE                */


#define clr_DMA3CR0_EN           DMA3CR0 &=~0x01 /*!<Clear DMA3CR0.EN               */
#define clr_DMA3CR0_RUN          DMA3CR0 &=~0x02 /*!<Clear DMA3CR0.RUN              */
#define clr_DMA3CR0_FIE          DMA3CR0 &=~0x04 /*!<Clear DMA3CR0.FIE              */
#define clr_DMA3CR0_HIE          DMA3CR0 &=~0x08 /*!<Clear DMA3CR0.HIE              */


/**@}*/ /* end of SFR_DMA3CR0_MACRO group */
/**@}*/ /* end of SFR_DMA3CR0 group */

/**
   @addtogroup SFR_DMA3MAL DMA3MAL
   Special Function Register DMA3MAL
   @{ */

/**
  @var DMA3MAL
  Address: ACH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup SFR_DMA3MAL_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3MAL
  @{ */





/**@}*/ /* end of SFR_DMA3MAL_MACRO group */
/**@}*/ /* end of SFR_DMA3MAL group */

/**
   @addtogroup SFR_DMA3CNT DMA3CNT
   Special Function Register DMA3CNT
   @{ */

/**
  @var DMA3CNT
  Address: ADH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup SFR_DMA3CNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CNT
  @{ */





/**@}*/ /* end of SFR_DMA3CNT_MACRO group */
/**@}*/ /* end of SFR_DMA3CNT group */

/**
   @addtogroup SFR_DMA3CCNT DMA3CCNT
   Special Function Register DMA3CCNT
   @{ */

/**
  @var DMA3CCNT
  Address: AEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup SFR_DMA3CCNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CCNT
  @{ */





/**@}*/ /* end of SFR_DMA3CCNT_MACRO group */
/**@}*/ /* end of SFR_DMA3CCNT group */

/**
   @addtogroup SFR_MTM3DA MTM3DA
   Special Function Register MTM3DA
   @{ */

/**
  @var MTM3DA
  Address: AFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup SFR_MTM3DA_MACRO Bit Macro Functions
  Bit Macro Functions of MTM3DA
  @{ */





/**@}*/ /* end of SFR_MTM3DA_MACRO group */
/**@}*/ /* end of SFR_MTM3DA group */

/**
   @addtogroup SFR_P3 P3
   Special Function Register P3
   @{ */

/**
  @var P3
  Address: B0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P3_MACRO Bit Macro Functions
  Bit Macro Functions of P3
  @{ */





/**@}*/ /* end of SFR_P3_MACRO group */
/**@}*/ /* end of SFR_P3 group */

/**
   @addtogroup SFR_DMA2TSR DMA2TSR
   Special Function Register DMA2TSR
   @{ */

/**
  @var DMA2TSR
  Address: B1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA2TSR_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2TSR
  @{ */

#define set_DMA2TSR_FDONE        DMA2TSR |= 0x01 /*!<Set DMA2TSR.FDONE              */
#define set_DMA2TSR_HDONE        DMA2TSR |= 0x02 /*!<Set DMA2TSR.HDONE              */
#define set_DMA2TSR_ACT          DMA2TSR |= 0x04 /*!<Set DMA2TSR.ACT                */
#define set_DMA2TSR_INT_Test     DMA2TSR |= 0x08 /*!<Set DMA2TSR.INT_Test           */

#define clr_DMA2TSR_FDONE        DMA2TSR &=~0x01 /*!<Clear DMA2TSR.FDONE            */
#define clr_DMA2TSR_HDONE        DMA2TSR &=~0x02 /*!<Clear DMA2TSR.HDONE            */
#define clr_DMA2TSR_ACT          DMA2TSR &=~0x04 /*!<Clear DMA2TSR.ACT              */
#define clr_DMA2TSR_INT_Test     DMA2TSR &=~0x08 /*!<Clear DMA2TSR.INT_Test         */

/**@}*/ /* end of SFR_DMA2TSR_MACRO group */
/**@}*/ /* end of SFR_DMA2TSR group */

/**
   @addtogroup SFR_DMA2BAH DMA2BAH
   Special Function Register DMA2BAH
   @{ */

/**
  @var DMA2BAH
  Address: B2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup SFR_DMA2BAH_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2BAH
  @{ */







/**@}*/ /* end of SFR_DMA2BAH_MACRO group */
/**@}*/ /* end of SFR_DMA2BAH group */

/**
   @addtogroup SFR_DMA2CR0 DMA2CR0
   Special Function Register DMA2CR0
   @{ */

/**
  @var DMA2CR0
  Address: B3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA2CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CR0
  @{ */

#define set_DMA2CR0_EN           DMA2CR0 |= 0x01 /*!<Set DMA2CR0.EN                 */
#define set_DMA2CR0_RUN          DMA2CR0 |= 0x02 /*!<Set DMA2CR0.RUN                */
#define set_DMA2CR0_FIE          DMA2CR0 |= 0x04 /*!<Set DMA2CR0.FIE                */
#define set_DMA2CR0_HIE          DMA2CR0 |= 0x08 /*!<Set DMA2CR0.HIE                */


#define clr_DMA2CR0_EN           DMA2CR0 &=~0x01 /*!<Clear DMA2CR0.EN               */
#define clr_DMA2CR0_RUN          DMA2CR0 &=~0x02 /*!<Clear DMA2CR0.RUN              */
#define clr_DMA2CR0_FIE          DMA2CR0 &=~0x04 /*!<Clear DMA2CR0.FIE              */
#define clr_DMA2CR0_HIE          DMA2CR0 &=~0x08 /*!<Clear DMA2CR0.HIE              */


/**@}*/ /* end of SFR_DMA2CR0_MACRO group */
/**@}*/ /* end of SFR_DMA2CR0 group */

/**
   @addtogroup SFR_DMA2CR0 DMA2CR0
   Special Function Register DMA2CR0
   @{ */

/**
  @var DMA2CR0
  Address: B3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup SFR_DMA2CR0_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CR0
  @{ */

#define set_DMA2CR0_EN           DMA2CR0 |= 0x01 /*!<Set DMA2CR0.EN                 */
#define set_DMA2CR0_RUN          DMA2CR0 |= 0x02 /*!<Set DMA2CR0.RUN                */
#define set_DMA2CR0_FIE          DMA2CR0 |= 0x04 /*!<Set DMA2CR0.FIE                */
#define set_DMA2CR0_HIE          DMA2CR0 |= 0x08 /*!<Set DMA2CR0.HIE                */


#define clr_DMA2CR0_EN           DMA2CR0 &=~0x01 /*!<Clear DMA2CR0.EN               */
#define clr_DMA2CR0_RUN          DMA2CR0 &=~0x02 /*!<Clear DMA2CR0.RUN              */
#define clr_DMA2CR0_FIE          DMA2CR0 &=~0x04 /*!<Clear DMA2CR0.FIE              */
#define clr_DMA2CR0_HIE          DMA2CR0 &=~0x08 /*!<Clear DMA2CR0.HIE              */


/**@}*/ /* end of SFR_DMA2CR0_MACRO group */
/**@}*/ /* end of SFR_DMA2CR0 group */

/**
   @addtogroup SFR_DMA2MAL DMA2MAL
   Special Function Register DMA2MAL
   @{ */

/**
  @var DMA2MAL
  Address: B4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup SFR_DMA2MAL_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2MAL
  @{ */





/**@}*/ /* end of SFR_DMA2MAL_MACRO group */
/**@}*/ /* end of SFR_DMA2MAL group */

/**
   @addtogroup SFR_DMA2CNT DMA2CNT
   Special Function Register DMA2CNT
   @{ */

/**
  @var DMA2CNT
  Address: B5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup SFR_DMA2CNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CNT
  @{ */





/**@}*/ /* end of SFR_DMA2CNT_MACRO group */
/**@}*/ /* end of SFR_DMA2CNT group */

/**
   @addtogroup SFR_DMA2CCNT DMA2CCNT
   Special Function Register DMA2CCNT
   @{ */

/**
  @var DMA2CCNT
  Address: B6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup SFR_DMA2CCNT_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CCNT
  @{ */





/**@}*/ /* end of SFR_DMA2CCNT_MACRO group */
/**@}*/ /* end of SFR_DMA2CCNT group */

/**
   @addtogroup SFR_MTM2DA MTM2DA
   Special Function Register MTM2DA
   @{ */

/**
  @var MTM2DA
  Address: B7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup SFR_MTM2DA_MACRO Bit Macro Functions
  Bit Macro Functions of MTM2DA
  @{ */





/**@}*/ /* end of SFR_MTM2DA_MACRO group */
/**@}*/ /* end of SFR_MTM2DA group */

/**
   @addtogroup SFR_IP IP
   Special Function Register IP
   @{ */

/**
  @var IP
  Address: B8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0       |External interrupt 0 priority low bit
  |[1]     |PT0       |Timer 0 interrupt priority low bit
  |[2]     |PX1       |External interrupt 1 priority low bit
  |[3]     |PT1       |Timer 1 interrupt priority low bit
  |[4]     |PS        |Serial port 0 interrupt priority low bit
  |[5]     |PBOD      |Brown-out detection interrupt priority low bit
  |[6]     |PADC      |ADC interrupt priority low bit
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_IP_MACRO Bit Macro Functions
  Bit Macro Functions of IP
  @{ */

#define set_IP_PX0               IP |= 0x01 /*!<Set IP.PX0                     */
#define set_IP_PT0               IP |= 0x02 /*!<Set IP.PT0                     */
#define set_IP_PX1               IP |= 0x04 /*!<Set IP.PX1                     */
#define set_IP_PT1               IP |= 0x08 /*!<Set IP.PT1                     */
#define set_IP_PS                IP |= 0x10 /*!<Set IP.PS                      */
#define set_IP_PBOD              IP |= 0x20 /*!<Set IP.PBOD                    */
#define set_IP_PADC              IP |= 0x40 /*!<Set IP.PADC                    */

#define clr_IP_PX0               IP &=~0x01 /*!<Clear IP.PX0                   */
#define clr_IP_PT0               IP &=~0x02 /*!<Clear IP.PT0                   */
#define clr_IP_PX1               IP &=~0x04 /*!<Clear IP.PX1                   */
#define clr_IP_PT1               IP &=~0x08 /*!<Clear IP.PT1                   */
#define clr_IP_PS                IP &=~0x10 /*!<Clear IP.PS                    */
#define clr_IP_PBOD              IP &=~0x20 /*!<Clear IP.PBOD                  */
#define clr_IP_PADC              IP &=~0x40 /*!<Clear IP.PADC                  */

/**@}*/ /* end of SFR_IP_MACRO group */
/**@}*/ /* end of SFR_IP group */

/**
   @addtogroup SFR_PWM2PH PWM2PH
   Special Function Register PWM2PH
   @{ */

/**
  @var PWM2PH
  Address: B9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM2PH_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2PH
  @{ */





/**@}*/ /* end of SFR_PWM2PH_MACRO group */
/**@}*/ /* end of SFR_PWM2PH group */

/**
   @addtogroup SFR_PWM2C0H PWM2C0H
   Special Function Register PWM2C0H
   @{ */

/**
  @var PWM2C0H
  Address: BAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM2C0H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2C0H
  @{ */





/**@}*/ /* end of SFR_PWM2C0H_MACRO group */
/**@}*/ /* end of SFR_PWM2C0H group */

/**
   @addtogroup SFR_PWM2C1H PWM2C1H
   Special Function Register PWM2C1H
   @{ */

/**
  @var PWM2C1H
  Address: BBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM2C1H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2C1H
  @{ */





/**@}*/ /* end of SFR_PWM2C1H_MACRO group */
/**@}*/ /* end of SFR_PWM2C1H group */

/**
   @addtogroup SFR_PWM2MD PWM2MD
   Special Function Register PWM2MD
   @{ */

/**
  @var PWM2MD
  Address: BCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup SFR_PWM2MD_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2MD
  @{ */







/**@}*/ /* end of SFR_PWM2MD_MACRO group */
/**@}*/ /* end of SFR_PWM2MD group */

/**
   @addtogroup SFR_PWM2MEN PWM2MEN
   Special Function Register PWM2MEN
   @{ */

/**
  @var PWM2MEN
  Address: BDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup SFR_PWM2MEN_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2MEN
  @{ */





/**@}*/ /* end of SFR_PWM2MEN_MACRO group */
/**@}*/ /* end of SFR_PWM2MEN group */

/**
   @addtogroup SFR_CWKH CWKH
   Special Function Register CWKH
   @{ */

/**
  @var CWKH
  Address: BEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CWK[15:8] |WKT Current Count Value Low Byte High Byte
  |        |          |It is store value of WKT current count.
 */

/**
  @addtogroup SFR_CWKH_MACRO Bit Macro Functions
  Bit Macro Functions of CWKH
  @{ */





/**@}*/ /* end of SFR_CWKH_MACRO group */
/**@}*/ /* end of SFR_CWKH group */

/**
   @addtogroup SFR_RWKH RWKH
   Special Function Register RWKH
   @{ */

/**
  @var RWKH
  Address: BFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RWK[15:8] |WKT Reload High Byte
  |        |          |It holds the 16-bit reload value of WKT. Note that RWK should not be
  |        |          |FFFFH if the pre-scale is 1/1 for implement limitation.
 */

/**
  @addtogroup SFR_RWKH_MACRO Bit Macro Functions
  Bit Macro Functions of RWKH
  @{ */





/**@}*/ /* end of SFR_RWKH_MACRO group */
/**@}*/ /* end of SFR_RWKH group */

/**
   @addtogroup SFR_I2C0CON I2C0CON
   Special Function Register I2C0CON
   @{ */

/**
  @var I2C0CON
  Address: C0H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C0CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0CON
  @{ */

#define set_I2C0CON_AA           I2C0CON |= 0x04 /*!<Set I2C0CON.AA                 */
#define set_I2C0CON_SI           I2C0CON |= 0x08 /*!<Set I2C0CON.SI                 */
#define set_I2C0CON_STO          I2C0CON |= 0x10 /*!<Set I2C0CON.STO                */
#define set_I2C0CON_STA          I2C0CON |= 0x20 /*!<Set I2C0CON.STA                */
#define set_I2C0CON_I2CEN        I2C0CON |= 0x40 /*!<Set I2C0CON.I2CEN              */
#define set_I2C0CON_I            I2C0CON |= 0x80 /*!<Set I2C0CON.I                  */

#define clr_I2C0CON_AA           I2C0CON &=~0x04 /*!<Clear I2C0CON.AA               */
#define clr_I2C0CON_SI           I2C0CON &=~0x08 /*!<Clear I2C0CON.SI               */
#define clr_I2C0CON_STO          I2C0CON &=~0x10 /*!<Clear I2C0CON.STO              */
#define clr_I2C0CON_STA          I2C0CON &=~0x20 /*!<Clear I2C0CON.STA              */
#define clr_I2C0CON_I2CEN        I2C0CON &=~0x40 /*!<Clear I2C0CON.I2CEN            */
#define clr_I2C0CON_I            I2C0CON &=~0x80 /*!<Clear I2C0CON.I                */

/**@}*/ /* end of SFR_I2C0CON_MACRO group */
/**@}*/ /* end of SFR_I2C0CON group */

/**
   @addtogroup SFR_PWM2PL PWM2PL
   Special Function Register PWM2PL
   @{ */

/**
  @var PWM2PL
  Address: C1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM2PL_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2PL
  @{ */





/**@}*/ /* end of SFR_PWM2PL_MACRO group */
/**@}*/ /* end of SFR_PWM2PL group */

/**
   @addtogroup SFR_PWM2C0L PWM2C0L
   Special Function Register PWM2C0L
   @{ */

/**
  @var PWM2C0L
  Address: C2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM2C0L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2C0L
  @{ */





/**@}*/ /* end of SFR_PWM2C0L_MACRO group */
/**@}*/ /* end of SFR_PWM2C0L group */

/**
   @addtogroup SFR_PWM2C1L PWM2C1L
   Special Function Register PWM2C1L
   @{ */

/**
  @var PWM2C1L
  Address: C3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM2C1L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2C1L
  @{ */





/**@}*/ /* end of SFR_PWM2C1L_MACRO group */
/**@}*/ /* end of SFR_PWM2C1L group */

/**
   @addtogroup SFR_PWM2CON0 PWM2CON0
   Special Function Register PWM2CON0
   @{ */

/**
  @var PWM2CON0
  Address: C4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup SFR_PWM2CON0_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2CON0
  @{ */

#define set_PWM2CON0_CLRPWM      PWM2CON0 |= 0x10 /*!<Set PWM2CON0.CLRPWM            */
#define set_PWM2CON0_PWMF        PWM2CON0 |= 0x20 /*!<Set PWM2CON0.PWMF              */
#define set_PWM2CON0_LOAD        PWM2CON0 |= 0x40 /*!<Set PWM2CON0.LOAD              */
#define set_PWM2CON0_PWMnRUN     PWM2CON0 |= 0x80 /*!<Set PWM2CON0.PWMnRUN           */

#define clr_PWM2CON0_CLRPWM      PWM2CON0 &=~0x10 /*!<Clear PWM2CON0.CLRPWM          */
#define clr_PWM2CON0_PWMF        PWM2CON0 &=~0x20 /*!<Clear PWM2CON0.PWMF            */
#define clr_PWM2CON0_LOAD        PWM2CON0 &=~0x40 /*!<Clear PWM2CON0.LOAD            */
#define clr_PWM2CON0_PWMnRUN     PWM2CON0 &=~0x80 /*!<Clear PWM2CON0.PWMnRUN         */

/**@}*/ /* end of SFR_PWM2CON0_MACRO group */
/**@}*/ /* end of SFR_PWM2CON0 group */

/**
   @addtogroup SFR_PWM2CON1 PWM2CON1
   Special Function Register PWM2CON1
   @{ */

/**
  @var PWM2CON1
  Address: C5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup SFR_PWM2CON1_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2CON1
  @{ */


#define set_PWM2CON1_FBINEN      PWM2CON1 |= 0x08 /*!<Set PWM2CON1.FBINEN            */
#define set_PWM2CON1_PWMTYP      PWM2CON1 |= 0x10 /*!<Set PWM2CON1.PWMTYP            */
#define set_PWM2CON1_GP          PWM2CON1 |= 0x20 /*!<Set PWM2CON1.GP                */



#define clr_PWM2CON1_FBINEN      PWM2CON1 &=~0x08 /*!<Clear PWM2CON1.FBINEN          */
#define clr_PWM2CON1_PWMTYP      PWM2CON1 &=~0x10 /*!<Clear PWM2CON1.PWMTYP          */
#define clr_PWM2CON1_GP          PWM2CON1 &=~0x20 /*!<Clear PWM2CON1.GP              */


/**@}*/ /* end of SFR_PWM2CON1_MACRO group */
/**@}*/ /* end of SFR_PWM2CON1 group */

/**
   @addtogroup SFR_PWM2INTC PWM2INTC
   Special Function Register PWM2INTC
   @{ */

/**
  @var PWM2INTC
  Address: C6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PWM2INTC_MACRO Bit Macro Functions
  Bit Macro Functions of PWM2INTC
  @{ */







/**@}*/ /* end of SFR_PWM2INTC_MACRO group */
/**@}*/ /* end of SFR_PWM2INTC group */


/**
   @addtogroup SFR_PWM3PH PWM3PH
   Special Function Register PWM3PH
   @{ */

/**
  @var PWM3PH
  Address: C9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM3PH_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3PH
  @{ */





/**@}*/ /* end of SFR_PWM3PH_MACRO group */
/**@}*/ /* end of SFR_PWM3PH group */

/**
   @addtogroup SFR_PWM3C0H PWM3C0H
   Special Function Register PWM3C0H
   @{ */

/**
  @var PWM3C0H
  Address: CAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM3C0H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3C0H
  @{ */





/**@}*/ /* end of SFR_PWM3C0H_MACRO group */
/**@}*/ /* end of SFR_PWM3C0H group */

/**
   @addtogroup SFR_PWM3C1H PWM3C1H
   Special Function Register PWM3C1H
   @{ */

/**
  @var PWM3C1H
  Address: CBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM3C1H_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3C1H
  @{ */





/**@}*/ /* end of SFR_PWM3C1H_MACRO group */
/**@}*/ /* end of SFR_PWM3C1H group */

/**
   @addtogroup SFR_PWM3MD PWM3MD
   Special Function Register PWM3MD
   @{ */

/**
  @var PWM3MD
  Address: CCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup SFR_PWM3MD_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3MD
  @{ */







/**@}*/ /* end of SFR_PWM3MD_MACRO group */
/**@}*/ /* end of SFR_PWM3MD group */

/**
   @addtogroup SFR_PWM3MEN PWM3MEN
   Special Function Register PWM3MEN
   @{ */

/**
  @var PWM3MEN
  Address: CDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup SFR_PWM3MEN_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3MEN
  @{ */





/**@}*/ /* end of SFR_PWM3MEN_MACRO group */
/**@}*/ /* end of SFR_PWM3MEN group */

/**
   @addtogroup SFR_AINDIDS1 AINDIDS1
   Special Function Register AINDIDS1
   @{ */

/**
  @var AINDIDS1
  Address: CEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |AINnDIDS  |ADC Channel Digital Input Disable
  |        |          |0 = Enabled digital input at ADC channel n.
  |        |          |1 = Disabled digital input at ADC channel n . ADC channel n is read
  |        |          |always 0.
 */

/**
  @addtogroup SFR_AINDIDS1_MACRO Bit Macro Functions
  Bit Macro Functions of AINDIDS1
  @{ */





/**@}*/ /* end of SFR_AINDIDS1_MACRO group */
/**@}*/ /* end of SFR_AINDIDS1 group */

/**
   @addtogroup SFR_PWM3PL PWM3PL
   Special Function Register PWM3PL
   @{ */

/**
  @var PWM3PL
  Address: D1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup SFR_PWM3PL_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3PL
  @{ */





/**@}*/ /* end of SFR_PWM3PL_MACRO group */
/**@}*/ /* end of SFR_PWM3PL group */

/**
   @addtogroup SFR_PWM3C0L PWM3C0L
   Special Function Register PWM3C0L
   @{ */

/**
  @var PWM3C0L
  Address: D2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM3C0L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3C0L
  @{ */





/**@}*/ /* end of SFR_PWM3C0L_MACRO group */
/**@}*/ /* end of SFR_PWM3C0L group */

/**
   @addtogroup SFR_PWM3C1L PWM3C1L
   Special Function Register PWM3C1L
   @{ */

/**
  @var PWM3C1L
  Address: D3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup SFR_PWM3C1L_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3C1L
  @{ */





/**@}*/ /* end of SFR_PWM3C1L_MACRO group */
/**@}*/ /* end of SFR_PWM3C1L group */

/**
   @addtogroup SFR_PWM3CON0 PWM3CON0
   Special Function Register PWM3CON0
   @{ */

/**
  @var PWM3CON0
  Address: D4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup SFR_PWM3CON0_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3CON0
  @{ */

#define set_PWM3CON0_CLRPWM      PWM3CON0 |= 0x10 /*!<Set PWM3CON0.CLRPWM            */
#define set_PWM3CON0_PWMF        PWM3CON0 |= 0x20 /*!<Set PWM3CON0.PWMF              */
#define set_PWM3CON0_LOAD        PWM3CON0 |= 0x40 /*!<Set PWM3CON0.LOAD              */
#define set_PWM3CON0_PWMnRUN     PWM3CON0 |= 0x80 /*!<Set PWM3CON0.PWMnRUN           */

#define clr_PWM3CON0_CLRPWM      PWM3CON0 &=~0x10 /*!<Clear PWM3CON0.CLRPWM          */
#define clr_PWM3CON0_PWMF        PWM3CON0 &=~0x20 /*!<Clear PWM3CON0.PWMF            */
#define clr_PWM3CON0_LOAD        PWM3CON0 &=~0x40 /*!<Clear PWM3CON0.LOAD            */
#define clr_PWM3CON0_PWMnRUN     PWM3CON0 &=~0x80 /*!<Clear PWM3CON0.PWMnRUN         */

/**@}*/ /* end of SFR_PWM3CON0_MACRO group */
/**@}*/ /* end of SFR_PWM3CON0 group */

/**
   @addtogroup SFR_PWM3CON1 PWM3CON1
   Special Function Register PWM3CON1
   @{ */

/**
  @var PWM3CON1
  Address: D5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup SFR_PWM3CON1_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3CON1
  @{ */


#define set_PWM3CON1_FBINEN      PWM3CON1 |= 0x08 /*!<Set PWM3CON1.FBINEN            */
#define set_PWM3CON1_PWMTYP      PWM3CON1 |= 0x10 /*!<Set PWM3CON1.PWMTYP            */
#define set_PWM3CON1_GP          PWM3CON1 |= 0x20 /*!<Set PWM3CON1.GP                */



#define clr_PWM3CON1_FBINEN      PWM3CON1 &=~0x08 /*!<Clear PWM3CON1.FBINEN          */
#define clr_PWM3CON1_PWMTYP      PWM3CON1 &=~0x10 /*!<Clear PWM3CON1.PWMTYP          */
#define clr_PWM3CON1_GP          PWM3CON1 &=~0x20 /*!<Clear PWM3CON1.GP              */


/**@}*/ /* end of SFR_PWM3CON1_MACRO group */
/**@}*/ /* end of SFR_PWM3CON1 group */

/**
   @addtogroup SFR_PWM3INTC PWM3INTC
   Special Function Register PWM3INTC
   @{ */

/**
  @var PWM3INTC
  Address: D6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_PWM3INTC_MACRO Bit Macro Functions
  Bit Macro Functions of PWM3INTC
  @{ */







/**@}*/ /* end of SFR_PWM3INTC_MACRO group */
/**@}*/ /* end of SFR_PWM3INTC group */

/**
   @addtogroup SFR_P4 P4
   Special Function Register P4
   @{ */

/**
  @var P4
  Address: D8H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P4_MACRO Bit Macro Functions
  Bit Macro Functions of P4
  @{ */





/**@}*/ /* end of SFR_P4_MACRO group */
/**@}*/ /* end of SFR_P4 group */

/**
   @addtogroup SFR_SC1DR SC1DR
   Special Function Register SC1DR
   @{ */

/**
  @var SC1DR
  Address: D9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnDR[7:0]|SC / UART Buffer Data
  |        |          |This byte is used for transmitting or receiving data on SC / UART bus.
  |        |          |A write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer.
  |        |          |Note: If SCEN(SCnCR0[0]) is not enabled, SCnDR cannot be programmed.
 */

/**
  @addtogroup SFR_SC1DR_MACRO Bit Macro Functions
  Bit Macro Functions of SC1DR
  @{ */





/**@}*/ /* end of SFR_SC1DR_MACRO group */
/**@}*/ /* end of SFR_SC1DR group */

/**
   @addtogroup SFR_SC1EGT SC1EGT
   Special Function Register SC1EGT
   @{ */

/**
  @var SC1EGT
  Address: DAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnEGT[7:0]|SC Extra Guard Time
  |        |          |This field indicates the extra guard timer value.
  |        |          |Note:
  |        |          |The counter is ETU base .
 */

/**
  @addtogroup SFR_SC1EGT_MACRO Bit Macro Functions
  Bit Macro Functions of SC1EGT
  @{ */





/**@}*/ /* end of SFR_SC1EGT_MACRO group */
/**@}*/ /* end of SFR_SC1EGT group */

/**
   @addtogroup SFR_SC1ETURD0 SC1ETURD0
   Special Function Register SC1ETURD0
   @{ */

/**
  @var SC1ETURD0
  Address: DBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ETURDIV[7:0]|LSB Bits of ETU Rate Divider
  |        |          |The field indicates the LSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR2.
 */

/**
  @addtogroup SFR_SC1ETURD0_MACRO Bit Macro Functions
  Bit Macro Functions of SC1ETURD0
  @{ */





/**@}*/ /* end of SFR_SC1ETURD0_MACRO group */
/**@}*/ /* end of SFR_SC1ETURD0 group */

/**
   @addtogroup SFR_SC1ETURD1 SC1ETURD1
   Special Function Register SC1ETURD1
   @{ */

/**
  @var SC1ETURD1
  Address: DCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ETURDIV[11:8]|MSB Bits of ETU Rate Divider
  |        |          |The field indicates the MSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR1 .
  |[6:4]   |SCDIV[2:0]|SC Clock Divider
  |        |          |000 = FSC is FSYS/1.
  |        |          |001 = FSC is FSYS/2.
  |        |          |010 = FSC is FSYS/4.
  |        |          |011 = FSC is FSYS/8. (By default.)
  |        |          |100 = FSC is FSYS/16.
  |        |          |101 = FSC is FSYS/16.
  |        |          |110 = FSC is FSYS/16.
  |        |          |111 = FSC is FSYS/16.
  |        |          |Note: that the FSC clock should be 1Mhz ~ 5Mhz for ISO/IEC 7816-3
  |        |          |standard
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_SC1ETURD1_MACRO Bit Macro Functions
  Bit Macro Functions of SC1ETURD1
  @{ */







/**@}*/ /* end of SFR_SC1ETURD1_MACRO group */
/**@}*/ /* end of SFR_SC1ETURD1 group */

/**
   @addtogroup SFR_SC1IE SC1IE
   Special Function Register SC1IE
   @{ */

/**
  @var SC1IE
  Address: DDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_SC1IE_MACRO Bit Macro Functions
  Bit Macro Functions of SC1IE
  @{ */

#define set_SC1IE_RDAIEN         SC1IE |= 0x01 /*!<Set SC1IE.RDAIEN               */
#define set_SC1IE_TBEIEN         SC1IE |= 0x02 /*!<Set SC1IE.TBEIEN               */
#define set_SC1IE_TERRIEN        SC1IE |= 0x04 /*!<Set SC1IE.TERRIEN              */
#define set_SC1IE_BGTIEN         SC1IE |= 0x08 /*!<Set SC1IE.BGTIEN               */
#define set_SC1IE_ACERRIEN       SC1IE |= 0x10 /*!<Set SC1IE.ACERRIEN             */

#define clr_SC1IE_RDAIEN         SC1IE &=~0x01 /*!<Clear SC1IE.RDAIEN             */
#define clr_SC1IE_TBEIEN         SC1IE &=~0x02 /*!<Clear SC1IE.TBEIEN             */
#define clr_SC1IE_TERRIEN        SC1IE &=~0x04 /*!<Clear SC1IE.TERRIEN            */
#define clr_SC1IE_BGTIEN         SC1IE &=~0x08 /*!<Clear SC1IE.BGTIEN             */
#define clr_SC1IE_ACERRIEN       SC1IE &=~0x10 /*!<Clear SC1IE.ACERRIEN           */

/**@}*/ /* end of SFR_SC1IE_MACRO group */
/**@}*/ /* end of SFR_SC1IE group */

/**
   @addtogroup SFR_SC1IE SC1IE
   Special Function Register SC1IE
   @{ */

/**
  @var SC1IE
  Address: DDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_SC1IE_MACRO Bit Macro Functions
  Bit Macro Functions of SC1IE
  @{ */

#define set_SC1IE_RDAIEN         SC1IE |= 0x01 /*!<Set SC1IE.RDAIEN               */
#define set_SC1IE_TBEIEN         SC1IE |= 0x02 /*!<Set SC1IE.TBEIEN               */
#define set_SC1IE_TERRIEN        SC1IE |= 0x04 /*!<Set SC1IE.TERRIEN              */
#define set_SC1IE_BGTIEN         SC1IE |= 0x08 /*!<Set SC1IE.BGTIEN               */
#define set_SC1IE_ACERRIEN       SC1IE |= 0x10 /*!<Set SC1IE.ACERRIEN             */

#define clr_SC1IE_RDAIEN         SC1IE &=~0x01 /*!<Clear SC1IE.RDAIEN             */
#define clr_SC1IE_TBEIEN         SC1IE &=~0x02 /*!<Clear SC1IE.TBEIEN             */
#define clr_SC1IE_TERRIEN        SC1IE &=~0x04 /*!<Clear SC1IE.TERRIEN            */
#define clr_SC1IE_BGTIEN         SC1IE &=~0x08 /*!<Clear SC1IE.BGTIEN             */
#define clr_SC1IE_ACERRIEN       SC1IE &=~0x10 /*!<Clear SC1IE.ACERRIEN           */

/**@}*/ /* end of SFR_SC1IE_MACRO group */
/**@}*/ /* end of SFR_SC1IE group */

/**
   @addtogroup SFR_SC1IS SC1IS
   Special Function Register SC1IS
   @{ */

/**
  @var SC1IS
  Address: DEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIF     |Receive Data Reach Interrupt Status Flag (Read Only)
  |        |          |This field is used for received data interrupt status flag.
  |        |          |Note: This field is the status flag of received data. If software
  |        |          |reads data from SC_DAT pin, this bit will be cleared automatically.
  |[1]     |TBEIF     |Transmit Buffer Empty Interrupt Status Flag (Read Only)
  |        |          |This field is used for transmit buffer empty interrupt status flag.
  |        |          |Note: This field is the status flag of transmit buffer empty state. If
  |        |          |software wants to clear this bit, software must write data to
  |        |          |DAT(SCnDR[7:0]) buffer and then this bit will be cleared
  |        |          |automatically.
  |[2]     |TERRIF    |Transfer Error Interrupt Status Flag (Read Only)
  |        |          |This field is used for transfer error interrupt status flag. The
  |        |          |transfer error states is at SC0TSR register which includes receiver
  |        |          |break error BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]) and receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |Note: This field is the status flag of BEF(SC0TSR[6]), FEF(SC0TSR[5]),
  |        |          |PEF(SC0TSR[4]), RXOV(SC0TSR[0]) and TXOV(SC0TSR[2]). So, if software
  |        |          |wants to clear this bit, software must write 0 to each field.
  |[3]     |BGTIF     |Block Guard Time Interrupt Status Flag (Read Only)
  |        |          |This field is used for block guard time interrupt status flag.
  |        |          |Note 1: This bit is valid when RXBGTEN (SCnCR0[5]) is enabled.
  |        |          |Note 2: This bit is read only, but it can be cleared by writing 0 to
  |        |          |it.
  |[4]     |ACERRIF   |Auto Convention Error Interrupt Status Flag (Read Only)
  |        |          |This field indicates auto convention sequence error. If the received
  |        |          |TS at ATR state is neither 0x3B nor 0x3F, this bit will be set.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |Tx_Er     |TX transmit error flag
  |[6]     |SIF1      |software interrupt for test
  |[7]     |loop_test |loop test interrupt flag for software test
 */

/**
  @addtogroup SFR_SC1IS_MACRO Bit Macro Functions
  Bit Macro Functions of SC1IS
  @{ */

#define set_SC1IS_RDAIF          SC1IS |= 0x01 /*!<Set SC1IS.RDAIF                */
#define set_SC1IS_TBEIF          SC1IS |= 0x02 /*!<Set SC1IS.TBEIF                */
#define set_SC1IS_TERRIF         SC1IS |= 0x04 /*!<Set SC1IS.TERRIF               */
#define set_SC1IS_BGTIF          SC1IS |= 0x08 /*!<Set SC1IS.BGTIF                */
#define set_SC1IS_ACERRIF        SC1IS |= 0x10 /*!<Set SC1IS.ACERRIF              */
#define set_SC1IS_Tx_Er          SC1IS |= 0x20 /*!<Set SC1IS.Tx_Er                */
#define set_SC1IS_SIF1           SC1IS |= 0x40 /*!<Set SC1IS.SIF1                 */
#define set_SC1IS_loop_test      SC1IS |= 0x80 /*!<Set SC1IS.loop_test            */

#define clr_SC1IS_RDAIF          SC1IS &=~0x01 /*!<Clear SC1IS.RDAIF              */
#define clr_SC1IS_TBEIF          SC1IS &=~0x02 /*!<Clear SC1IS.TBEIF              */
#define clr_SC1IS_TERRIF         SC1IS &=~0x04 /*!<Clear SC1IS.TERRIF             */
#define clr_SC1IS_BGTIF          SC1IS &=~0x08 /*!<Clear SC1IS.BGTIF              */
#define clr_SC1IS_ACERRIF        SC1IS &=~0x10 /*!<Clear SC1IS.ACERRIF            */
#define clr_SC1IS_Tx_Er          SC1IS &=~0x20 /*!<Clear SC1IS.Tx_Er              */
#define clr_SC1IS_SIF1           SC1IS &=~0x40 /*!<Clear SC1IS.SIF1               */
#define clr_SC1IS_loop_test      SC1IS &=~0x80 /*!<Clear SC1IS.loop_test          */

/**@}*/ /* end of SFR_SC1IS_MACRO group */
/**@}*/ /* end of SFR_SC1IS group */

/**
   @addtogroup SFR_SC1TSR SC1TSR
   Special Function Register SC1TSR
   @{ */

/**
  @var SC1TSR
  Address: DFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RXOV      |RX Overflow Error Status Flag (Read Only)
  |        |          |This bit is set when RX buffer overflow.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[1]     |RXEMPTY   |Receiver Buffer Empty Status Flag(Read Only)
  |        |          |This bit indicates RX buffer empty or not.
  |        |          |Note: When Rx buffer has been read by CPU, hardware sets this bit
  |        |          |high. It will be cleared when SC receives any new data.
  |[2]     |TXOV      |TX Overflow Error Interrupt Status Flag (Read Only)
  |        |          |If TX buffer is full, an additional write to DAT(SCnDR[7:0]) will
  |        |          |cause this bit be set to 1 by hardware.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[3]     |TXEMPTY   |Transmit Buffer Empty Status Flag (Read Only)
  |        |          |This bit indicates TX buffer empty or not.
  |        |          |Note: When TX buffer has been transferred to Transmitter Shift
  |        |          |Register, hardware sets this bit high. It will be cleared when writing
  |        |          |data into DAT(SCnDR[7:0]) (TX buffer not empty).
  |[4]     |PEF       |Receiver Parity Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid
  |        |          |parity bit.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |FEF       |Receiver Frame Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid stop bit (that is, the stop bit following the last data
  |        |          |bit or parity bit is detected as logic 0).
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[6]     |BEF       |Receiver Break Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received data input (RX) held
  |        |          |in the spacing state (logic 0) is longer than a full word transmission
  |        |          |time (that is, the total time of start bit + data bits + parity + stop
  |        |          |bits). .
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[7]     |ACT       |Transmit /Receive in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when TX/RX transfer is finished
  |        |          |1 = This bit is set by hardware when TX/RX transfer is in active.
 */

/**
  @addtogroup SFR_SC1TSR_MACRO Bit Macro Functions
  Bit Macro Functions of SC1TSR
  @{ */

#define set_SC1TSR_RXOV          SC1TSR |= 0x01 /*!<Set SC1TSR.RXOV                */
#define set_SC1TSR_RXEMPTY       SC1TSR |= 0x02 /*!<Set SC1TSR.RXEMPTY             */
#define set_SC1TSR_TXOV          SC1TSR |= 0x04 /*!<Set SC1TSR.TXOV                */
#define set_SC1TSR_TXEMPTY       SC1TSR |= 0x08 /*!<Set SC1TSR.TXEMPTY             */
#define set_SC1TSR_PEF           SC1TSR |= 0x10 /*!<Set SC1TSR.PEF                 */
#define set_SC1TSR_FEF           SC1TSR |= 0x20 /*!<Set SC1TSR.FEF                 */
#define set_SC1TSR_BEF           SC1TSR |= 0x40 /*!<Set SC1TSR.BEF                 */
#define set_SC1TSR_ACT           SC1TSR |= 0x80 /*!<Set SC1TSR.ACT                 */

#define clr_SC1TSR_RXOV          SC1TSR &=~0x01 /*!<Clear SC1TSR.RXOV              */
#define clr_SC1TSR_RXEMPTY       SC1TSR &=~0x02 /*!<Clear SC1TSR.RXEMPTY           */
#define clr_SC1TSR_TXOV          SC1TSR &=~0x04 /*!<Clear SC1TSR.TXOV              */
#define clr_SC1TSR_TXEMPTY       SC1TSR &=~0x08 /*!<Clear SC1TSR.TXEMPTY           */
#define clr_SC1TSR_PEF           SC1TSR &=~0x10 /*!<Clear SC1TSR.PEF               */
#define clr_SC1TSR_FEF           SC1TSR &=~0x20 /*!<Clear SC1TSR.FEF               */
#define clr_SC1TSR_BEF           SC1TSR &=~0x40 /*!<Clear SC1TSR.BEF               */
#define clr_SC1TSR_ACT           SC1TSR &=~0x80 /*!<Clear SC1TSR.ACT               */

/**@}*/ /* end of SFR_SC1TSR_MACRO group */
/**@}*/ /* end of SFR_SC1TSR group */

/**
   @addtogroup SFR_P5MF32 P5MF32
   Special Function Register P5MF32
   @{ */

/**
  @var P5MF32
  Address: E1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup SFR_P5MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P5MF32
  @{ */







/**@}*/ /* end of SFR_P5MF32_MACRO group */
/**@}*/ /* end of SFR_P5MF32 group */

/**
   @addtogroup SFR_P5MF54 P5MF54
   Special Function Register P5MF54
   @{ */

/**
  @var P5MF54
  Address: E2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup SFR_P5MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P5MF54
  @{ */







/**@}*/ /* end of SFR_P5MF54_MACRO group */
/**@}*/ /* end of SFR_P5MF54 group */

/**
   @addtogroup SFR_SC1CR0 SC1CR0
   Special Function Register SC1CR0
   @{ */

/**
  @var SC1CR0
  Address: E6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |SCEN      |SC Engine Enable Bit
  |        |          |Set this bit to 1 to enable SC operation. If this bit is cleared, SC
  |        |          |will force all transition to IDLE state
  |        |          |Note: SCEN must be set to 1 before filling in other registers, or
  |        |          |smart card will not work properly.
  |[1]     |RXOFF     |RX Transition Disable Bit
  |        |          |0 = The receiver Enabled.
  |        |          |1 = The receiver Disabled.
  |        |          |Note: If AUTOCEN (SCnCR0[3])is enabled, these fields must be ignored.
  |[2]     |TXOFF     |TX Transition Disable Bit
  |        |          |0 = The transceiver Enabled.
  |        |          |1 = The transceiver Disabled.
  |[3]     |AUTOCEN   |Auto Convention Enable Bit
  |        |          |0 = Auto-convention Disabled.
  |        |          |1 = Auto-convention Enabled. When hardware receives TS in answer to
  |        |          |reset state and the TS is direct convention, CONSEL(SCnCR0[4]) will be
  |        |          |set to 0 automatically, otherwise if the TS is inverse convention, and
  |        |          |CONSEL (SCnCR0[4]) will be set to 1.
  |        |          |Note: If software enables auto convention function, the setting step
  |        |          |must be done before Answer to Reset state and the first data must be
  |        |          |0x3B or 0x3F. After hardware received first data and stored it at
  |        |          |buffer, hardware will decided the convention and change the CONSEL
  |        |          |(SCnCR0[4]) bits automatically.
  |[4]     |CONSEL    |Convention Selection
  |        |          |0 = Direct convention.
  |        |          |1 = Inverse convention.
  |        |          |Note 1: This bit is auto clear to 0, if AUTOCEN(SCnCR0[3]) is writing
  |        |          |1
  |        |          |Note 2: If AUTOCEN(SCnCR0[3]) is enabled, hardware will decide the
  |        |          |convention and change the CONSEL (SCnCR0[4]) bits automatically after
  |        |          |SCEN (SCnCR0[0]) =1.
  |[5]     |RXBGTEN   |Receiver Block Guard Time Function Enable Bit
  |        |          |0 = Receiver block guard time function Disabled.
  |        |          |1 = Receiver block guard time function Enabled.
  |[6]     |T         |T Mode
  |        |          |0 = T0 (ISO7816-3 T = 0 mode).
  |        |          |1 = T1 (ISO7816-3 T = 1 mode).
  |        |          |The T mode controls the BGT (Block Guard Time). Block guard time means
  |        |          |the minimum bit length between the leading edges of two consecutive
  |        |          |characters between different transfer directions. This field indicates
  |        |          |the counter for the bit length of block guard time. According to
  |        |          |ISO7816-3, in T = 0 mode, the software must clear T bit to 0 for real
  |        |          |block guard time = 16.5. In T = 1 mode, the software must set T bit to
  |        |          |1 for real block guard time = 22.5.
  |        |          |Note: In T = 0 mode, the receiver will generate the parity flag on
  |        |          |PEF(SC0TSR[4]), if parity error is detected and also drive the parity
  |        |          |error signal to transceiver. In T = 1 mode, the receiver will generate
  |        |          |the parity flag on PEF(SC0TSR[4]), if parity error detected, but
  |        |          |doesn¡¦t drive the parity error signal to transceiver.
  |        |          |Note: The description please see section 6.10.6.2Error Signal and
  |        |          |Character Repetition
  |[7]     |NSB       |Stop Bit Length
  |        |          |This field indicates the length of stop bit.
  |        |          |0 = The stop bit length is 2 ETU.
  |        |          |1= The stop bit length is 1 ETU.
  |        |          |Note: The default stop bit length is 2. SC and UART adopt NSB to
  |        |          |program the stop bit length.
 */

/**
  @addtogroup SFR_SC1CR0_MACRO Bit Macro Functions
  Bit Macro Functions of SC1CR0
  @{ */

#define set_SC1CR0_SCEN          SC1CR0 |= 0x01 /*!<Set SC1CR0.SCEN                */
#define set_SC1CR0_RXOFF         SC1CR0 |= 0x02 /*!<Set SC1CR0.RXOFF               */
#define set_SC1CR0_TXOFF         SC1CR0 |= 0x04 /*!<Set SC1CR0.TXOFF               */
#define set_SC1CR0_AUTOCEN       SC1CR0 |= 0x08 /*!<Set SC1CR0.AUTOCEN             */
#define set_SC1CR0_CONSEL        SC1CR0 |= 0x10 /*!<Set SC1CR0.CONSEL              */
#define set_SC1CR0_RXBGTEN       SC1CR0 |= 0x20 /*!<Set SC1CR0.RXBGTEN             */
#define set_SC1CR0_T             SC1CR0 |= 0x40 /*!<Set SC1CR0.T                   */
#define set_SC1CR0_NSB           SC1CR0 |= 0x80 /*!<Set SC1CR0.NSB                 */

#define clr_SC1CR0_SCEN          SC1CR0 &=~0x01 /*!<Clear SC1CR0.SCEN              */
#define clr_SC1CR0_RXOFF         SC1CR0 &=~0x02 /*!<Clear SC1CR0.RXOFF             */
#define clr_SC1CR0_TXOFF         SC1CR0 &=~0x04 /*!<Clear SC1CR0.TXOFF             */
#define clr_SC1CR0_AUTOCEN       SC1CR0 &=~0x08 /*!<Clear SC1CR0.AUTOCEN           */
#define clr_SC1CR0_CONSEL        SC1CR0 &=~0x10 /*!<Clear SC1CR0.CONSEL            */
#define clr_SC1CR0_RXBGTEN       SC1CR0 &=~0x20 /*!<Clear SC1CR0.RXBGTEN           */
#define clr_SC1CR0_T             SC1CR0 &=~0x40 /*!<Clear SC1CR0.T                 */
#define clr_SC1CR0_NSB           SC1CR0 &=~0x80 /*!<Clear SC1CR0.NSB               */

/**@}*/ /* end of SFR_SC1CR0_MACRO group */
/**@}*/ /* end of SFR_SC1CR0 group */

/**
   @addtogroup SFR_SC1CR1 SC1CR1
   Special Function Register SC1CR1
   @{ */

/**
  @var SC1CR1
  Address: E7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UARTEN    |UART Mode Enable Bit
  |        |          |0 = Smart Card mode.
  |        |          |1 = UART mode.
  |        |          |Note 1:When operating in UART mode, user must set CONSEL (SCnCR0[4]) =
  |        |          |0 and AUTOCEN(SCnCR0[3]) = 0.
  |        |          |Note 2:When operating in Smart Card mode, user must set UARTEN(SCnCR1
  |        |          |[0]) = 0.
  |        |          |Note 3:When UART is enabled, hardware will generate a reset to reset
  |        |          |FIFO and internal state machine.
  |[1]     |CLKKEEP   |SC Clock Enable Bit
  |        |          |0 = SC clock generation Disabled.
  |        |          |1 = SC clock always keeps free running.
  |[2]     |RXDMAEN   |SC/UART RX DMA Enable
  |        |          |This bit enables the SC/UART RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SC/UART RX operation.
  |        |          |0 = SC/UART RX DMA Disabled
  |        |          |1 = SC/UART RX DMA Enabled
  |[3]     |TXDMAEN   |SC/UART TX DMA Enable
  |        |          |This bit enables the SC/UART TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SC/UART TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |WLS[1:0]  |Word Length Selection
  |        |          |00 = Word length is 8 bits.
  |        |          |01 = Word length is 7 bits.
  |        |          |10 = Word length is 6 bits.
  |        |          |11 = Word length is 5 bits.
  |        |          |Note: In smart card mode, this WLS must be ¡¥00¡¦
  |[6]     |PBOFF     |Parity Bit Disable Control
  |        |          |0 = Parity bit is generated or checked between the last data word bit
  |        |          |and stop bit of the serial data.
  |        |          |1 = Parity bit is not generated (transmitting data) or checked
  |        |          |(receiving data) during transfer.
  |        |          |Note: In smart card mode, this field must be ¡¥0¡¦ (default setting is
  |        |          |with parity bit)
  |[7]     |OPE       |Odd Parity Enable Bit
  |        |          |0 = Even number of logic 1¡¦s are transmitted or check the data word
  |        |          |and parity bits in receiving mode.
  |        |          |1 = Odd number of logic 1¡¦s are transmitted or check the data word and
  |        |          |parity bits in receiving mode.
  |        |          |Note: This bit has effect only when PBOFF bit is ¡¥0¡¦.
 */

/**
  @addtogroup SFR_SC1CR1_MACRO Bit Macro Functions
  Bit Macro Functions of SC1CR1
  @{ */

#define set_SC1CR1_UARTEN        SC1CR1 |= 0x01 /*!<Set SC1CR1.UARTEN              */
#define set_SC1CR1_CLKKEEP       SC1CR1 |= 0x02 /*!<Set SC1CR1.CLKKEEP             */
#define set_SC1CR1_RXDMAEN       SC1CR1 |= 0x04 /*!<Set SC1CR1.RXDMAEN             */
#define set_SC1CR1_TXDMAEN       SC1CR1 |= 0x08 /*!<Set SC1CR1.TXDMAEN             */

#define set_SC1CR1_PBOFF         SC1CR1 |= 0x40 /*!<Set SC1CR1.PBOFF               */
#define set_SC1CR1_OPE           SC1CR1 |= 0x80 /*!<Set SC1CR1.OPE                 */

#define clr_SC1CR1_UARTEN        SC1CR1 &=~0x01 /*!<Clear SC1CR1.UARTEN            */
#define clr_SC1CR1_CLKKEEP       SC1CR1 &=~0x02 /*!<Clear SC1CR1.CLKKEEP           */
#define clr_SC1CR1_RXDMAEN       SC1CR1 &=~0x04 /*!<Clear SC1CR1.RXDMAEN           */
#define clr_SC1CR1_TXDMAEN       SC1CR1 &=~0x08 /*!<Clear SC1CR1.TXDMAEN           */

#define clr_SC1CR1_PBOFF         SC1CR1 &=~0x40 /*!<Clear SC1CR1.PBOFF             */
#define clr_SC1CR1_OPE           SC1CR1 &=~0x80 /*!<Clear SC1CR1.OPE               */

/**@}*/ /* end of SFR_SC1CR1_MACRO group */
/**@}*/ /* end of SFR_SC1CR1 group */

/**
   @addtogroup SFR_I2C1CON I2C1CON
   Special Function Register I2C1CON
   @{ */

/**
  @var I2C1CON
  Address: E8H, All pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C1CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1CON
  @{ */

#define set_I2C1CON_AA           I2C1CON |= 0x04 /*!<Set I2C1CON.AA                 */
#define set_I2C1CON_SI           I2C1CON |= 0x08 /*!<Set I2C1CON.SI                 */
#define set_I2C1CON_STO          I2C1CON |= 0x10 /*!<Set I2C1CON.STO                */
#define set_I2C1CON_STA          I2C1CON |= 0x20 /*!<Set I2C1CON.STA                */
#define set_I2C1CON_I2CEN        I2C1CON |= 0x40 /*!<Set I2C1CON.I2CEN              */
#define set_I2C1CON_I            I2C1CON |= 0x80 /*!<Set I2C1CON.I                  */

#define clr_I2C1CON_AA           I2C1CON &=~0x04 /*!<Clear I2C1CON.AA               */
#define clr_I2C1CON_SI           I2C1CON &=~0x08 /*!<Clear I2C1CON.SI               */
#define clr_I2C1CON_STO          I2C1CON &=~0x10 /*!<Clear I2C1CON.STO              */
#define clr_I2C1CON_STA          I2C1CON &=~0x20 /*!<Clear I2C1CON.STA              */
#define clr_I2C1CON_I2CEN        I2C1CON &=~0x40 /*!<Clear I2C1CON.I2CEN            */
#define clr_I2C1CON_I            I2C1CON &=~0x80 /*!<Clear I2C1CON.I                */

/**@}*/ /* end of SFR_I2C1CON_MACRO group */
/**@}*/ /* end of SFR_I2C1CON group */

/**
   @addtogroup SFR_P3MF54 P3MF54
   Special Function Register P3MF54
   @{ */

/**
  @var P3MF54
  Address: E9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup SFR_P3MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P3MF54
  @{ */







/**@}*/ /* end of SFR_P3MF54_MACRO group */
/**@}*/ /* end of SFR_P3MF54 group */

/**
   @addtogroup SFR_P3MF76 P3MF76
   Special Function Register P3MF76
   @{ */

/**
  @var P3MF76
  Address: EAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup SFR_P3MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P3MF76
  @{ */







/**@}*/ /* end of SFR_P3MF76_MACRO group */
/**@}*/ /* end of SFR_P3MF76 group */

/**
   @addtogroup SFR_P4MF10 P4MF10
   Special Function Register P4MF10
   @{ */

/**
  @var P4MF10
  Address: EBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup SFR_P4MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P4MF10
  @{ */







/**@}*/ /* end of SFR_P4MF10_MACRO group */
/**@}*/ /* end of SFR_P4MF10 group */

/**
   @addtogroup SFR_P4MF32 P4MF32
   Special Function Register P4MF32
   @{ */

/**
  @var P4MF32
  Address: ECH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup SFR_P4MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P4MF32
  @{ */







/**@}*/ /* end of SFR_P4MF32_MACRO group */
/**@}*/ /* end of SFR_P4MF32 group */

/**
   @addtogroup SFR_P4MF54 P4MF54
   Special Function Register P4MF54
   @{ */

/**
  @var P4MF54
  Address: EDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup SFR_P4MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P4MF54
  @{ */







/**@}*/ /* end of SFR_P4MF54_MACRO group */
/**@}*/ /* end of SFR_P4MF54 group */

/**
   @addtogroup SFR_P4MF76 P4MF76
   Special Function Register P4MF76
   @{ */

/**
  @var P4MF76
  Address: EEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup SFR_P4MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P4MF76
  @{ */







/**@}*/ /* end of SFR_P4MF76_MACRO group */
/**@}*/ /* end of SFR_P4MF76 group */

/**
   @addtogroup SFR_P5MF10 P5MF10
   Special Function Register P5MF10
   @{ */

/**
  @var P5MF10
  Address: EFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup SFR_P5MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P5MF10
  @{ */







/**@}*/ /* end of SFR_P5MF10_MACRO group */
/**@}*/ /* end of SFR_P5MF10 group */

/**
   @addtogroup SFR_P1MF76 P1MF76
   Special Function Register P1MF76
   @{ */

/**
  @var P1MF76
  Address: F1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */
sfr P1MF76                     =0xF1;

/**
  @addtogroup SFR_P1MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P1MF76
  @{ */







/**@}*/ /* end of SFR_P1MF76_MACRO group */
/**@}*/ /* end of SFR_P1MF76 group */

/**
   @addtogroup SFR_P2MF10 P2MF10
   Special Function Register P2MF10
   @{ */

/**
  @var P2MF10
  Address: F2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup SFR_P2MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P2MF10
  @{ */







/**@}*/ /* end of SFR_P2MF10_MACRO group */
/**@}*/ /* end of SFR_P2MF10 group */

/**
   @addtogroup SFR_P2MF32 P2MF32
   Special Function Register P2MF32
   @{ */

/**
  @var P2MF32
  Address: F3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup SFR_P2MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P2MF32
  @{ */







/**@}*/ /* end of SFR_P2MF32_MACRO group */
/**@}*/ /* end of SFR_P2MF32 group */

/**
   @addtogroup SFR_P2MF54 P2MF54
   Special Function Register P2MF54
   @{ */

/**
  @var P2MF54
  Address: F4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup SFR_P2MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P2MF54
  @{ */







/**@}*/ /* end of SFR_P2MF54_MACRO group */
/**@}*/ /* end of SFR_P2MF54 group */

/**
   @addtogroup SFR_P2MF76 P2MF76
   Special Function Register P2MF76
   @{ */

/**
  @var P2MF76
  Address: F5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup SFR_P2MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P2MF76
  @{ */







/**@}*/ /* end of SFR_P2MF76_MACRO group */
/**@}*/ /* end of SFR_P2MF76 group */

/**
   @addtogroup SFR_P3MF10 P3MF10
   Special Function Register P3MF10
   @{ */

/**
  @var P3MF10
  Address: F6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup SFR_P3MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P3MF10
  @{ */







/**@}*/ /* end of SFR_P3MF10_MACRO group */
/**@}*/ /* end of SFR_P3MF10 group */

/**
   @addtogroup SFR_P3MF32 P3MF32
   Special Function Register P3MF32
   @{ */

/**
  @var P3MF32
  Address: F7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup SFR_P3MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P3MF32
  @{ */







/**@}*/ /* end of SFR_P3MF32_MACRO group */
/**@}*/ /* end of SFR_P3MF32 group */

/**
   @addtogroup SFR_S1CON S1CON
   Special Function Register S1CON
   @{ */

/**
  @var S1CON
  Address: F8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI_1      |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2_1 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[1]     |TI_1      |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[2]     |RB8_1     |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 1 Mode 2 or 3. In Mode 1, RB8_1 is the logic level of the
  |        |          |received stop bit. SM2_1 bit as logic 1 has restriction for exception.
  |        |          |RB8_1 is not used in Mode 0.
  |[3]     |TB8_1     |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |1 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN_1     |Receiving Enable
  |        |          |0 = Serial port 1 reception Disabled.
  |        |          |1 = Serial port 1 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN_1 = 1 and RI_1 = 0.
  |[5]     |SM2_1     |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 1 mode.
  |        |          |Mode 0:
  |        |          |No effect.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1_1     |Check with bit 7 description.
  |[7]     |SM0_1/FE_1|Serial Port 1 Mode Select
  |        |          |SMOD0_1 (T3CON.6) = 0:
  |        |          |See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
  |        |          |SMOD0_1 (T3CON.6) = 1:
  |        |          |SM0_1/FE_1 bit is used as frame error (FE) status flag. It is cleared
  |        |          |by software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */

/**
  @addtogroup SFR_S1CON_MACRO Bit Macro Functions
  Bit Macro Functions of S1CON
  @{ */

#define set_S1CON_RI_1           S1CON |= 0x01 /*!<Set S1CON.RI_1                 */
#define set_S1CON_TI_1           S1CON |= 0x02 /*!<Set S1CON.TI_1                 */
#define set_S1CON_RB8_1          S1CON |= 0x04 /*!<Set S1CON.RB8_1                */
#define set_S1CON_TB8_1          S1CON |= 0x08 /*!<Set S1CON.TB8_1                */
#define set_S1CON_REN_1          S1CON |= 0x10 /*!<Set S1CON.REN_1                */
#define set_S1CON_SM2_1          S1CON |= 0x20 /*!<Set S1CON.SM2_1                */
#define set_S1CON_SM1_1          S1CON |= 0x40 /*!<Set S1CON.SM1_1                */
#define set_S1CON_SM0_1/FE_1     S1CON |= 0x80 /*!<Set S1CON.SM0_1/FE_1           */

#define clr_S1CON_RI_1           S1CON &=~0x01 /*!<Clear S1CON.RI_1               */
#define clr_S1CON_TI_1           S1CON &=~0x02 /*!<Clear S1CON.TI_1               */
#define clr_S1CON_RB8_1          S1CON &=~0x04 /*!<Clear S1CON.RB8_1              */
#define clr_S1CON_TB8_1          S1CON &=~0x08 /*!<Clear S1CON.TB8_1              */
#define clr_S1CON_REN_1          S1CON &=~0x10 /*!<Clear S1CON.REN_1              */
#define clr_S1CON_SM2_1          S1CON &=~0x20 /*!<Clear S1CON.SM2_1              */
#define clr_S1CON_SM1_1          S1CON &=~0x40 /*!<Clear S1CON.SM1_1              */
#define clr_S1CON_SM0_1/FE_1     S1CON &=~0x80 /*!<Clear S1CON.SM0_1/FE_1         */

/**@}*/ /* end of SFR_S1CON_MACRO group */
/**@}*/ /* end of SFR_S1CON group */

/**
   @addtogroup SFR_P0MF10 P0MF10
   Special Function Register P0MF10
   @{ */

/**
  @var P0MF10
  Address: F9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

sfr P0MF10 = 0xF9;

/**
  @addtogroup SFR_P0MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P0MF10
  @{ */


/**@}*/ /* end of SFR_P0MF10_MACRO group */
/**@}*/ /* end of SFR_P0MF10 group */

/**
   @addtogroup SFR_P0MF32 P0MF32
   Special Function Register P0MF32
   @{ */

/**
  @var P0MF32
  Address: FAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

sfr P0MF32 = 0xFA;
 
/**
  @addtogroup SFR_P0MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P0MF32
  @{ */


/**@}*/ /* end of SFR_P0MF32_MACRO group */
/**@}*/ /* end of SFR_P0MF32 group */

/**
   @addtogroup SFR_P0MF54 P0MF54
   Special Function Register P0MF54
   @{ */

/**
  @var P0MF54
  Address: FBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */
sfr P0MF54 = 0xFB;

/**
  @addtogroup SFR_P0MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P0MF54
  @{ */


/**@}*/ /* end of SFR_P0MF54_MACRO group */
/**@}*/ /* end of SFR_P0MF54 group */

/**
   @addtogroup SFR_P0MF76 P0MF76
   Special Function Register P0MF76
   @{ */

/**
  @var P0MF76
  Address: FCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */
 
sfr P0MF76 = 0xFC;
/**
  @addtogroup SFR_P0MF76_MACRO Bit Macro Functions
  Bit Macro Functions of P0MF76
  @{ */


/**@}*/ /* end of SFR_P0MF76_MACRO group */
/**@}*/ /* end of SFR_P0MF76 group */

/**
   @addtogroup SFR_P1MF10 P1MF10
   Special Function Register P1MF10
   @{ */

/**
  @var P1MF10
  Address: FDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */
sfr P1MF10 = 0xFD;

/**
  @addtogroup SFR_P1MF10_MACRO Bit Macro Functions
  Bit Macro Functions of P1MF10
  @{ */

/**@}*/ /* end of SFR_P1MF10_MACRO group */
/**@}*/ /* end of SFR_P1MF10 group */

/**
   @addtogroup SFR_P1MF32 P1MF32
   Special Function Register P1MF32
   @{ */

/**
  @var P1MF32
  Address: FEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */
sfr P1MF32 = 0xFE;

/**
  @addtogroup SFR_P1MF32_MACRO Bit Macro Functions
  Bit Macro Functions of P1MF32
  @{ */


/**@}*/ /* end of SFR_P1MF32_MACRO group */
/**@}*/ /* end of SFR_P1MF32 group */

/**
   @addtogroup SFR_P1MF54 P1MF54
   Special Function Register P1MF54
   @{ */

/**
  @var P1MF54
  Address: FFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */
sfr P1MF54 = 0xFF;


/**
  @addtogroup SFR_P1MF54_MACRO Bit Macro Functions
  Bit Macro Functions of P1MF54
  @{ */


/**@}*/ /* end of SFR_P1MF54_MACRO group */
/**@}*/ /* end of SFR_P1MF54 group */

/**@}*/ /* end of SFR_PAGE2 group */


/**
 @addtogroup SFR_PAGE3 SFR Page 3
 @{ */

/**
   @addtogroup SFR_P0 P0
   Special Function Register P0
   @{ */

/**
  @var P0
  Address: 80H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P0_MACRO Bit Macro Functions
  Bit Macro Functions of P0
  @{ */





/**@}*/ /* end of SFR_P0_MACRO group */
/**@}*/ /* end of SFR_P0 group */

/**
   @addtogroup SFR_DPL DPL
   Special Function Register DPL
   @{ */

/**
  @var DPL
  Address: 82H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[7:0] |Data Pointer Low Byte
  |        |          |This is the low byte of 16-bit data pointer. DPL combined with DPH
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPL_MACRO Bit Macro Functions
  Bit Macro Functions of DPL
  @{ */





/**@}*/ /* end of SFR_DPL_MACRO group */
/**@}*/ /* end of SFR_DPL group */

/**
   @addtogroup SFR_DPH DPH
   Special Function Register DPH
   @{ */

/**
  @var DPH
  Address: 83H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[15:8]|Data Pointer High Byte
  |        |          |This is the high byte of 16-bit data pointer. DPH combined with DPL
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup SFR_DPH_MACRO Bit Macro Functions
  Bit Macro Functions of DPH
  @{ */





/**@}*/ /* end of SFR_DPH_MACRO group */
/**@}*/ /* end of SFR_DPH group */


/**
   @addtogroup SFR_TCON TCON
   Special Function Register TCON
   @{ */

/**
  @var TCON
  Address: 88H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IT0       |External Interrupt 0 Type Select
  |        |          |This bit selects by which type that INT0 is triggered.
  |        |          |0 = INT0 is low level triggered.
  |        |          |1 = INT0 is falling edge triggered.
  |[1]     |IE0       |External Interrupt 0 Edge Flag
  |        |          |If IT0 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT0 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT0 input signal¡¦s logic level. Software cannot control it.
  |[2]     |IT1       |External Interrupt 1 Type Select
  |        |          |This bit selects by which type that INT1 is triggered.
  |        |          |0 = INT1 is low level triggered.
  |        |          |1 = INT1 is fallinVg edge triggered.
  |[3]     |IE1       |External Interrupt 1 Edge Flag
  |        |          |If IT1 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT1 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT1 input signal¡¦s logic level. Software cannot control it.
  |[4]     |TR0       |Timer 0 Run Control
  |        |          |0 = Timer 0 Disabled. Clearing this bit will halt Timer 0 and the
  |        |          |current count will be preserved in TH0 and TL0.
  |        |          |1 = Timer 0 Enabled.
  |[5]     |TF0       |Timer 0 Overflow Flag
  |        |          |This bit is set when Timer 0 overflows. It is automatically cleared
  |        |          |via hardware when the program executes the Timer 0 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
  |[6]     |TR1       |Timer 1 Run Control
  |        |          |0 = Timer 1 Disabled. Clearing this bit will halt Timer 1 and the
  |        |          |current count will be preserved in TH1 and TL1.
  |        |          |1 = Timer 1 Enabled.
  |[7]     |TF1       |Timer 1 Overflow Flag
  |        |          |This bit is set when Timer 1 overflows. It is automatically cleared by
  |        |          |hardware when the program executes the Timer 1 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
 */

/**
  @addtogroup SFR_TCON_MACRO Bit Macro Functions
  Bit Macro Functions of TCON
  @{ */

#define set_TCON_IT0             TCON |= 0x01 /*!<Set TCON.IT0                   */
#define set_TCON_IE0             TCON |= 0x02 /*!<Set TCON.IE0                   */
#define set_TCON_IT1             TCON |= 0x04 /*!<Set TCON.IT1                   */
#define set_TCON_IE1             TCON |= 0x08 /*!<Set TCON.IE1                   */
#define set_TCON_TR0             TCON |= 0x10 /*!<Set TCON.TR0                   */
#define set_TCON_TF0             TCON |= 0x20 /*!<Set TCON.TF0                   */
#define set_TCON_TR1             TCON |= 0x40 /*!<Set TCON.TR1                   */
#define set_TCON_TF1             TCON |= 0x80 /*!<Set TCON.TF1                   */

#define clr_TCON_IT0             TCON &=~0x01 /*!<Clear TCON.IT0                 */
#define clr_TCON_IE0             TCON &=~0x02 /*!<Clear TCON.IE0                 */
#define clr_TCON_IT1             TCON &=~0x04 /*!<Clear TCON.IT1                 */
#define clr_TCON_IE1             TCON &=~0x08 /*!<Clear TCON.IE1                 */
#define clr_TCON_TR0             TCON &=~0x10 /*!<Clear TCON.TR0                 */
#define clr_TCON_TF0             TCON &=~0x20 /*!<Clear TCON.TF0                 */
#define clr_TCON_TR1             TCON &=~0x40 /*!<Clear TCON.TR1                 */
#define clr_TCON_TF1             TCON &=~0x80 /*!<Clear TCON.TF1                 */

/**@}*/ /* end of SFR_TCON_MACRO group */
/**@}*/ /* end of SFR_TCON group */


/**
   @addtogroup SFR_DMA0CR1 DMA0CR1
   Special Function Register DMA0CR1
   @{ */

/**
  @var DMA0CR1
  Address: 8AH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA0CR1_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CR1
  @{ */

#define set_DMA0CR1_CRCEN        DMA0CR1 |= 0x01 /*!<Set DMA0CR1.CRCEN              */
#define set_DMA0CR1_REFIN        DMA0CR1 |= 0x02 /*!<Set DMA0CR1.REFIN              */
#define set_DMA0CR1_REFOUT       DMA0CR1 |= 0x04 /*!<Set DMA0CR1.REFOUT             */
#define set_DMA0CR1_XOROUT       DMA0CR1 |= 0x08 /*!<Set DMA0CR1.XOROUT             */

#define clr_DMA0CR1_CRCEN        DMA0CR1 &=~0x01 /*!<Clear DMA0CR1.CRCEN            */
#define clr_DMA0CR1_REFIN        DMA0CR1 &=~0x02 /*!<Clear DMA0CR1.REFIN            */
#define clr_DMA0CR1_REFOUT       DMA0CR1 &=~0x04 /*!<Clear DMA0CR1.REFOUT           */
#define clr_DMA0CR1_XOROUT       DMA0CR1 &=~0x08 /*!<Clear DMA0CR1.XOROUT           */

/**@}*/ /* end of SFR_DMA0CR1_MACRO group */
/**@}*/ /* end of SFR_DMA0CR1 group */

/**
   @addtogroup SFR_DMA1CR1 DMA1CR1
   Special Function Register DMA1CR1
   @{ */

/**
  @var DMA1CR1
  Address: 8BH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA1CR1_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CR1
  @{ */

#define set_DMA1CR1_CRCEN        DMA1CR1 |= 0x01 /*!<Set DMA1CR1.CRCEN              */
#define set_DMA1CR1_REFIN        DMA1CR1 |= 0x02 /*!<Set DMA1CR1.REFIN              */
#define set_DMA1CR1_REFOUT       DMA1CR1 |= 0x04 /*!<Set DMA1CR1.REFOUT             */
#define set_DMA1CR1_XOROUT       DMA1CR1 |= 0x08 /*!<Set DMA1CR1.XOROUT             */

#define clr_DMA1CR1_CRCEN        DMA1CR1 &=~0x01 /*!<Clear DMA1CR1.CRCEN            */
#define clr_DMA1CR1_REFIN        DMA1CR1 &=~0x02 /*!<Clear DMA1CR1.REFIN            */
#define clr_DMA1CR1_REFOUT       DMA1CR1 &=~0x04 /*!<Clear DMA1CR1.REFOUT           */
#define clr_DMA1CR1_XOROUT       DMA1CR1 &=~0x08 /*!<Clear DMA1CR1.XOROUT           */

/**@}*/ /* end of SFR_DMA1CR1_MACRO group */
/**@}*/ /* end of SFR_DMA1CR1 group */

/**
   @addtogroup SFR_DMA2CR1 DMA2CR1
   Special Function Register DMA2CR1
   @{ */

/**
  @var DMA2CR1
  Address: 8CH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA2CR1_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CR1
  @{ */

#define set_DMA2CR1_CRCEN        DMA2CR1 |= 0x01 /*!<Set DMA2CR1.CRCEN              */
#define set_DMA2CR1_REFIN        DMA2CR1 |= 0x02 /*!<Set DMA2CR1.REFIN              */
#define set_DMA2CR1_REFOUT       DMA2CR1 |= 0x04 /*!<Set DMA2CR1.REFOUT             */
#define set_DMA2CR1_XOROUT       DMA2CR1 |= 0x08 /*!<Set DMA2CR1.XOROUT             */

#define clr_DMA2CR1_CRCEN        DMA2CR1 &=~0x01 /*!<Clear DMA2CR1.CRCEN            */
#define clr_DMA2CR1_REFIN        DMA2CR1 &=~0x02 /*!<Clear DMA2CR1.REFIN            */
#define clr_DMA2CR1_REFOUT       DMA2CR1 &=~0x04 /*!<Clear DMA2CR1.REFOUT           */
#define clr_DMA2CR1_XOROUT       DMA2CR1 &=~0x08 /*!<Clear DMA2CR1.XOROUT           */

/**@}*/ /* end of SFR_DMA2CR1_MACRO group */
/**@}*/ /* end of SFR_DMA2CR1 group */

/**
   @addtogroup SFR_DMA3CR1 DMA3CR1
   Special Function Register DMA3CR1
   @{ */

/**
  @var DMA3CR1
  Address: 8DH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_DMA3CR1_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CR1
  @{ */

#define set_DMA3CR1_CRCEN        DMA3CR1 |= 0x01 /*!<Set DMA3CR1.CRCEN              */
#define set_DMA3CR1_REFIN        DMA3CR1 |= 0x02 /*!<Set DMA3CR1.REFIN              */
#define set_DMA3CR1_REFOUT       DMA3CR1 |= 0x04 /*!<Set DMA3CR1.REFOUT             */
#define set_DMA3CR1_XOROUT       DMA3CR1 |= 0x08 /*!<Set DMA3CR1.XOROUT             */

#define clr_DMA3CR1_CRCEN        DMA3CR1 &=~0x01 /*!<Clear DMA3CR1.CRCEN            */
#define clr_DMA3CR1_REFIN        DMA3CR1 &=~0x02 /*!<Clear DMA3CR1.REFIN            */
#define clr_DMA3CR1_REFOUT       DMA3CR1 &=~0x04 /*!<Clear DMA3CR1.REFOUT           */
#define clr_DMA3CR1_XOROUT       DMA3CR1 &=~0x08 /*!<Clear DMA3CR1.XOROUT           */

/**@}*/ /* end of SFR_DMA3CR1_MACRO group */
/**@}*/ /* end of SFR_DMA3CR1 group */

/**
   @addtogroup SFR_P1 P1
   Special Function Register P1
   @{ */

/**
  @var P1
  Address: 90H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P1_MACRO Bit Macro Functions
  Bit Macro Functions of P1
  @{ */





/**@}*/ /* end of SFR_P1_MACRO group */
/**@}*/ /* end of SFR_P1 group */

/**
   @addtogroup SFR_SFRS SFRS
   Special Function Register SFRS
   @{ */

/**
  @var SFRS
  Address: 91H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SFRPAGE[1:0]|SFR Page Select
  |        |          |00 = Instructions access SFR Page 0.
  |        |          |01 = Instructions access SFR Page 1.
  |        |          |10 = Instructions access SFR page 2.
  |        |          |11 = Instructions access SFR page 3.
 */

/**
  @addtogroup SFR_SFRS_MACRO Bit Macro Functions
  Bit Macro Functions of SFRS
  @{ */





/**@}*/ /* end of SFR_SFRS_MACRO group */
/**@}*/ /* end of SFR_SFRS group */

/**
   @addtogroup SFR_DMA0CRC DMA0CRC
   Special Function Register DMA0CRC
   @{ */

/**
  @var DMA0CRC
  Address: 92H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup SFR_DMA0CRC_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0CRC
  @{ */





/**@}*/ /* end of SFR_DMA0CRC_MACRO group */
/**@}*/ /* end of SFR_DMA0CRC group */

/**
   @addtogroup SFR_DMA1CRC DMA1CRC
   Special Function Register DMA1CRC
   @{ */

/**
  @var DMA1CRC
  Address: 93H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup SFR_DMA1CRC_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1CRC
  @{ */





/**@}*/ /* end of SFR_DMA1CRC_MACRO group */
/**@}*/ /* end of SFR_DMA1CRC group */

/**
   @addtogroup SFR_DMA2CRC DMA2CRC
   Special Function Register DMA2CRC
   @{ */

/**
  @var DMA2CRC
  Address: 94H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup SFR_DMA2CRC_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2CRC
  @{ */





/**@}*/ /* end of SFR_DMA2CRC_MACRO group */
/**@}*/ /* end of SFR_DMA2CRC group */

/**
   @addtogroup SFR_DMA3CRC DMA3CRC
   Special Function Register DMA3CRC
   @{ */

/**
  @var DMA3CRC
  Address: 95H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup SFR_DMA3CRC_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3CRC
  @{ */





/**@}*/ /* end of SFR_DMA3CRC_MACRO group */
/**@}*/ /* end of SFR_DMA3CRC group */


/**
   @addtogroup SFR_DMA0SEED DMA0SEED
   Special Function Register DMA0SEED
   @{ */

/**
  @var DMA0SEED
  Address: 9AH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup SFR_DMA0SEED_MACRO Bit Macro Functions
  Bit Macro Functions of DMA0SEED
  @{ */





/**@}*/ /* end of SFR_DMA0SEED_MACRO group */
/**@}*/ /* end of SFR_DMA0SEED group */

/**
   @addtogroup SFR_DMA1SEED DMA1SEED
   Special Function Register DMA1SEED
   @{ */

/**
  @var DMA1SEED
  Address: 9BH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup SFR_DMA1SEED_MACRO Bit Macro Functions
  Bit Macro Functions of DMA1SEED
  @{ */





/**@}*/ /* end of SFR_DMA1SEED_MACRO group */
/**@}*/ /* end of SFR_DMA1SEED group */

/**
   @addtogroup SFR_DMA2SEED DMA2SEED
   Special Function Register DMA2SEED
   @{ */

/**
  @var DMA2SEED
  Address: 9CH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup SFR_DMA2SEED_MACRO Bit Macro Functions
  Bit Macro Functions of DMA2SEED
  @{ */





/**@}*/ /* end of SFR_DMA2SEED_MACRO group */
/**@}*/ /* end of SFR_DMA2SEED group */

/**
   @addtogroup SFR_DMA3SEED DMA3SEED
   Special Function Register DMA3SEED
   @{ */

/**
  @var DMA3SEED
  Address: 9DH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup SFR_DMA3SEED_MACRO Bit Macro Functions
  Bit Macro Functions of DMA3SEED
  @{ */





/**@}*/ /* end of SFR_DMA3SEED_MACRO group */
/**@}*/ /* end of SFR_DMA3SEED group */

/**
   @addtogroup SFR_P2 P2
   Special Function Register P2
   @{ */

/**
  @var P2
  Address: A0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P2_MACRO Bit Macro Functions
  Bit Macro Functions of P2
  @{ */





/**@}*/ /* end of SFR_P2_MACRO group */
/**@}*/ /* end of SFR_P2 group */

/**
   @addtogroup SFR_RTCINIT RTCINIT
   Special Function Register RTCINIT
   @{ */

/**
  @var RTCINIT
  Address: A1H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |INIT[0]/ACTIVE|RTC Active Status (Read Only)
  |        |          |0 = RTC is at reset state.
  |        |          |1 = RTC is at normal active state.
  |[1]     |INIT[1]/HOLD|RTC HOLD Flag (Read Only)
  |        |          |0 = RTC hold flag is inavtive.
  |        |          |1 = RTC hold flag is active.
  |[7:2]   |INIT[7:2] |RTC Initiation (Write Only)
  |        |          |When RTC block is powered on, RTC is at reset state. User has to write
  |        |          |a number (0x 57) to INIT to make RTC leave reset state. Once the
  |        |          |INIT[7:0] is written as 0x57, the RTC will be in un-reset state
  |        |          |permanently. Once the INIT[7:0] is written as 0x5F, the RTC will be in
  |        |          |hold and un-reset state permanently. This Byte is TA protected.
  |        |          |The INIT is a write-only field and read value will be always 0.
 */

/**
  @addtogroup SFR_RTCINIT_MACRO Bit Macro Functions
  Bit Macro Functions of RTCINIT
  @{ */


/**@}*/ /* end of SFR_RTCINIT_MACRO group */
/**@}*/ /* end of SFR_RTCINIT group */

/**
   @addtogroup SFR_RTCRWEN RTCRWEN
   Special Function Register RTCRWEN
   @{ */

/**
  @var RTCRWEN
  Address: A2H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RWENF     |RTC Register Access Enable Flag (Read Only)
  |        |          |0 = RTC register read/write Disabled.
  |        |          |1 = RTC register read/write Enabled.
  |        |          |Note: RWENF will be masked to 0 during RTC busy.
  |[1]     |FADJTG    |RTC Counter Update (Read and Write)
  |        |          |Set this bit = 1 by software. It will update to RTC counter from
  |        |          |RTCFREQADJ1/0. After RTC counter updated, this bit will auto recover
  |        |          |to 0 by hardware.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCRWEN_MACRO Bit Macro Functions
  Bit Macro Functions of RTCRWEN
  @{ */

#define set_RTCRWEN_RWENF        RTCRWEN |= 0x01 /*!<Set RTCRWEN.RWENF              */
#define set_RTCRWEN_FADJTG       RTCRWEN |= 0x02 /*!<Set RTCRWEN.FADJTG             */

#define clr_RTCRWEN_RWENF        RTCRWEN &=~0x01 /*!<Clear RTCRWEN.RWENF            */
#define clr_RTCRWEN_FADJTG       RTCRWEN &=~0x02 /*!<Clear RTCRWEN.FADJTG           */

/**@}*/ /* end of SFR_RTCRWEN_MACRO group */
/**@}*/ /* end of SFR_RTCRWEN group */

/**
   @addtogroup SFR_RTCCLKSEL RTCCLKSEL
   Special Function Register RTCCLKSEL
   @{ */

/**
  @var RTCCLKSEL
  Address: A3H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |C32KS     |Clock 32K Source Selection:
  |        |          |0 = Internal 32K clock is from 32.786 kHz crystal .
  |        |          |1 = Internal 32K clock is from LIRC38.4 kHz.
  |[7:1]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCLKSEL_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCLKSEL
  @{ */

#define set_RTCCLKSEL_C32KS      RTCCLKSEL |= 0x01 /*!<Set RTCCLKSEL.C32KS            */

#define clr_RTCCLKSEL_C32KS      RTCCLKSEL &=~0x01 /*!<Clear RTCCLKSEL.C32KS          */

/**@}*/ /* end of SFR_RTCCLKSEL_MACRO group */
/**@}*/ /* end of SFR_RTCCLKSEL group */

/**
   @addtogroup SFR_RTCFREQADJ0 RTCFREQADJ0
   Special Function Register RTCFREQADJ0
   @{ */

/**
  @var RTCFREQADJ0
  Address: A4H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |FRACTION  |Fraction Part
  |        |          |Formula: FRACTION = (fraction part of detected value) X 64.
  |        |          |Note: Digit in FCR must be expressed as hexadecimal number.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCFREQADJ0_MACRO Bit Macro Functions
  Bit Macro Functions of RTCFREQADJ0
  @{ */





/**@}*/ /* end of SFR_RTCFREQADJ0_MACRO group */
/**@}*/ /* end of SFR_RTCFREQADJ0 group */

/**
   @addtogroup SFR_RTCFREQADJ1 RTCFREQADJ1
   Special Function Register RTCFREQADJ1
   @{ */

/**
  @var RTCFREQADJ1
  Address: A5H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4:0]   |INTEGER   |Integer Part
  |        |          |00000 = Integer part of detected value is 32752.
  |        |          |00001 = Integer part of detected value is 32753.
  |        |          |00010 = Integer part of detected value is 32754.
  |        |          |00011 = Integer part of detected value is 32755.
  |        |          |00100 = Integer part of detected value is 32756.
  |        |          |00101 = Integer part of detected value is 32757.
  |        |          |00110 = Integer part of detected value is 32758.
  |        |          |00111 = Integer part of detected value is 32759.
  |        |          |01000 = Integer part of detected value is 32760.
  |        |          |01001 = Integer part of detected value is 32761.
  |        |          |01010 = Integer part of detected value is 32762.
  |        |          |01011 = Integer part of detected value is 32763.
  |        |          |01100 = Integer part of detected value is 32764.
  |        |          |01101 = Integer part of detected value is 32765.
  |        |          |01110 = Integer part of detected value is 32766.
  |        |          |01111 = Integer part of detected value is 32767.
  |        |          |10000 = Integer part of detected value is 32768.
  |        |          |10001 = Integer part of detected value is 32769.
  |        |          |10010 = Integer part of detected value is 32770.
  |        |          |10011 = Integer part of detected value is 32771.
  |        |          |10100 = Integer part of detected value is 32772.
  |        |          |10101 = Integer part of detected value is 32773.
  |        |          |10110 = Integer part of detected value is 32774.
  |        |          |10111 = Integer part of detected value is 32775.
  |        |          |11000 = Integer part of detected value is 32776.
  |        |          |11001 = Integer part of detected value is 32777.
  |        |          |11010 = Integer part of detected value is 32778.
  |        |          |11011 = Integer part of detected value is 32779.
  |        |          |11100 = Integer part of detected value is 32780.
  |        |          |11101 = Integer part of detected value is 32781.
  |        |          |11110 = Integer part of detected value is 32782.
  |        |          |11111 = Integer part of detected value is 32783.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCFREQADJ1_MACRO Bit Macro Functions
  Bit Macro Functions of RTCFREQADJ1
  @{ */





/**@}*/ /* end of SFR_RTCFREQADJ1_MACRO group */
/**@}*/ /* end of SFR_RTCFREQADJ1 group */

/**
   @addtogroup SFR_RTCINTEN RTCINTEN
   Special Function Register RTCINTEN
   @{ */

/**
  @var RTCINTEN
  Address: A6H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ALMIEN    |Alarm Interrupt Enable Bit
  |        |          |Set ALMIEN to 1 can also enable chip wake-up function when RTC alarm
  |        |          |interrupt event is generated.
  |        |          |0 = RTC Alarm interrupt Disabled.
  |        |          |1 = RTC Alarm interrupt Enabled.
  |[1]     |TICKIEN   |Time Tick Interrupt Enable Bit
  |        |          |Set TICKIEN to 1 can also enable chip wake-up function when RTC tick
  |        |          |interrupt event is generated.
  |        |          |0 = RTC Time Tick interrupt Disabled.
  |        |          |1 = RTC Time Tick interrupt Enabled.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCINTEN_MACRO Bit Macro Functions
  Bit Macro Functions of RTCINTEN
  @{ */

#define set_RTCINTEN_ALMIEN      RTCINTEN |= 0x01 /*!<Set RTCINTEN.ALMIEN            */
#define set_RTCINTEN_TICKIEN     RTCINTEN |= 0x02 /*!<Set RTCINTEN.TICKIEN           */

#define clr_RTCINTEN_ALMIEN      RTCINTEN &=~0x01 /*!<Clear RTCINTEN.ALMIEN          */
#define clr_RTCINTEN_TICKIEN     RTCINTEN &=~0x02 /*!<Clear RTCINTEN.TICKIEN         */

/**@}*/ /* end of SFR_RTCINTEN_MACRO group */
/**@}*/ /* end of SFR_RTCINTEN group */

/**
   @addtogroup SFR_RTCINTSTS RTCINTSTS
   Special Function Register RTCINTSTS
   @{ */

/**
  @var RTCINTSTS
  Address: A7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ALMIF     |RTC Alarm Interrupt Flag
  |        |          |0 = Alarm condition is not matched.
  |        |          |1 = Alarm condition is matched.
  |        |          |Note: Write 1 to clear this bit.
  |[1]     |TICKIF    |RTC Time Tick Interrupt Flag
  |        |          |0 = Tick condition does not occur.
  |        |          |1 = Tick condition occur.
  |        |          |Note: Write 1 to clear this bit.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCINTSTS_MACRO Bit Macro Functions
  Bit Macro Functions of RTCINTSTS
  @{ */

#define set_RTCINTSTS_ALMIF      RTCINTSTS |= 0x01 /*!<Set RTCINTSTS.ALMIF            */
#define set_RTCINTSTS_TICKIF     RTCINTSTS |= 0x02 /*!<Set RTCINTSTS.TICKIF           */

#define clr_RTCINTSTS_ALMIF      RTCINTSTS &=~0x01 /*!<Clear RTCINTSTS.ALMIF          */
#define clr_RTCINTSTS_TICKIF     RTCINTSTS &=~0x02 /*!<Clear RTCINTSTS.TICKIF         */

/**@}*/ /* end of SFR_RTCINTSTS_MACRO group */
/**@}*/ /* end of SFR_RTCINTSTS group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EX0       |Enable External Interrupt 0
  |        |          |0 = External interrupt 0 Disabled.
  |        |          |1 = External interrupt 0 interrupt Enable. When interrupt generated
  |        |          |INT0 pin set 1.
  |[1]     |ET0       |Enable Timer 0 Interrupt
  |        |          |0 = Timer 0 interrupt Disabled.
  |        |          |1 = Timer 0 interrupt Enable. When interrupt generated TF0 (TCON.5)
  |        |          |set 1.
  |[2]     |EX1       |Enable External Interrupt 1
  |        |          |0 = External interrupt 1 Disabled.
  |        |          |1 = External interrupt 1 interrupt Enable. When interrupt generated
  |        |          |INT1 pin set 1.
  |[3]     |ET1       |Enable Timer 1 Interrupt
  |        |          |0 = Timer 1 interrupt Disabled.
  |        |          |1 = Timer 1 interrupt Enable. When interrupt generated TF1 (TCON.7)
  |        |          |set 1.
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Serial port 0 interrupt Enable. When interrupt generated TI
  |        |          |(SCON.1) or RI (SCON.0) set 1.
  |[5]     |EBOD      |Enable Brown-Out Interrupt
  |        |          |0 = Brown-out detection interrupt Disabled.
  |        |          |1 = Brown-out detection interrupt Enable. When interrupt generated BOF
  |        |          |(BODCON0.3) set 1.
  |[6]     |EADC      |Enable ADC Interrupt
  |        |          |0 = ADC interrupt Disabled.
  |        |          |1 = ADC interrupt Enable. When interrupt generated ADCF (ADCCON0.7)
  |        |          |set 1.
  |[7]     |EA        |Enable All Interrupt
  |        |          |This bit globally enables/disables all interrupts that are
  |        |          |individually enabled.
  |        |          |0 = All interrupt sources Disabled.
  |        |          |1 = Each interrupt Enabled depending on its individual mask setting.
  |        |          |Individual interrupts will occur if enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_EX0               IE |= 0x01 /*!<Set IE.EX0                     */
#define set_IE_ET0               IE |= 0x02 /*!<Set IE.ET0                     */
#define set_IE_EX1               IE |= 0x04 /*!<Set IE.EX1                     */
#define set_IE_ET1               IE |= 0x08 /*!<Set IE.ET1                     */
#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */
#define set_IE_EBOD              IE |= 0x20 /*!<Set IE.EBOD                    */
#define set_IE_EADC              IE |= 0x40 /*!<Set IE.EADC                    */
#define set_IE_EA                IE |= 0x80 /*!<Set IE.EA                      */

#define clr_IE_EX0               IE &=~0x01 /*!<Clear IE.EX0                   */
#define clr_IE_ET0               IE &=~0x02 /*!<Clear IE.ET0                   */
#define clr_IE_EX1               IE &=~0x04 /*!<Clear IE.EX1                   */
#define clr_IE_ET1               IE &=~0x08 /*!<Clear IE.ET1                   */
#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */
#define clr_IE_EBOD              IE &=~0x20 /*!<Clear IE.EBOD                  */
#define clr_IE_EADC              IE &=~0x40 /*!<Clear IE.EADC                  */
#define clr_IE_EA                IE &=~0x80 /*!<Clear IE.EA                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_IE IE
   Special Function Register IE
   @{ */

/**
  @var IE
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Interrupt generated by TI (SCON.1) or RI (SCON.0) Enabled.
 */

/**
  @addtogroup SFR_IE_MACRO Bit Macro Functions
  Bit Macro Functions of IE
  @{ */

#define set_IE_ES                IE |= 0x10 /*!<Set IE.ES                      */

#define clr_IE_ES                IE &=~0x10 /*!<Clear IE.ES                    */

/**@}*/ /* end of SFR_IE_MACRO group */
/**@}*/ /* end of SFR_IE group */

/**
   @addtogroup SFR_RTCTIMESEC RTCTIMESEC
   Special Function Register RTCTIMESEC
   @{ */

/**
  @var RTCTIMESEC
  Address: A9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |SEC[3:0]  |1-Sec Time Digit (0~9)
  |[6:4]   |TENSEC[2:0]|10-Sec Time Digit (0~5)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTIMESEC_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTIMESEC
  @{ */







/**@}*/ /* end of SFR_RTCTIMESEC_MACRO group */
/**@}*/ /* end of SFR_RTCTIMESEC group */

/**
   @addtogroup SFR_RTCTIMEMIN RTCTIMEMIN
   Special Function Register RTCTIMEMIN
   @{ */

/**
  @var RTCTIMEMIN
  Address: AAH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MIN[3:0]  |1-Min Time Digit (0~9)
  |[6:4]   |TENMIN[2:0]|10-Min Time Digit (0~5)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTIMEMIN_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTIMEMIN
  @{ */







/**@}*/ /* end of SFR_RTCTIMEMIN_MACRO group */
/**@}*/ /* end of SFR_RTCTIMEMIN group */

/**
   @addtogroup SFR_RTCTIMEHR RTCTIMEHR
   Special Function Register RTCTIMEHR
   @{ */

/**
  @var RTCTIMEHR
  Address: ABH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |HR[3:0]   |1-Hour Time Digit (0~9)
  |[5:4]   |TENHR[1:0]|10-Hour Time Digit (0~2)
  |        |          |When RTC runs as 12-hour time scale mode, RTCTIMEHR[5] (the high bit
  |        |          |of TENHR[1:0]) means AM/PM indication (If RTCTIMEHR[5] is 1, it
  |        |          |indicates PM time message.)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTIMEHR_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTIMEHR
  @{ */







/**@}*/ /* end of SFR_RTCTIMEHR_MACRO group */
/**@}*/ /* end of SFR_RTCTIMEHR group */

/**
   @addtogroup SFR_RTCTIMEHZ RTCTIMEHZ
   Special Function Register RTCTIMEHZ
   @{ */

/**
  @var RTCTIMEHZ
  Address: ACH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6:0]   |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTIMEHZ_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTIMEHZ
  @{ */





/**@}*/ /* end of SFR_RTCTIMEHZ_MACRO group */
/**@}*/ /* end of SFR_RTCTIMEHZ group */

/**
   @addtogroup SFR_RTCCALDAY RTCCALDAY
   Special Function Register RTCCALDAY
   @{ */

/**
  @var RTCCALDAY
  Address: ADH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |DAY       |1-Day Calendar Digit (0~9)
  |[5:4]   |TENDAY    |10-Day Calendar Digit (0~3)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCALDAY_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALDAY
  @{ */







/**@}*/ /* end of SFR_RTCCALDAY_MACRO group */
/**@}*/ /* end of SFR_RTCCALDAY group */

/**
   @addtogroup SFR_RTCCALMON RTCCALMON
   Special Function Register RTCCALMON
   @{ */

/**
  @var RTCCALMON
  Address: AEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MON[3:0]  |1-Month Calendar Digit (0~9)
  |[4]     |TENMON    |10-Month Calendar Digit (0~1)
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCALMON_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALMON
  @{ */


#define set_RTCCALMON_TENMON     RTCCALMON |= 0x10 /*!<Set RTCCALMON.TENMON           */


#define clr_RTCCALMON_TENMON     RTCCALMON &=~0x10 /*!<Clear RTCCALMON.TENMON         */

/**@}*/ /* end of SFR_RTCCALMON_MACRO group */
/**@}*/ /* end of SFR_RTCCALMON group */

/**
   @addtogroup SFR_RTCCALYEAR RTCCALYEAR
   Special Function Register RTCCALYEAR
   @{ */

/**
  @var RTCCALYEAR
  Address: AFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |YEAR      |1-Year Calendar Digit (0~9)
  |[7:4]   |TENYEAR   |10-Year Calendar Digit (0~9)
 */

/**
  @addtogroup SFR_RTCCALYEAR_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALYEAR
  @{ */







/**@}*/ /* end of SFR_RTCCALYEAR_MACRO group */
/**@}*/ /* end of SFR_RTCCALYEAR group */

/**
   @addtogroup SFR_P3 P3
   Special Function Register P3
   @{ */

/**
  @var P3
  Address: B0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P3_MACRO Bit Macro Functions
  Bit Macro Functions of P3
  @{ */





/**@}*/ /* end of SFR_P3_MACRO group */
/**@}*/ /* end of SFR_P3 group */

/**
   @addtogroup SFR_RTCTALMSEC RTCTALMSEC
   Special Function Register RTCTALMSEC
   @{ */

/**
  @var RTCTALMSEC
  Address: B1H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |SEC[3:0]  |1-Sec Time Digit of Alarm Setting (0~9)
  |[6:4]   |TENSEC[2:0]|10-Sec Time Digit of Alarm Setting (0~5)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTALMSEC_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTALMSEC
  @{ */







/**@}*/ /* end of SFR_RTCTALMSEC_MACRO group */
/**@}*/ /* end of SFR_RTCTALMSEC group */

/**
   @addtogroup SFR_RTCTALMMIN RTCTALMMIN
   Special Function Register RTCTALMMIN
   @{ */

/**
  @var RTCTALMMIN
  Address: B2H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MIN[3:0]  |1-Min Time Digit of Alarm Setting (0~9)
  |[6:4]   |TENMIN[2:0]|10-Min Time Digit of Alarm Setting (0~5)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTALMMIN_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTALMMIN
  @{ */







/**@}*/ /* end of SFR_RTCTALMMIN_MACRO group */
/**@}*/ /* end of SFR_RTCTALMMIN group */

/**
   @addtogroup SFR_RTCTALMHR RTCTALMHR
   Special Function Register RTCTALMHR
   @{ */

/**
  @var RTCTALMHR
  Address: B3H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |HR[3:0]   |1-Hour Time Digit of Alarm Setting (0~9)
  |[5:4]   |TENHR[1:0]|10-Hour Time Digit of Alarm Setting (0~2)
  |        |          |When RTC runs as 12-hour time scale mode, RTCTIMEHR[5] (the high bit
  |        |          |of TENHR[1:0]) means AM/PM indication (If RTCTIMEHR[5] is 1, it
  |        |          |indicates PM time message.)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTALMHR_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTALMHR
  @{ */







/**@}*/ /* end of SFR_RTCTALMHR_MACRO group */
/**@}*/ /* end of SFR_RTCTALMHR group */

/**
   @addtogroup SFR_RTCTALMHZ RTCTALMHZ
   Special Function Register RTCTALMHZ
   @{ */

/**
  @var RTCTALMHZ
  Address: B4H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6:0]   |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTALMHZ_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTALMHZ
  @{ */





/**@}*/ /* end of SFR_RTCTALMHZ_MACRO group */
/**@}*/ /* end of SFR_RTCTALMHZ group */

/**
   @addtogroup SFR_RTCCALMDAY RTCCALMDAY
   Special Function Register RTCCALMDAY
   @{ */

/**
  @var RTCCALMDAY
  Address: B5H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |DAY[3:0]  |1-Day Calendar Digit of Alarm Setting (0~9)
  |[5:4]   |TENDAY[1:0]|10-Day Calendar Digit of Alarm Setting (0~3)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCALMDAY_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALMDAY
  @{ */







/**@}*/ /* end of SFR_RTCCALMDAY_MACRO group */
/**@}*/ /* end of SFR_RTCCALMDAY group */

/**
   @addtogroup SFR_RTCCALMMON RTCCALMMON
   Special Function Register RTCCALMMON
   @{ */

/**
  @var RTCCALMMON
  Address: B6H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MON[3:0]  |1-Month Calendar Digit of Alarm Setting (0~9)
  |[4]     |TENMON    |10-Month Calendar Digit of Alarm Setting (0~1)
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCALMMON_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALMMON
  @{ */


#define set_RTCCALMMON_TENMON    RTCCALMMON |= 0x10 /*!<Set RTCCALMMON.TENMON          */


#define clr_RTCCALMMON_TENMON    RTCCALMMON &=~0x10 /*!<Clear RTCCALMMON.TENMON        */

/**@}*/ /* end of SFR_RTCCALMMON_MACRO group */
/**@}*/ /* end of SFR_RTCCALMMON group */

/**
   @addtogroup SFR_RTCCALMYEAR RTCCALMYEAR
   Special Function Register RTCCALMYEAR
   @{ */

/**
  @var RTCCALMYEAR
  Address: B7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |YEAR[3:0] |1-Year Calendar Digit of Alarm Setting (0~9)
  |[7:4]   |TENYEAR[3:0]|10-Year Calendar Digit of Alarm Setting (0~9)
 */

/**
  @addtogroup SFR_RTCCALMYEAR_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCALMYEAR
  @{ */







/**@}*/ /* end of SFR_RTCCALMYEAR_MACRO group */
/**@}*/ /* end of SFR_RTCCALMYEAR group */

/**
   @addtogroup SFR_IP IP
   Special Function Register IP
   @{ */

/**
  @var IP
  Address: B8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0       |External interrupt 0 priority low bit
  |[1]     |PT0       |Timer 0 interrupt priority low bit
  |[2]     |PX1       |External interrupt 1 priority low bit
  |[3]     |PT1       |Timer 1 interrupt priority low bit
  |[4]     |PS        |Serial port 0 interrupt priority low bit
  |[5]     |PBOD      |Brown-out detection interrupt priority low bit
  |[6]     |PADC      |ADC interrupt priority low bit
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_IP_MACRO Bit Macro Functions
  Bit Macro Functions of IP
  @{ */

#define set_IP_PX0               IP |= 0x01 /*!<Set IP.PX0                     */
#define set_IP_PT0               IP |= 0x02 /*!<Set IP.PT0                     */
#define set_IP_PX1               IP |= 0x04 /*!<Set IP.PX1                     */
#define set_IP_PT1               IP |= 0x08 /*!<Set IP.PT1                     */
#define set_IP_PS                IP |= 0x10 /*!<Set IP.PS                      */
#define set_IP_PBOD              IP |= 0x20 /*!<Set IP.PBOD                    */
#define set_IP_PADC              IP |= 0x40 /*!<Set IP.PADC                    */

#define clr_IP_PX0               IP &=~0x01 /*!<Clear IP.PX0                   */
#define clr_IP_PT0               IP &=~0x02 /*!<Clear IP.PT0                   */
#define clr_IP_PX1               IP &=~0x04 /*!<Clear IP.PX1                   */
#define clr_IP_PT1               IP &=~0x08 /*!<Clear IP.PT1                   */
#define clr_IP_PS                IP &=~0x10 /*!<Clear IP.PS                    */
#define clr_IP_PBOD              IP &=~0x20 /*!<Clear IP.PBOD                  */
#define clr_IP_PADC              IP &=~0x40 /*!<Clear IP.PADC                  */

/**@}*/ /* end of SFR_IP_MACRO group */
/**@}*/ /* end of SFR_IP group */

/**
   @addtogroup SFR_RTCCLKFMT RTCCLKFMT
   Special Function Register RTCCLKFMT
   @{ */

/**
  @var RTCCLKFMT
  Address: B9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |24HEN     |24-Hour / 12-Hour Time Scale Selection
  |        |          |Indicates that RTCTIMEHR and RTCTALMHR are in 24-hour time scale or
  |        |          |12-hour time scale
  |        |          |0 = 12-hour time scale with AM and PM indication selected.
  |        |          |1 = 24-hour time scale selected.
  |[1]     |HZCNTEN   |Sub-Second Counter Enable Bit
  |        |          |0 = HZCNT disabled in RTCTIMEHZ and RTCTALMHZ.
  |        |          |1 = HZCNT enabled in RTCTIMEHZ and RTCTALMHZ .
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCLKFMT_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCLKFMT
  @{ */

#define set_RTCCLKFMT_24HEN      RTCCLKFMT |= 0x01 /*!<Set RTCCLKFMT.24HEN            */
#define set_RTCCLKFMT_HZCNTEN    RTCCLKFMT |= 0x02 /*!<Set RTCCLKFMT.HZCNTEN          */

#define clr_RTCCLKFMT_24HEN      RTCCLKFMT &=~0x01 /*!<Clear RTCCLKFMT.24HEN          */
#define clr_RTCCLKFMT_HZCNTEN    RTCCLKFMT &=~0x02 /*!<Clear RTCCLKFMT.HZCNTEN        */

/**@}*/ /* end of SFR_RTCCLKFMT_MACRO group */
/**@}*/ /* end of SFR_RTCCLKFMT group */

/**
   @addtogroup SFR_RTCCLKTEST RTCCLKTEST
   Special Function Register RTCCLKTEST
   @{ */

/**
  @var RTCCLKTEST
  Address: BAH, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |X64EN     |Speed X64 Enable
  |        |          |Indicates that RTC Time speedup to x64 scale
  |        |          |0 = Normal RTC Time
  |        |          |1 = RTC Time speedup to x64 scale
  |[7:1]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCLKTEST_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCLKTEST
  @{ */

#define set_RTCCLKTEST_X64EN     RTCCLKTEST |= 0x01 /*!<Set RTCCLKTEST.X64EN           */

#define clr_RTCCLKTEST_X64EN     RTCCLKTEST &=~0x01 /*!<Clear RTCCLKTEST.X64EN         */

/**@}*/ /* end of SFR_RTCCLKTEST_MACRO group */
/**@}*/ /* end of SFR_RTCCLKTEST group */

/**
   @addtogroup SFR_RTCWEEKDAY RTCWEEKDAY
   Special Function Register RTCWEEKDAY
   @{ */

/**
  @var RTCWEEKDAY
  Address: BBH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WEEKDAY   |Day of the Week Register
  |        |          |000 = Sunday.
  |        |          |001 = Monday.
  |        |          |010 = Tuesday.
  |        |          |011 = Wednesday.
  |        |          |100 = Thursday.
  |        |          |101 = Friday.
  |        |          |110 = Saturday.
  |        |          |111 = Reserved.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCWEEKDAY_MACRO Bit Macro Functions
  Bit Macro Functions of RTCWEEKDAY
  @{ */





/**@}*/ /* end of SFR_RTCWEEKDAY_MACRO group */
/**@}*/ /* end of SFR_RTCWEEKDAY group */

/**
   @addtogroup SFR_RTCLEAPYEAR RTCLEAPYEAR
   Special Function Register RTCLEAPYEAR
   @{ */

/**
  @var RTCLEAPYEAR
  Address: BCH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |LEAPYEAR  |Leap Year Indication Register (Read Only)
  |        |          |0 = This year is not a leap year.
  |        |          |1 = This year is leap year.
  |[7:1]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCLEAPYEAR_MACRO Bit Macro Functions
  Bit Macro Functions of RTCLEAPYEAR
  @{ */

#define set_RTCLEAPYEAR_LEAPYEAR RTCLEAPYEAR |= 0x01 /*!<Set RTCLEAPYEAR.LEAPYEAR       */

#define clr_RTCLEAPYEAR_LEAPYEAR RTCLEAPYEAR &=~0x01 /*!<Clear RTCLEAPYEAR.LEAPYEAR     */

/**@}*/ /* end of SFR_RTCLEAPYEAR_MACRO group */
/**@}*/ /* end of SFR_RTCLEAPYEAR group */

/**
   @addtogroup SFR_RTCTICK RTCTICK
   Special Function Register RTCTICK
   @{ */

/**
  @var RTCTICK
  Address: BDH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |TICK[2:0] |Time Tick Register
  |        |          |These bits are used to select RTC time tick period for Periodic Time
  |        |          |Tick Interrupt request.
  |        |          |000 = Time tick is 1 second.
  |        |          |001 = Time tick is 1/2 second.
  |        |          |010 = Time tick is 1/4 second.
  |        |          |011 = Time tick is 1/8 second.
  |        |          |100 = Time tick is 1/16 second.
  |        |          |101 = Time tick is 1/32 second.
  |        |          |110 = Time tick is 1/64 second.
  |        |          |111 = Time tick is 1/128 second.
  |        |          |Note: This register can be read back after the RTC register access
  |        |          |enable bit RWENF (RTCRWEN[0]) is active.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTICK_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTICK
  @{ */





/**@}*/ /* end of SFR_RTCTICK_MACRO group */
/**@}*/ /* end of SFR_RTCTICK group */

/**
   @addtogroup SFR_RTCTAMSK RTCTAMSK
   Special Function Register RTCTAMSK
   @{ */

/**
  @var RTCTAMSK
  Address: BEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |MSEC      |Mask 1-Sec Time Digit of Alarm Setting (0~9)
  |[1]     |MTENSEC   |Mask 10-Sec Time Digit of Alarm Setting (0~5)
  |[2]     |MMIN      |Mask 1-Min Time Digit of Alarm Setting (0~9)
  |[3]     |MTENMIN   |Mask 10-Min Time Digit of Alarm Setting (0~5)
  |[4]     |MHR       |Mask 1-Hour Time Digit of Alarm Setting (0~9)
  |[5]     |MTENHR    |Mask 10-Hour Time Digit of Alarm Setting (0~2)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCTAMSK_MACRO Bit Macro Functions
  Bit Macro Functions of RTCTAMSK
  @{ */

#define set_RTCTAMSK_MSEC        RTCTAMSK |= 0x01 /*!<Set RTCTAMSK.MSEC              */
#define set_RTCTAMSK_MTENSEC     RTCTAMSK |= 0x02 /*!<Set RTCTAMSK.MTENSEC           */
#define set_RTCTAMSK_MMIN        RTCTAMSK |= 0x04 /*!<Set RTCTAMSK.MMIN              */
#define set_RTCTAMSK_MTENMIN     RTCTAMSK |= 0x08 /*!<Set RTCTAMSK.MTENMIN           */
#define set_RTCTAMSK_MHR         RTCTAMSK |= 0x10 /*!<Set RTCTAMSK.MHR               */
#define set_RTCTAMSK_MTENHR      RTCTAMSK |= 0x20 /*!<Set RTCTAMSK.MTENHR            */

#define clr_RTCTAMSK_MSEC        RTCTAMSK &=~0x01 /*!<Clear RTCTAMSK.MSEC            */
#define clr_RTCTAMSK_MTENSEC     RTCTAMSK &=~0x02 /*!<Clear RTCTAMSK.MTENSEC         */
#define clr_RTCTAMSK_MMIN        RTCTAMSK &=~0x04 /*!<Clear RTCTAMSK.MMIN            */
#define clr_RTCTAMSK_MTENMIN     RTCTAMSK &=~0x08 /*!<Clear RTCTAMSK.MTENMIN         */
#define clr_RTCTAMSK_MHR         RTCTAMSK &=~0x10 /*!<Clear RTCTAMSK.MHR             */
#define clr_RTCTAMSK_MTENHR      RTCTAMSK &=~0x20 /*!<Clear RTCTAMSK.MTENHR          */

/**@}*/ /* end of SFR_RTCTAMSK_MACRO group */
/**@}*/ /* end of SFR_RTCTAMSK group */

/**
   @addtogroup SFR_RTCCAMSK RTCCAMSK
   Special Function Register RTCCAMSK
   @{ */

/**
  @var RTCCAMSK
  Address: BFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |MDAY      |Mask 1-Day Calendar Digit of Alarm Setting (0~9)
  |[1]     |MTENDAY   |Mask 10-Day Calendar Digit of Alarm Setting (0~3)
  |[2]     |MMON      |Mask 1-Month Calendar Digit of Alarm Setting (0~9)
  |[3]     |MTENMON   |Mask 10-Month Calendar Digit of Alarm Setting (0~1)
  |[4]     |MYEAR     |Mask 1-Year Calendar Digit of Alarm Setting (0~9)
  |[5]     |MTENYEAR  |Mask 10-Year Calendar Digit of Alarm Setting (0~9)
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_RTCCAMSK_MACRO Bit Macro Functions
  Bit Macro Functions of RTCCAMSK
  @{ */

#define set_RTCCAMSK_MDAY        RTCCAMSK |= 0x01 /*!<Set RTCCAMSK.MDAY              */
#define set_RTCCAMSK_MTENDAY     RTCCAMSK |= 0x02 /*!<Set RTCCAMSK.MTENDAY           */
#define set_RTCCAMSK_MMON        RTCCAMSK |= 0x04 /*!<Set RTCCAMSK.MMON              */
#define set_RTCCAMSK_MTENMON     RTCCAMSK |= 0x08 /*!<Set RTCCAMSK.MTENMON           */
#define set_RTCCAMSK_MYEAR       RTCCAMSK |= 0x10 /*!<Set RTCCAMSK.MYEAR             */
#define set_RTCCAMSK_MTENYEAR    RTCCAMSK |= 0x20 /*!<Set RTCCAMSK.MTENYEAR          */

#define clr_RTCCAMSK_MDAY        RTCCAMSK &=~0x01 /*!<Clear RTCCAMSK.MDAY            */
#define clr_RTCCAMSK_MTENDAY     RTCCAMSK &=~0x02 /*!<Clear RTCCAMSK.MTENDAY         */
#define clr_RTCCAMSK_MMON        RTCCAMSK &=~0x04 /*!<Clear RTCCAMSK.MMON            */
#define clr_RTCCAMSK_MTENMON     RTCCAMSK &=~0x08 /*!<Clear RTCCAMSK.MTENMON         */
#define clr_RTCCAMSK_MYEAR       RTCCAMSK &=~0x10 /*!<Clear RTCCAMSK.MYEAR           */
#define clr_RTCCAMSK_MTENYEAR    RTCCAMSK &=~0x20 /*!<Clear RTCCAMSK.MTENYEAR        */

/**@}*/ /* end of SFR_RTCCAMSK_MACRO group */
/**@}*/ /* end of SFR_RTCCAMSK group */

/**
   @addtogroup SFR_I2C0CON I2C0CON
   Special Function Register I2C0CON
   @{ */

/**
  @var I2C0CON
  Address: C0H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C0CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C0CON
  @{ */

#define set_I2C0CON_AA           I2C0CON |= 0x04 /*!<Set I2C0CON.AA                 */
#define set_I2C0CON_SI           I2C0CON |= 0x08 /*!<Set I2C0CON.SI                 */
#define set_I2C0CON_STO          I2C0CON |= 0x10 /*!<Set I2C0CON.STO                */
#define set_I2C0CON_STA          I2C0CON |= 0x20 /*!<Set I2C0CON.STA                */
#define set_I2C0CON_I2CEN        I2C0CON |= 0x40 /*!<Set I2C0CON.I2CEN              */
#define set_I2C0CON_I            I2C0CON |= 0x80 /*!<Set I2C0CON.I                  */

#define clr_I2C0CON_AA           I2C0CON &=~0x04 /*!<Clear I2C0CON.AA               */
#define clr_I2C0CON_SI           I2C0CON &=~0x08 /*!<Clear I2C0CON.SI               */
#define clr_I2C0CON_STO          I2C0CON &=~0x10 /*!<Clear I2C0CON.STO              */
#define clr_I2C0CON_STA          I2C0CON &=~0x20 /*!<Clear I2C0CON.STA              */
#define clr_I2C0CON_I2CEN        I2C0CON &=~0x40 /*!<Clear I2C0CON.I2CEN            */
#define clr_I2C0CON_I            I2C0CON &=~0x80 /*!<Clear I2C0CON.I                */

/**@}*/ /* end of SFR_I2C0CON_MACRO group */
/**@}*/ /* end of SFR_I2C0CON group */



/**@}*/ /* end of SFR_TA_MACRO group */
/**@}*/ /* end of SFR_TA group */

/**
   @addtogroup SFR_P4 P4
   Special Function Register P4
   @{ */

/**
  @var P4
  Address: D8H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup SFR_P4_MACRO Bit Macro Functions
  Bit Macro Functions of P4
  @{ */





/**@}*/ /* end of SFR_P4_MACRO group */
/**@}*/ /* end of SFR_P4 group */

/**
   @addtogroup SFR_I2C1CON I2C1CON
   Special Function Register I2C1CON
   @{ */

/**
  @var I2C1CON
  Address: E8H, All pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup SFR_I2C1CON_MACRO Bit Macro Functions
  Bit Macro Functions of I2C1CON
  @{ */

#define set_I2C1CON_AA           I2C1CON |= 0x04 /*!<Set I2C1CON.AA                 */
#define set_I2C1CON_SI           I2C1CON |= 0x08 /*!<Set I2C1CON.SI                 */
#define set_I2C1CON_STO          I2C1CON |= 0x10 /*!<Set I2C1CON.STO                */
#define set_I2C1CON_STA          I2C1CON |= 0x20 /*!<Set I2C1CON.STA                */
#define set_I2C1CON_I2CEN        I2C1CON |= 0x40 /*!<Set I2C1CON.I2CEN              */
#define set_I2C1CON_I            I2C1CON |= 0x80 /*!<Set I2C1CON.I                  */

#define clr_I2C1CON_AA           I2C1CON &=~0x04 /*!<Clear I2C1CON.AA               */
#define clr_I2C1CON_SI           I2C1CON &=~0x08 /*!<Clear I2C1CON.SI               */
#define clr_I2C1CON_STO          I2C1CON &=~0x10 /*!<Clear I2C1CON.STO              */
#define clr_I2C1CON_STA          I2C1CON &=~0x20 /*!<Clear I2C1CON.STA              */
#define clr_I2C1CON_I2CEN        I2C1CON &=~0x40 /*!<Clear I2C1CON.I2CEN            */
#define clr_I2C1CON_I            I2C1CON &=~0x80 /*!<Clear I2C1CON.I                */

/**@}*/ /* end of SFR_I2C1CON_MACRO group */
/**@}*/ /* end of SFR_I2C1CON group */

/**
   @addtogroup SFR_LCDCPALCT1 LCDCPALCT1
   Special Function Register LCDCPALCT1
   @{ */

/**
  @var LCDCPALCT1
  Address: E9H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LCDCPOVCT [9:8]|LCD Chage Pump Counter Overflow Trig Interrupt Value .
  |        |          |High byte of Trig LCD interrupt alarm counter value for user setting.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDCPALCT1_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCPALCT1
  @{ */





/**@}*/ /* end of SFR_LCDCPALCT1_MACRO group */
/**@}*/ /* end of SFR_LCDCPALCT1 group */

/**
   @addtogroup SFR_LCDCPCT1 LCDCPCT1
   Special Function Register LCDCPCT1
   @{ */

/**
  @var LCDCPCT1
  Address: EAH, Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LCDCPCT[9:8]|LCD Current Frame Chage Pump Counter Value High Byte
  |        |          |Each time after interrupt this byte reload LCD current frame charge
  |        |          |pump value low byte.
  |        |          |This byte is read only.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDCPCT1_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCPCT1
  @{ */





/**@}*/ /* end of SFR_LCDCPCT1_MACRO group */
/**@}*/ /* end of SFR_LCDCPCT1 group */

/**
   @addtogroup SFR_LCDCPUMP LCDCPUMP
   Special Function Register LCDCPUMP
   @{ */

/**
  @var LCDCPUMP
  Address: F1H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |VCP_SEL[5:0]|Charge Pump Voltage Set Value
  |        |          |000000 = 5.4V
  |        |          |000101 = 5.2V
  |        |          |001010 = 5.0V
  |        |          |001110 = 4.8V
  |        |          |010011 = 4.6V
  |        |          |011000 = 4.4V
  |        |          |011101 = 4.2V
  |        |          |100010 = 4.0V
  |        |          |100111 = 3.8V
  |        |          |101100 = 3.6V
  |        |          |110000 = 3.4V
  |        |          |110101 = 3.2V
  |        |          |111010 = 3.0V
  |        |          |111111 = 2.8V
  |        |          |Note: LCD pump up voltage with limitation VLCD(max.) = 1.8 * VDD. LCD
  |        |          |pump down voltage without this limitation.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDCPUMP_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCPUMP
  @{ */





/**@}*/ /* end of SFR_LCDCPUMP_MACRO group */
/**@}*/ /* end of SFR_LCDCPUMP group */

/**
   @addtogroup SFR_LCDADJUST LCDADJUST
   Special Function Register LCDADJUST
   @{ */

/**
  @var LCDADJUST
  Address: F2H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |CP_ILOAD  |Charge Pump Loading Option
  |        |          |0 = 100uA loading
  |        |          |1 = 150uA loading
  |[2]     |L_ICMP    |Comparator Operating Current Option
  |        |          |0 = large current operating
  |        |          |1= small current operating
  |[3]     |SYN_SAV   |Buffer Output Stage Sync
  |        |          |0 = Buffer output stage no sync. to PWR_NOSAVING(output stage off/on)
  |        |          |1 = Buffer output stage sync. to PWR_NOSAVING(buffer off/on)
  |[4]     |PUMP_HYS  |Charge Pump Hysteresis
  |        |          |0 = 00
  |        |          |1 = 01
  |[5]     |BUF_V2_iset|Buffer_V2_Iset
  |        |          |0 = 00
  |        |          |1 = 10
  |[6]     |BUF_V2_iset|Buffer_V2_Iset
  |        |          |0 = 00
  |        |          |1= 10
  |[7]     |BUF_V3_iset|Buffer_V3_Iset
  |        |          |0 = 00
  |        |          |1= 10
 */

/**
  @addtogroup SFR_LCDADJUST_MACRO Bit Macro Functions
  Bit Macro Functions of LCDADJUST
  @{ */

#define set_LCDADJUST_CP_ILOAD   LCDADJUST |= 0x02 /*!<Set LCDADJUST.CP_ILOAD         */
#define set_LCDADJUST_L_ICMP     LCDADJUST |= 0x04 /*!<Set LCDADJUST.L_ICMP           */
#define set_LCDADJUST_SYN_SAV    LCDADJUST |= 0x08 /*!<Set LCDADJUST.SYN_SAV          */
#define set_LCDADJUST_PUMP_HYS   LCDADJUST |= 0x10 /*!<Set LCDADJUST.PUMP_HYS         */
#define set_LCDADJUST_BUF_V1_iset LCDADJUST |= 0x20 /*!<Set LCDADJUST.BUF_V2_iset      */
#define set_LCDADJUST_BUF_V2_iset LCDADJUST |= 0x40 /*!<Set LCDADJUST.BUF_V2_iset      */
#define set_LCDADJUST_BUF_V3_iset LCDADJUST |= 0x80 /*!<Set LCDADJUST.BUF_V3_iset      */

#define clr_LCDADJUST_CP_ILOAD   LCDADJUST &=~0x02 /*!<Clear LCDADJUST.CP_ILOAD       */
#define clr_LCDADJUST_L_ICMP     LCDADJUST &=~0x04 /*!<Clear LCDADJUST.L_ICMP         */
#define clr_LCDADJUST_SYN_SAV    LCDADJUST &=~0x08 /*!<Clear LCDADJUST.SYN_SAV        */
#define clr_LCDADJUST_PUMP_HYS   LCDADJUST &=~0x10 /*!<Clear LCDADJUST.PUMP_HYS       */
#define clr_LCDADJUST_BUF_V1_iset LCDADJUST &=~0x20 /*!<Clear LCDADJUST.BUF_V2_iset    */
#define clr_LCDADJUST_BUF_V2_iset LCDADJUST &=~0x40 /*!<Clear LCDADJUST.BUF_V2_iset    */
#define clr_LCDADJUST_BUF_V3_iset LCDADJUST &=~0x80 /*!<Clear LCDADJUST.BUF_V3_iset    */

/**@}*/ /* end of SFR_LCDADJUST_MACRO group */
/**@}*/ /* end of SFR_LCDADJUST group */

/**
   @addtogroup SFR_LCDCON1 LCDCON1
   Special Function Register LCDCON1
   @{ */

/**
  @var LCDCON1
  Address: F4H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |Reserved  |Reserved
  |[1]     |RE_MODE   |LCD Resistor Enhance Mode Enable
  |        |          |This bit going to define LCD as resistor enhance mode and only invalid
  |        |          |when R_MODE(LCDMODE[7]) bit is enabled.
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable
  |        |          |Note: when R_MODE and RE_MODE is enabled, BUF_MODE should be disabled.
  |[2]     |LCDIE     |LCD Interrupt Enable
  |        |          |The Interrupt flag show in LCDIS.
  |        |          |0 = Disable
  |        |          |1 = Enable
  |[3]     |LCDIS     |LCD Interrupt Source Select
  |        |          |0 = LCD charge pump counter alarm interrupt
  |        |          |When LCDIE is enabled and this bit is 0, only when LCD charge pump
  |        |          |counter value over LCDCPALCT0 and LCDCPALCT1 defined value, the LCD
  |        |          |will go intot LCD interrupt.The LCDCPALIF(LCDIF[0]) will be set to 1.
  |        |          |1 = LCD charge pump active counter read interrupt
  |        |          |When bit set as 1. If LCDCPIF=1 means LCD module successful to
  |        |          |drivring LCD pixel. The charge pump value will be write into LCDCPCT0
  |        |          |and LCDCPCT1 and the LCD interrupt happen.If LCDCPOVIF = 1means LCD
  |        |          |module charge pump value is match the maximum 0x3FF
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDCON1_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCON1
  @{ */

#define set_LCDCON1_RE_MODE      LCDCON1 |= 0x02 /*!<Set LCDCON1.RE_MODE            */
#define set_LCDCON1_LCDIE        LCDCON1 |= 0x04 /*!<Set LCDCON1.LCDIE              */
#define set_LCDCON1_LCDIS        LCDCON1 |= 0x08 /*!<Set LCDCON1.LCDIS              */

#define clr_LCDCON1_RE_MODE      LCDCON1 &=~0x02 /*!<Clear LCDCON1.RE_MODE          */
#define clr_LCDCON1_LCDIE        LCDCON1 &=~0x04 /*!<Clear LCDCON1.LCDIE            */
#define clr_LCDCON1_LCDIS        LCDCON1 &=~0x08 /*!<Clear LCDCON1.LCDIS            */

/**@}*/ /* end of SFR_LCDCON1_MACRO group */
/**@}*/ /* end of SFR_LCDCON1 group */

/**
   @addtogroup SFR_LCDCPALCT0 LCDCPALCT0
   Special Function Register LCDCPALCT0
   @{ */

/**
  @var LCDCPALCT0
  Address: F5H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDCPOVCT[7:0]|LCD Chage Pump Counter Alarm Value for Trig Interrupt Value .
  |        |          |Low byte of Trig LCD interrupt alarm counter value for user setting.
 */

/**
  @addtogroup SFR_LCDCPALCT0_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCPALCT0
  @{ */





/**@}*/ /* end of SFR_LCDCPALCT0_MACRO group */
/**@}*/ /* end of SFR_LCDCPALCT0 group */

/**
   @addtogroup SFR_LCDCPCT0 LCDCPCT0
   Special Function Register LCDCPCT0
   @{ */

/**
  @var LCDCPCT0
  Address: F6H, Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDCPCT[7:0]|LCD Current Frame Chage Pump Counter Value Low Byte
  |        |          |Each time after interrupt this byte reload LCD current frame charge
  |        |          |pump value low byte.
  |        |          |This byte is read only.
 */

/**
  @addtogroup SFR_LCDCPCT0_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCPCT0
  @{ */





/**@}*/ /* end of SFR_LCDCPCT0_MACRO group */
/**@}*/ /* end of SFR_LCDCPCT0 group */

/**
   @addtogroup SFR_LCDIF LCDIF
   Special Function Register LCDIF
   @{ */

/**
  @var LCDIF
  Address: F7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |LCDCPALIF |LCD Charge Pump Alarm Value Match Interrupt Flag
  |        |          |This Flag check LCDCPALCT0 and LCDCPALCT1 counter value.
  |        |          |if LCDIS (LCDCON1.3) = 0 and LCDIE (LCDCON1.2) = 1. Only when LCD
  |        |          |charge pump counter is over LCDCPALCT0 and LCDCPALCT1 defined alarm
  |        |          |value the LCD interrupt will be happen.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |[1]     |LCDCPIF   |LCD Charge Pump Interrupt Flag
  |        |          |This Flag check LCDCPCT0 and LCDCPCT1 counter value.
  |        |          |if LCDIS (LCDCON1.3) = 1 and LCDIE (LCDCON1.2) = 1. When LCD module
  |        |          |successful to drivring LCD pixel. The charge pump value will be write
  |        |          |into LCDCPCT0 and LCDCPCT1 and the LCD interrupt happen. User can read
  |        |          |from this two register byte to find the charge pump reference value.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |[2]     |LCDCPOVIF |LCD Charge Pump Counter Value Overflow Flag
  |        |          |This Flag check LCDCPCT0 and LCDCPCT1 counter value.
  |        |          |When LCDIS (LCDCON1.3) = 1 and LCDIE (LCDCON1.2) = 1. When LCD module
  |        |          |charge pump value is match the maximum 0x3FF this bit will be set to 1
  |        |          |and the LCD interrupt happen.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |        |          |When this bit is set as 1 user should be noticed for the pixel now is
  |        |          |displaying. The circuit short or LCD pixel damage may cause thie
  |        |          |result. Since as normal the charge pump counter value shoud not reach
  |        |          |0x3FF.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDIF_MACRO Bit Macro Functions
  Bit Macro Functions of LCDIF
  @{ */

#define set_LCDIF_LCDCPALIF      LCDIF |= 0x01 /*!<Set LCDIF.LCDCPALIF            */
#define set_LCDIF_LCDCPIF        LCDIF |= 0x02 /*!<Set LCDIF.LCDCPIF              */
#define set_LCDIF_LCDCPOVIF      LCDIF |= 0x04 /*!<Set LCDIF.LCDCPOVIF            */

#define clr_LCDIF_LCDCPALIF      LCDIF &=~0x01 /*!<Clear LCDIF.LCDCPALIF          */
#define clr_LCDIF_LCDCPIF        LCDIF &=~0x02 /*!<Clear LCDIF.LCDCPIF            */
#define clr_LCDIF_LCDCPOVIF      LCDIF &=~0x04 /*!<Clear LCDIF.LCDCPOVIF          */

/**@}*/ /* end of SFR_LCDIF_MACRO group */
/**@}*/ /* end of SFR_LCDIF group */

/**
   @addtogroup SFR_S1CON S1CON
   Special Function Register S1CON
   @{ */

/**
  @var S1CON
  Address: F8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI_1      |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2_1 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[1]     |TI_1      |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[2]     |RB8_1     |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 1 Mode 2 or 3. In Mode 1, RB8_1 is the logic level of the
  |        |          |received stop bit. SM2_1 bit as logic 1 has restriction for exception.
  |        |          |RB8_1 is not used in Mode 0.
  |[3]     |TB8_1     |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |1 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN_1     |Receiving Enable
  |        |          |0 = Serial port 1 reception Disabled.
  |        |          |1 = Serial port 1 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN_1 = 1 and RI_1 = 0.
  |[5]     |SM2_1     |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 1 mode.
  |        |          |Mode 0:
  |        |          |No effect.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1_1     |Check with bit 7 description.
  |[7]     |SM0_1/FE_1|Serial Port 1 Mode Select
  |        |          |SMOD0_1 (T3CON.6) = 0:
  |        |          |See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
  |        |          |SMOD0_1 (T3CON.6) = 1:
  |        |          |SM0_1/FE_1 bit is used as frame error (FE) status flag. It is cleared
  |        |          |by software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */

/**
  @addtogroup SFR_S1CON_MACRO Bit Macro Functions
  Bit Macro Functions of S1CON
  @{ */

#define set_S1CON_RI_1           S1CON |= 0x01 /*!<Set S1CON.RI_1                 */
#define set_S1CON_TI_1           S1CON |= 0x02 /*!<Set S1CON.TI_1                 */
#define set_S1CON_RB8_1          S1CON |= 0x04 /*!<Set S1CON.RB8_1                */
#define set_S1CON_TB8_1          S1CON |= 0x08 /*!<Set S1CON.TB8_1                */
#define set_S1CON_REN_1          S1CON |= 0x10 /*!<Set S1CON.REN_1                */
#define set_S1CON_SM2_1          S1CON |= 0x20 /*!<Set S1CON.SM2_1                */
#define set_S1CON_SM1_1          S1CON |= 0x40 /*!<Set S1CON.SM1_1                */
#define set_S1CON_SM0_1/FE_1     S1CON |= 0x80 /*!<Set S1CON.SM0_1/FE_1           */

#define clr_S1CON_RI_1           S1CON &=~0x01 /*!<Clear S1CON.RI_1               */
#define clr_S1CON_TI_1           S1CON &=~0x02 /*!<Clear S1CON.TI_1               */
#define clr_S1CON_RB8_1          S1CON &=~0x04 /*!<Clear S1CON.RB8_1              */
#define clr_S1CON_TB8_1          S1CON &=~0x08 /*!<Clear S1CON.TB8_1              */
#define clr_S1CON_REN_1          S1CON &=~0x10 /*!<Clear S1CON.REN_1              */
#define clr_S1CON_SM2_1          S1CON &=~0x20 /*!<Clear S1CON.SM2_1              */
#define clr_S1CON_SM1_1          S1CON &=~0x40 /*!<Clear S1CON.SM1_1              */
#define clr_S1CON_SM0_1/FE_1     S1CON &=~0x80 /*!<Clear S1CON.SM0_1/FE_1         */

/**@}*/ /* end of SFR_S1CON_MACRO group */
/**@}*/ /* end of SFR_S1CON group */

/**
   @addtogroup SFR_LCDCON LCDCON
   Special Function Register LCDCON
   @{ */

/**
  @var LCDCON
  Address: F9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[3:2]   |DUTY[1:0] |LCD Duty
  |        |          |00 = 1/4 duty.
  |        |          |01 = 1/6 duty.
  |        |          |10 = 1/8 duty.
  |        |          |11 = Reserved.
  |        |          |Note that when 1/4 duty is selected, only COM0 to COM3 are used for
  |        |          |LCD driving. When 1/6 or 1/8 duty is selected that means 6 COM or 8
  |        |          |COM pins are used, and the SEG pins will be used according to the
  |        |          |definition of multiple function pin setting. When those SEG pins were
  |        |          |used as COM pins, these SEG bits are unavailable.
  |[5:4]   |BIAS[1:0] |LCD Bias
  |        |          |00 = Reserved.
  |        |          |01 = 1/2 bias.
  |        |          |10 = 1/3 bias.
  |        |          |11 = 1/4 bias
  |[6]     |TYPE      |Display Type
  |        |          |0 = Type A
  |        |          |1 = Type B (Power saving mode)
  |[7]     |LCDEN     |LCD Enable
  |        |          |0 = LCD circuit OFF. Each COM and SEG pin functions as general purpose
  |        |          |I/O and its multi-functions other than LCD.
  |        |          |1 = LCD circuit ON. COM and enabled SEG pins generate the LCD driving
  |        |          |waveform.
 */

/**
  @addtogroup SFR_LCDCON_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCON
  @{ */



#define set_LCDCON_TYPE          LCDCON |= 0x40 /*!<Set LCDCON.TYPE                */
#define set_LCDCON_LCDEN         LCDCON |= 0x80 /*!<Set LCDCON.LCDEN               */



#define clr_LCDCON_TYPE          LCDCON &=~0x40 /*!<Clear LCDCON.TYPE              */
#define clr_LCDCON_LCDEN         LCDCON &=~0x80 /*!<Clear LCDCON.LCDEN             */

/**@}*/ /* end of SFR_LCDCON_MACRO group */
/**@}*/ /* end of SFR_LCDCON group */

/**
   @addtogroup SFR_LCDCLK LCDCLK
   Special Function Register LCDCLK
   @{ */

/**
  @var LCDCLK
  Address: FAH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |LCDDIV[2:0]|LCD Clock Divider
  |        |          |000 = 1/1.
  |        |          |001 = 1/2.
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |Others = Reserved.
  |[3]     |DISP      |DISP
  |        |          |The LCD display keeps display on or display off during chip power-down
  |        |          |mode. If LXT is used as the LCD clock source, user should turn on LXT
  |        |          |first by software.
  |        |          |0 = Display off.
  |        |          |1 = Display on.
  |[4]     |LCDCKS    |LCD Clock Source Select
  |        |          |0 = LIRC/24.
  |        |          |1 = LXT/24.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDCLK_MACRO Bit Macro Functions
  Bit Macro Functions of LCDCLK
  @{ */


#define set_LCDCLK_DISP          LCDCLK |= 0x08 /*!<Set LCDCLK.DISP                */
#define set_LCDCLK_LCDCKS        LCDCLK |= 0x10 /*!<Set LCDCLK.LCDCKS              */


#define clr_LCDCLK_DISP          LCDCLK &=~0x08 /*!<Clear LCDCLK.DISP              */
#define clr_LCDCLK_LCDCKS        LCDCLK &=~0x10 /*!<Clear LCDCLK.LCDCKS            */

/**@}*/ /* end of SFR_LCDCLK_MACRO group */
/**@}*/ /* end of SFR_LCDCLK group */

/**
   @addtogroup SFR_LCDPTR LCDPTR
   Special Function Register LCDPTR
   @{ */

/**
  @var LCDPTR
  Address: FBH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4:0]   |LCDPTR[4:0]|LCD Data Pointer
  |        |          |This field determines which LCD display data register is accessed by
  |        |          |LCDDAT. It¡¦s also means the LCD segment address.the value is from 0
  |        |          |~31. User should fill the target pointer value in LCDPTR before
  |        |          |accessing LCDDAT. After LCD display data is written to LCDDAT
  |        |          |register, the LCDPTR value increases 1 automatically.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDPTR_MACRO Bit Macro Functions
  Bit Macro Functions of LCDPTR
  @{ */





/**@}*/ /* end of SFR_LCDPTR_MACRO group */
/**@}*/ /* end of SFR_LCDPTR group */

/**
   @addtogroup SFR_LCDDAT LCDDAT
   Special Function Register LCDDAT
   @{ */

/**
  @var LCDDAT
  Address: FCH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDDAT[7:0]|LCD Data
  |        |          |This byte is defined which COM pin should be enabled. Bit 0 means COM
  |        |          |0 and bit 7 means COM 7. When value 1 written into this register will
  |        |          |be enable the corresponding COM pins and which pixel display is based
  |        |          |on LCD SEG defined by LCDPTR.
  |        |          |0 = LCD pixel is cleared.
  |        |          |1 = LCD pixel is darkened.
 */

/**
  @addtogroup SFR_LCDDAT_MACRO Bit Macro Functions
  Bit Macro Functions of LCDDAT
  @{ */





/**@}*/ /* end of SFR_LCDDAT_MACRO group */
/**@}*/ /* end of SFR_LCDDAT group */

/**
   @addtogroup SFR_LCDPWR LCDPWR
   Special Function Register LCDPWR
   @{ */

/**
  @var LCDPWR
  Address: FDH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |PWR_SAVE[1:0]|LCD Power Save Mode Select
  |        |          |LCD driving cycle select, turn on timing decide the driving current.
  |        |          |00 = always ON. No power saving.
  |        |          |01 = Turns on 1/4 frame cycle (most power saving condition)
  |        |          |10 = Turns on 2/4 frame cycle
  |        |          |11 = Turns on 3/4 frame cycle
  |        |          |T = 1/(LCDCLK frequency/LCD clock divider)
  |        |          |Type A: (Full Period is 8T)
  |        |          |00 = always ON. No power saving
  |        |          |01 = 2T turns on
  |        |          |10 = 4T turns on
  |        |          |11 = 6T turns on
  |        |          |Type B: (Full Period is 16T)
  |        |          |00 = always ON. No power saving
  |        |          |01 = 4T turns on
  |        |          |10 = 8T turns on
  |        |          |11 = 12T turns on
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDPWR_MACRO Bit Macro Functions
  Bit Macro Functions of LCDPWR
  @{ */





/**@}*/ /* end of SFR_LCDPWR_MACRO group */
/**@}*/ /* end of SFR_LCDPWR group */

/**
   @addtogroup SFR_LCDBL LCDBL
   Special Function Register LCDBL
   @{ */

/**
  @var LCDBL
  Address: FEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BLF[2:0]  |BLINK Frequency
  |        |          |Blinking frequency define value is from 0~7
  |        |          |When LCDCKS =1, FBLINK = FLXT/211+ BL_Time[2:0]
  |        |          |When LCDCKS =0, FBLINK = FLIRC/211+ BL_Time[2:0]
  |[3]     |BLINK     |LCD BLINK
  |        |          |0 = LCD always on
  |        |          |1 = LCD blinking. The blinking frequency is based on BLF[2:0] define.
  |[6:4]   |DT[2:0]   |Dead Time(Not Released)
  |        |          |Drive all SEG and COM to zero period time
  |        |          |000 = without dead time
  |        |          |001 = 1 COM period time
  |        |          |010 = 2 COM period time
  |        |          |011 = 3 COM period time
  |        |          |100 = 4 COM period time
  |        |          |101 = 5 COM period time
  |        |          |110 =,6 COM period time
  |        |          |111 = 7 COM period time
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SFR_LCDBL_MACRO Bit Macro Functions
  Bit Macro Functions of LCDBL
  @{ */


#define set_LCDBL_BLINK          LCDBL |= 0x08 /*!<Set LCDBL.BLINK                */



#define clr_LCDBL_BLINK          LCDBL &=~0x08 /*!<Clear LCDBL.BLINK              */


/**@}*/ /* end of SFR_LCDBL_MACRO group */
/**@}*/ /* end of SFR_LCDBL group */

/**
   @addtogroup SFR_LCDMODE LCDMODE
   Special Function Register LCDMODE
   @{ */

/**
  @var LCDMODE
  Address: FFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |VLCD_MODE[1:0]|VLCD Source Mode Select.
  |        |          |This bits defined VLCD voltage source
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |00
  |        |          |Ext. VLCD
  |        |          |01
  |        |          |AVDD
  |        |          |10
  |        |          |VCP (Charge   Pump)
  |        |          |11
  |        |          |Disable
  |        |          |Note : VCP value base on LCDCPUMP define.
  |        |          |Package with VLCD Pin (ROMMAP Control Bit = 1)
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |Not Released
  |        |          |(RTL Map Analog Design)
  |        |          |Not Released
  |        |          |(map0[2])
  |        |          |00
  |        |          |Ext. VLCD
  |        |          |000
  |        |          |1
  |        |          |01
  |        |          |AVDD
  |        |          |001
  |        |          |1
  |        |          |10
  |        |          |VCP (Charge Pump)
  |        |          |010
  |        |          |1
  |        |          |11
  |        |          |Disable
  |        |          |011
  |        |          |1
  |        |          |Package without VLCD pin (ROMMAP control bit = 0)
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |Not Released
  |        |          |(RTL Map Analog Design)
  |        |          |Not Released
  |        |          |(map0[2])
  |        |          |00
  |        |          |Disable
  |        |          |111
  |        |          |0
  |        |          |01
  |        |          |AVDD
  |        |          |101
  |        |          |0
  |        |          |10
  |        |          |Disable
  |        |          |111
  |        |          |0
  |        |          |11
  |        |          |Disable
  |        |          |111
  |        |          |0
  |[5:2]   |Reserved  |Reserved
  |[6]     |BUF_MODE  |Buffer Mode Enable
  |        |          |This bit going to define LCD driver as Buffer Mode.
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable
  |        |          |Note: When BUF_MODE is enabled, R_MODE and RE_MODE should be disabled.
  |[7]     |R_MODE    |Resister Mode Enable
  |        |          |This bit going to define LCD driver as Resistor Mode or Resistor
  |        |          |Enhance Mode
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable.
  |        |          |Note: When R_MODE is enabled, BUF_MODE should be disabled.
 */

/**
  @addtogroup SFR_LCDMODE_MACRO Bit Macro Functions
  Bit Macro Functions of LCDMODE
  @{ */


#define set_LCDMODE_BUF_MODE     LCDMODE |= 0x40 /*!<Set LCDMODE.BUF_MODE           */
#define set_LCDMODE_R_MODE       LCDMODE |= 0x80 /*!<Set LCDMODE.R_MODE             */


#define clr_LCDMODE_BUF_MODE     LCDMODE &=~0x40 /*!<Clear LCDMODE.BUF_MODE         */
#define clr_LCDMODE_R_MODE       LCDMODE &=~0x80 /*!<Clear LCDMODE.R_MODE           */

/**@}*/ /* end of SFR_LCDMODE_MACRO group */
/**@}*/ /* end of SFR_LCDMODE group */

/**@}*/ /* end of SFR_PAGE3 group */


/**@}*/ /* end of SFR_REG group */
/*========================================================================================*/
/**
  @addtogroup PERIPHERAL Peripheral Control Register
  @{ */

/**
  @addtogroup FMC FMC Control Register
  @{ */

/**
  @addtogroup FMC_SFRS SFRS
  @ref SFRS Special Function Register
  Address: 91H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SFRPAGE[1:0]|SFR Page Select
  |        |          |00 = Instructions access SFR Page 0.
  |        |          |01 = Instructions access SFR Page 1.
  |        |          |10 = Instructions access SFR page 2.
  |        |          |11 = Instructions access SFR page 3.
 */

/**
  @addtogroup FMC_TA TA
  @ref TA Special Function Register
  Address: C7H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TA[7:0]   |Timed Access
  |        |          |The timed access register controls the access to protected SFR. To
  |        |          |access protected bits, user should first write AAH to the TA and
  |        |          |immediately followed by a write of 55H to TA. After these two steps, a
  |        |          |writing permission window is opened for 4 clock cycles during this
  |        |          |period that user may write to protected SFR.
 */

/**
  @addtogroup FMC_DPL DPL
  @ref DPL Special Function Register
  Address: 82H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[7:0] |Data Pointer Low Byte
  |        |          |This is the low byte of 16-bit data pointer. DPL combined with DPH
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**
  @addtogroup FMC_DPH DPH
  @ref DPH Special Function Register
  Address: 83H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |DPTR[15:8]|Data Pointer High Byte
  |        |          |This is the high byte of 16-bit data pointer. DPH combined with DPL
  |        |          |serve as a 16-bit data pointer DPTR to access indirect addressed RAM
  |        |          |or Program Memory. DPS (AUXR0.0) bit decides which data pointer, DPTR
  |        |          |or DPTR1, is activated.
 */

/**@}*/ /* end of FMC group */

/**
  @addtogroup SYSTEM System Control Register
  @{ */

/**
  @addtogroup System_XLTCON XLTCON
  @ref XLTCON Special Function Register
  Address: 85H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LXSG[1:0] |LXT Gain Value Select
  |        |          |00 = L0 mode (smallest value)
  |        |          |01 = L1 mode
  |        |          |10 = L2 mode
  |        |          |11 = L3 mode (largest value)
  |[3:2]   |Reserved  |Reserved
  |[6:4]   |HXSG[2:0] |HXT Gain Value Select
  |        |          |000 = L0 mode (smallest value)
  |        |          |001 = L1 mode
  |        |          |010 = L2 mode
  |        |          |011 = L3 mode
  |        |          |100 = L4 mode
  |        |          |101 = L5 mode
  |        |          |110 = L6 mode
  |        |          |111 = L7 mode (largest value)
  |[7]     |HSCH      |HXT Schmitt Trigger Select
  |        |          |0 = disable
  |        |          |1 = enable
 */

/**
  @addtogroup System_CKSWT CKSWT
  @ref CKSWT Special Function Register
  Address: 96H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |OSC[2:0]  |Oscillator Selection Bits
  |        |          |This field selects the system clock source.
  |        |          |00x = Internal 24 MHz oscillator. Defaul value accoding to
  |        |          |HIRCEN(CKEN.5) enabled.
  |        |          |01x = External oscillator clock source accoding to ECLKEN(CKEN.3)
  |        |          |enabled.
  |        |          |10x = Internal 38.4 kHz oscillator according to LIRCEN(CKEN.4)
  |        |          |enabled.
  |        |          |110 = External High speed crystal/resonator clock source (4 MHz ~ 24
  |        |          |MHz) accoding to EHXTEN(CKEN.7) enabled.
  |        |          |111 = External Low speed crystal/resonator clock source (32.768 kHz)
  |        |          |accoding to ELXTEN(CKEN.6) enabled.
  |        |          |Note that this field is write only. The read back value of this field
  |        |          |may not correspond to the present system clock source.
  |[3]     |ECLKST    |External Clock Input Status
  |        |          |0 = External clock input is not stable or disabled.
  |        |          |1 = External clock input is enabled and stable.
  |[4]     |LIRCST    |Low Speed Internal Oscillator 38.4 kHz Status
  |        |          |0 = Low speed internal oscillator is not stable or is disabled.
  |        |          |1 = Low speed internal oscillator is enabled and stable.
  |[5]     |HIRCST    |High-Speed Internal Oscillator 24 MHz Status
  |        |          |0 = High-speed internal oscillator
  |        |          |is not stable or disabled.
  |        |          |1 = High-speed internal oscillator
  |        |          |is enabled and stable.
  |[6]     |LXTST     |Low Speed External Crystal/Resonator 32.768 kHz Status
  |        |          |0 = Low speed external crystal/resonator is not stable or is disabled.
  |        |          |1 = Low speed external crystal/resonator is enabled and stable.
  |[7]     |HXTST     |High Speed External Crystal/Resonator 4 MHz to 24 MHz Status
  |        |          |0 = High speed external crystal/resonator is not stable or is
  |        |          |disabled.
  |        |          |1 = High speed external crystal/resonator is enabled and stable.
 */

/**
  @addtogroup System_CKEN CKEN
  @ref CKEN Special Function Register
  Address: 97H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CKSWTF    |Clock Switch Fault Flag
  |        |          |0 = The previous system clock source switch was successful.
  |        |          |1 = User tried to switch to an instable or disabled clock source at
  |        |          |the previous system clock source switch. If switching to an instable
  |        |          |clock source, this bit remains 1 until the clock source is stable and
  |        |          |switching is successful.
  |[1]     |Reserved  |Reserved
  |[2]     |BIRCEN    |Bias Internal Oscillator 3.3 kHz Enable
  |        |          |0 = The bias internal oscillator Disabled.
  |        |          |1 = The bias internal oscillator Enabled.
  |        |          |Note that when BIRCEN is disabled, the bias refresh clock is changed
  |        |          |from 3.3 kHz to ~10 kHz ( LIRC 38.4 kHz /4)
  |        |          |À³¸Óalways keep at 1, §_«h ·|¼vÅTLIRC µLªk¨üuser control OFF.
  |[3]     |ECLKEN    |External Clock Input Enable
  |        |          |1 = External clock input (Xin , P5.3) Enabled.
  |        |          |0 = External clock input (Xin, P5.3) Disabled, P5.2 and P5.3 work as
  |        |          |general purpose I/O or other functions if EHXTEN set to 0.
  |[4]     |LIRCEN    |Low Speed Internal Oscillator 38.4 kHz Enable
  |        |          |0 = The low speed internal oscillator Disabled.
  |        |          |1 = The low speed internal oscillator
  |        |          |Enabled.
  |        |          |Note that when (1)WDT is enabled, (2)WKT is running by the clock
  |        |          |source of the internal 38.4 kHz oscillator ,(3) BOD is enabled, or
  |        |          |(4)LVR filter is enabled, a write 0 to LIRCEN will be ignored. LIRCEN
  |        |          |is always 1 and the internal 38.4 kHz oscillator is always enabled.
  |[5]     |HIRCEN    |High-Speed Internal Oscillator 24 MHz Enable
  |        |          |0 = The high-speed internal oscillator Disabled.
  |        |          |1 = The high-speed internal oscillator
  |        |          |Enabled.
  |        |          |Note that once IAP is enabled by setting IAPEN (CHPCON.0), the high-
  |        |          |speed internal 24 MHz oscillator will be enabled automatically. The
  |        |          |hardware will also set HIRCEN and HIRCST bits. After IAPEN is cleared,
  |        |          |HIRCEN and EHRCST resume the original values.
  |[6]     |ELXTEN    |External Low-Speed Crystal/Resonator Enable
  |        |          |1 = Low-speed external crystal/resonator 32.768 kHz Enabled.
  |        |          |0 = Low-speed external crystal/resonator 32.768 kHz Disabled, P5.4 and
  |        |          |P5.5 work as general purpose I/O or other functions.
  |[7]     |EHXTEN    |External High-Speed Crystal/Resonator Enable
  |        |          |1 = High-speed external crystal/resonator 4 MHz to 24 MHz Enabled.
  |        |          |0 = High-speed external crystal/resonator 4 MHz to 24 MHz Disabled,
  |        |          |P5.2 and P5.3 work as general purpose I/O or other functions if ECLKEN
  |        |          |set to 0.
 */


/**
  @addtogroup System_BODCON0 BODCON0
  @ref BODCON0 Special Function Register
  Address: A3H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |BOS       |Brown-Out Status
  |        |          |This bit indicates the VDD voltage level comparing with VBOD while BOD
  |        |          |circuit is enabled. It keeps 0 if BOD is not enabled.
  |        |          |0 = VDD voltage level is higher than VBOD or BOD is disabled.
  |        |          |1 = VDD voltage level is lower than VBOD.
  |        |          |Note that this bit is read-only.
  |[1]     |BORF      |Brown-Out Reset Flag
  |        |          |When the MCU is reset by brown-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software.
  |[2]     |BORST     |Brown-Out Reset Enable
  |        |          |This bit decides whether a brown-out reset is caused by a power drop
  |        |          |below VBOD.
  |        |          |0 = Brown-out reset when VDD drops below VBOD Disabled.
  |        |          |1 = Brown-out reset when VDD drops below VBOD Enabled.
  |[3]     |BOF       |Brown-Out Interrupt Flag
  |        |          |This flag will be set as logic 1 via hardware after a VDD
  |        |          |dropping below or rising above VBOD event occurs. If both EBOD (I.E.5)
  |        |          |and EA (I.E.7) are set, a brown-out interrupt requirement will be
  |        |          |generated. This bit should be cleared via software.
  |[6:4]   |BOV[2:0]  |CONFIG Brown-Out Voltage Select
  |        |          |111 = VBOD is 1.8V.
  |        |          |110 = VBOD is 1.8V.
  |        |          |101 = VBOD is 2.0V.
  |        |          |100 = VBOD is 2.4V.
  |        |          |011 = VBOD is 2.7V.
  |        |          |010 = VBOD is 3.0V.
  |        |          |001 = VBOD is 3.7V.
  |        |          |000 = VBOD is 4.4V.
  |[7]     |BODEN     |Brown-Out Detection Enable
  |        |          |0 = Brown-out detection circuit ON.
  |        |          |1 = Brown-out detection circuit OFF.
  |        |          |Note that BOD output is not available until 2~3 LIRC clocks after
  |        |          |enabling.
 */

/**
  @addtogroup System_BODCON1 BODCON1
  @ref BODCON1 Special Function Register
  Address: ABH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |BODFLT    |BOD Filter Control
  |        |          |BOD has a filter which counts 32 clocks of FSYS to filter the power
  |        |          |noise when MCU runs with HIRC, or ECLK as the system clock and BOD
  |        |          |does not operates in its low power mode (LPBOD[1:0] = [0, 0]). In
  |        |          |other conditions, the filter counts 2 clocks of LIRC.
  |        |          |Note that when CPU is halted in Power-down mode. The BOD output is
  |        |          |permanently filtered by 2 clocks of LIRC.
  |        |          |The BOD filter avoids the power noise to trigger BOD event. This bit
  |        |          |controls BOD filter enabled or disabled.
  |        |          |0 = BOD filter Disabled.
  |        |          |1 = BOD filter Enabled. (Power-on reset default value.)
  |[2:1]   |LPBOD[1:0]|Low Power BOD Enable
  |        |          |00 = BOD normal mode. BOD circuit is always enabled.
  |        |          |01 = BOD low power mode 1 by turning on BOD circuit every 1.6 ms
  |        |          |periodically.
  |        |          |10 = BOD low power mode 2 by turning on BOD circuit every 6.4 ms
  |        |          |periodically.
  |        |          |11 = BOD low power mode 3 by turning on BOD circuit every 25.6 ms
  |        |          |periodically.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup System_WDCON WDCON
  @ref WDCON Special Function Register
  Address: AAH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3]     |WDTRF     |WDT Reset Flag
  |        |          |When the CPU is reset by WDT time-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software after
  |        |          |reset.
 */

/**
  @addtogroup System_CHPCON CHPCON
  @ref CHPCON Special Function Register
  Address: 9FH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7]     |SWRST     |Software Reset
  |        |          |To set this bit as logic 1 will cause a software reset. It will
  |        |          |automatically be cleared via hardware after reset is finished.
 */

/**
  @addtogroup System_AUXR0 AUXR0
  @ref AUXR0 Special Function Register
  Address: A2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7]     |SWRF      |Software Reset Flag
  |        |          |When the MCU is reset via software reset, this bit will be set via
  |        |          |hardware. It is recommended that the flag be cleared via software.
 */

/**
  @addtogroup System_IE IE
  @ref IE Special Function Register
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EX0       |Enable External Interrupt 0
  |        |          |0 = External interrupt 0 Disabled.
  |        |          |1 = External interrupt 0 interrupt Enable. When interrupt generated
  |        |          |INT0 pin set 1.
  |[1]     |ET0       |Enable Timer 0 Interrupt
  |        |          |0 = Timer 0 interrupt Disabled.
  |        |          |1 = Timer 0 interrupt Enable. When interrupt generated TF0 (TCON.5)
  |        |          |set 1.
  |[2]     |EX1       |Enable External Interrupt 1
  |        |          |0 = External interrupt 1 Disabled.
  |        |          |1 = External interrupt 1 interrupt Enable. When interrupt generated
  |        |          |INT1 pin set 1.
  |[3]     |ET1       |Enable Timer 1 Interrupt
  |        |          |0 = Timer 1 interrupt Disabled.
  |        |          |1 = Timer 1 interrupt Enable. When interrupt generated TF1 (TCON.7)
  |        |          |set 1.
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Serial port 0 interrupt Enable. When interrupt generated TI
  |        |          |(SCON.1) or RI (SCON.0) set 1.
  |[5]     |EBOD      |Enable Brown-Out Interrupt
  |        |          |0 = Brown-out detection interrupt Disabled.
  |        |          |1 = Brown-out detection interrupt Enable. When interrupt generated BOF
  |        |          |(BODCON0.3) set 1.
  |[6]     |EADC      |Enable ADC Interrupt
  |        |          |0 = ADC interrupt Disabled.
  |        |          |1 = ADC interrupt Enable. When interrupt generated ADCF (ADCCON0.7)
  |        |          |set 1.
  |[7]     |EA        |Enable All Interrupt
  |        |          |This bit globally enables/disables all interrupts that are
  |        |          |individually enabled.
  |        |          |0 = All interrupt sources Disabled.
  |        |          |1 = Each interrupt Enabled depending on its individual mask setting.
  |        |          |Individual interrupts will occur if enabled.
 */

/**
  @addtogroup System_EIE0 EIE0
  @ref EIE0 Special Function Register
  Address: 9BH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EI2C0     |Enable I2C0 Interrupt
  |        |          |0 = I2C interrupt Disabled.
  |        |          |1 = I2C interrupt Enable. When interrupt generated SI (I2C0CON.3) or
  |        |          |I2TOF (I2C0TOC.0) set 1.
  |[1]     |EPI       |Enable Pin Interrupt
  |        |          |0 = Pin interrupt Disabled.
  |        |          |1 = Pin interrupt Enable. When interrupt generated PIF related bit set
  |        |          |1.
  |[2]     |ECAP      |Enable Input Capture Interrupt
  |        |          |0 = Input capture interrupt Disabled.
  |        |          |1 = Input capture interrupt Enable. When interrupt generated CAPF[2:0]
  |        |          |(CAPCON0[2:0]) set 1.
  |[3]     |EPWM0     |Enable PWM0 Interrupt
  |        |          |0 = PWM interrupt Disabled.
  |        |          |1 = PWM interrupt Enable. When interrupt generated PWMF (PWMnCON0.5)
  |        |          |set 1.
  |[4]     |EWDT      |Enable WDT Interrupt
  |        |          |0 = WDT interrupt Disabled.
  |        |          |1 = WDT interrupt Enable. When interrupt generated WDTF (WDCON.5) set
  |        |          |1.
  |[5]     |EFB0      |Enable Fault Brake Interrupt
  |        |          |0 = Fault Brake interrupt Disabled.
  |        |          |1 = Fault Brake interrupt Enable. When interrupt generated FBF
  |        |          |(PWM0FBD.7) set 1.
  |[6]     |ESPI0     |Enable SPI Interrupt
  |        |          |0 = SPI interrupt Disabled.
  |        |          |1 = SPI interrupt Enable. When interrupt generated SPIF (SPInSR.7),
  |        |          |SPIOVF (SPInSR.5), or MODF (SPInSR.4) set 1 .
  |[7]     |ET2       |Enable Timer 2 Interrupt
  |        |          |0 = Timer 2 interrupt Disabled.
  |        |          |1 = Timer 2 interrupt Enable. When interrupt generated, TF2 (T2CON.7)
  |        |          |set 1
 */

/**
  @addtogroup System_EIE1 EIE1
  @ref EIE1 Special Function Register
  Address: 9CH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ES1       |Enable Serial Port 1 Interrupt
  |        |          |0 = Serial port 1 interrupt Disabled.
  |        |          |1 = Serial port 1 interrupt Enable. When interrupt generated TI_1
  |        |          |(S1CON.1) or RI_1 (S1CON.0) set 1.
  |[1]     |ET3       |Enable Timer 3 Interrupt
  |        |          |0 = Timer 3 interrupt Disabled.
  |        |          |1 = Timer 3interrupt Enable. When interrupt generated TF3 (T3CON.4)
  |        |          |set 1.
  |[2]     |EWKT      |Enable WKT Interrupt
  |        |          |0 = WKT interrupt Disabled.
  |        |          |1 = WKT interrupt Enable. When interrupt generated WKTF (WKCON.4) set
  |        |          |1.
  |[3]     |EHFI      |Enable Hard Fault Interrupt
  |        |          |0 = hard fault interrupt Disabled and hard fault reset is Enabled
  |        |          |1 = hard fault interrupt Enable. When interrupt generated HFIF
  |        |          |(AUXR0.4) set 1.
  |[4]     |ESPI1     |Enable SPI1 Interrupt
  |        |          |0 = SPI1 interrupt Disabled.
  |        |          |1 = SPI1 interrupt Enable. When interrupt generated SPIF (SP2SR.7),
  |        |          |MODF (SP2SR.4) or SPIOVF (SP2SR.5) set 1
  |[5]     |EI2C1     |Enable I2C1 Interrupt
  |        |          |0 = I2C1 interrupt Disabled.
  |        |          |1 = I2C1 interrupt Enable. When interrupt generated SI (I2C1CON.3) or
  |        |          |I2TOF (I2C1TOC.0) set 1.
  |[6]     |EPWM123   |Enable PWM123 Interrupt
  |        |          |0 = PWM1/2/3 interrupt Disabled.
  |        |          |1 = PWM1/2/3 interrupt Enable. When interrupt generated PWMF
  |        |          |(PWM1CON0.5) set 1.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup System_SC0IE SC0IE
  @ref SC0IE Special Function Register
  Address: DDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup System_SC1IE SC1IE
  @ref SC1IE Special Function Register
  Address: DDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup System_DMA0CR0 DMA0CR0
  @ref DMA0CR0 Special Function Register
  Address: 92H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup System_DMA1CR0 DMA1CR0
  @ref DMA1CR0 Special Function Register
  Address: EBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup System_DMA2CR0 DMA2CR0
  @ref DMA2CR0 Special Function Register
  Address: B3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup System_DMA3CR0 DMA3CR0
  @ref DMA3CR0 Special Function Register
  Address: ABH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no periperal source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup System_IP IP
  @ref IP Special Function Register
  Address: B8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0       |External interrupt 0 priority low bit
  |[1]     |PT0       |Timer 0 interrupt priority low bit
  |[2]     |PX1       |External interrupt 1 priority low bit
  |[3]     |PT1       |Timer 1 interrupt priority low bit
  |[4]     |PS        |Serial port 0 interrupt priority low bit
  |[5]     |PBOD      |Brown-out detection interrupt priority low bit
  |[6]     |PADC      |ADC interrupt priority low bit
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup System_IPH IPH
  @ref IPH Special Function Register
  Address: B7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PX0H      |External interrupt 0 priority high bit
  |[1]     |PT0H      |Timer 0 interrupt priority high bit
  |[2]     |PX1H      |External interrupt 1 priority high bit
  |[3]     |PT1H      |Timer 1 interrupt priority high bit
  |[4]     |PSH       |Serial port 0 interrupt priority high bit
  |[5]     |PBODH     |Brown-out detection interrupt priority high bit
  |[6]     |PADCH     |ADC interrupt priority high bit
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup System_EIP0 EIP0
  @ref EIP0 Special Function Register
  Address: EFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PI2C0     |I2C interrupt priority low bit
  |[1]     |PPI       |Pin interrupt priority low bit
  |[2]     |PCAP      |Input capture interrupt priority low bit
  |[3]     |PPWM0     |PWM interrupt priority low bit
  |[4]     |PWDT      |WDT interrupt priority low bit
  |[5]     |PFB       |Fault Brake interrupt priority low bit
  |[6]     |PSPI0     |SPI0 interrupt priority low bit
  |[7]     |PT2       |Timer 2 interrupt priority low bit
 */

/**
  @addtogroup System_EIPH0 EIPH0
  @ref EIPH0 Special Function Register
  Address: F7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PI2C0H    |I2C interrupt priority high bit
  |[1]     |PPIH      |Pin interrupt priority high bit
  |[2]     |PCAPH     |Input capture interrupt priority high bit
  |[3]     |PPWM0H    |PWM0 interrupt priority high bit
  |[4]     |PWDTH     |WDT interrupt priority high bit
  |[5]     |PFBH      |Fault Brake interrupt priority high bit
  |[6]     |PSPI0H    |SPI0 interrupt priority high bit
  |[7]     |PT2H      |Timer 2 interrupt priority high bit
 */

/**
  @addtogroup System_EIP1 EIP1
  @ref EIP1 Special Function Register
  Address: FEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PS1       |Serial port 1 interrupt priority low bit
  |[1]     |PT3       |Timer 3 interrupt priority low bit
  |[2]     |PWKT      |WKT interrupt priority low bit
  |[3]     |PHF       |Hard fault interrupt priority low bit
  |[4]     |PSMC      |SMC interrupt priority low bit
  |[5]     |PDMA0     |PDMA0 interrupt priority low bit
  |[6]     |PDMA1     |PDMA1 interrupt priority low bit
  |[7]     |PSPI1     |SPI1 interrupt priority low bit
 */

/**
  @addtogroup System_EIPH1 EIPH1
  @ref EIPH1 Special Function Register
  Address: FFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PS1H      |Serial port 1 interrupt priority high bit
  |[1]     |PT3H      |Timer 3 interrupt priority high bit
  |[2]     |PWKTH     |WKT interrupt priority high bit
  |[3]     |PHFH      |Hard fault interrupt priority high bit
  |[4]     |PSMCH     |SMC interrupt priority high bit
  |[5]     |PDMA0H    |PDMA0 interrupt priority high bit
  |[6]     |PDMA1H    |PDMA1 interrupt priority high bit
  |[7]     |PSPI1H    |SPI1 interrupt priority high bit
 */

/**
  @addtogroup System_EIP2 EIP2
  @ref EIP2 Special Function Register
  Address: ACH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PACMP     |ACMP interrupt priority low bit
  |[1]     |PI2C1     |I2C interrupt priority low bit
  |[2]     |PPWM1     |PPWM1 interrupt priority low bit
  |[3]     |TK        |Touch Key interrupt priority low bit
  |[4]     |SMC1      |SMC1 interrupt priority low bit
  |[5]     |PDMA2     |PDMA2 interrupt priority low bit
  |[6]     |PDMA3     |PDMA3 interrupt priority low bit
  |[7]     |RTC       |RTC interrupt priority low bit
 */

/**
  @addtogroup System_EIPH2 EIPH2
  @ref EIPH2 Special Function Register
  Address: ADH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PACMPH    |ACMP interrupt priority high bit
  |[1]     |PI2C1H    |I2C interrupt priority high bit
  |[2]     |PPWM1H    |PPWM1H interrupt priority high bit
  |[3]     |TKH       |Touch Key interrupt priority high bit
  |[4]     |SMC1H     |SMC1H interrupt priority high bit
  |[5]     |PDMA2H    |PDMA2H interrupt priority high bit
  |[6]     |PDMA3H    |PDMA3H interrupt priority high bit
  |[7]     |RTCH      |RTCH interrupt priority high bit
 */

/**@}*/ /* end of SYSTEM group */

/**
  @addtogroup FMC FMC Control Register
  @{ */

/**
  @addtogroup FMC_IAPUEN IAPUEN
  @ref IAPUEN Special Function Register
  Address: A5H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |APUEN     |APROM Updated Enable
  |        |          |0 = Inhibit erasing or programming APROM by IAP.
  |        |          |1 = Allow erasing or programming APROM by IAP.
  |[1]     |LDUEN     |LDROM Updated Enable
  |        |          |0 = Inhibit erasing or programming LDROM by IAP.
  |        |          |1 = Allow erasing or programming LDROM by IAP.
  |[2]     |CFUEN     |CONFIG Bytes Updated Enable
  |        |          |0 = Inhibit erasing or programming CONFIG bytes by IAP.
  |        |          |1 = Allow erasing or programming CONFIG bytes by IAP.
  |[3]     |SPUEN     |SPROM Memory Space Updated Enable(TA Protected)
  |        |          |0 = Inhibit erasing or programming SPRO Mbytes by IAP
  |        |          |1 = Allow erasing or programming SPRO Mbytes by IAP.
  |[4]     |SPMEN     |SPROM Memory Space Mapping Enable
  |        |          |0 = CPU memory address 0xff80~0xffff is mapping to APROM memory
  |        |          |1 = CPU memory address 0xff80~0xffff is mapping to SPROM memory
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup FMC_IAPCN IAPCN
  @ref IAPCN Special Function Register
  Address: AFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |FCTRL[3:0]|This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[4]     |FCEN      |This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[5]     |FOEN      |This Byte is Used for IAP Command. For details, see Figure 6.31 IAP Modes and Command Codes.
  |[7:6]   |IAPB[1:0] |IAP Control
  |        |          |This byte is used for IAP command. For details, see Figure 6.31 IAP
  |        |          |Modes and Command Codes.
 */

/**
  @addtogroup FMC_IAPAH IAPAH
  @ref IAPAH Special Function Register
  Address: A7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPA[15:8]|IAP Address High Byte
  |        |          |IAPAH contains address IAPA[15:8] for IAP operations.
 */

/**
  @addtogroup FMC_IAPAL IAPAL
  @ref IAPAL Special Function Register
  Address: A6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPA[7:0] |IAP Address Low Byte
  |        |          |IAPAL contains address IAPA[7:0] for IAP operations.
 */

/**
  @addtogroup FMC_IAPFD IAPFD
  @ref IAPFD Special Function Register
  Address: AEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |IAPFD[7:0]|IAP Flash Data
  |        |          |This byte contains Flash data, which is read from or is going to be
  |        |          |written to the Flash Memory. User should write data into IAPFD for
  |        |          |program mode before triggering IAP processing and read data from IAPFD
  |        |          |for read/verify mode after IAP processing is finished.
 */

/**
  @addtogroup FMC_IAPTRG IAPTRG
  @ref IAPTRG Special Function Register
  Address: A4H, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IAPGO     |IAP Go
  |        |          |IAP begins by setting this bit as logic 1. After this instruction, the
  |        |          |CPU holds the Program Counter (PC) and the IAP hardware automation
  |        |          |takes over to control the progress. After IAP action completed, the
  |        |          |Program Counter continues to run the following instruction. The IAPGO
  |        |          |bit will be automatically cleared and always read as logic 0.
  |        |          |Before triggering an IAP action, interrupts (if enabled) should be
  |        |          |temporary disabled for hardware limitation.
  |        |          |The program process should follows below.
  |        |          |CLR EA
  |        |          |MOV TA,#0AAH
  |        |          |MOV TA,#55H
  |        |          |ORL IAPTRG,#01H
  |        |          |(SETB EA)
  |[7:1]   |Reserved  |Reserved
 */

/**@}*/ /* end of FMC group */

/**
  @addtogroup GPIO GPIO Control Register
  @{ */

/**
  @addtogroup GPIO_P0 P0
  @ref P0 Special Function Register
  Address: 90H, All SFR Pages, Bit-addressable
  Address: 80H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
sfr P0 = 0x80;

/**
  @addtogroup GPIO_P0_MACRO Bit Macro Functions
  Bit Macro Functions of P0
  @{ */

sbit P00        = P0^0;
sbit P01        = P0^1;
sbit P02        = P0^2;
sbit P03        = P0^3;
sbit P04        = P0^4;
sbit P05        = P0^5;
sbit P06        = P0^6;
sbit P07        = P0^7;

#define set_P0_7                         P0|=0x80
#define set_P0_6                         P0|=0x40
#define set_P0_5                         P0|=0x20
#define set_P0_4                         P0|=0x10
#define set_P0_3                         P0|=0x08
#define set_P0_2                         P0|=0x04
#define set_P0_1                         P0|=0x02
#define set_P0_0                         P0|=0x01
                                                 
#define clr_P0_7                         P0&=0x7F
#define clr_P0_6                         P0&=0xBF
#define clr_P0_5                         P0&=0xDF
#define clr_P0_4                         P0&=0xEF
#define clr_P0_3                         P0&=0xF7
#define clr_P0_2                         P0&=0xFB
#define clr_P0_1                         P0&=0xFD
#define clr_P0_0                         P0&=0xFE

/**@}*/ /* end of GPIO_P0_MACRO group */
/**@}*/ /* end of GPIO_P0 group */

/**
  @addtogroup GPIO_P1 P1
  @ref P1 Special Function Register
  Address: 90H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
 sfr P1 = 0x90;
 
/**
  @addtogroup GPIO_P1_MACRO Bit Macro Functions
  Bit Macro Functions of P1
  @{ */

sbit P10        = P1^0;
sbit P11        = P1^1;
sbit P12        = P1^2;
sbit P13        = P1^3;
sbit P14        = P1^4;
sbit P15        = P1^5;
sbit P16        = P1^6;
sbit P17        = P1^7;

#define set_P1_7                         P1|=0x80
#define set_P1_6                         P1|=0x40
#define set_P1_5                         P1|=0x20
#define set_P1_4                         P1|=0x10
#define set_P1_3                         P1|=0x08
#define set_P1_2                         P1|=0x04
#define set_P1_1                         P1|=0x02
#define set_P1_0                         P1|=0x01

#define clr_P1_7                         P1&=0x7F
#define clr_P1_6                         P1&=0xBF
#define clr_P1_5                         P1&=0xDF
#define clr_P1_4                         P1&=0xEF
#define clr_P1_3                         P1&=0xF7
#define clr_P1_2                         P1&=0xFB
#define clr_P1_1                         P1&=0xFD
#define clr_P1_0                         P1&=0xFE

/**@}*/ /* end of GPIO_P1_MACRO group */
/**@}*/ /* end of GPIO_P1 group */

/**
  @addtogroup GPIO_P2 P2
  @ref P2 Special Function Register
  Address: A0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @var P2
  Address: A0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */
sfr P2 = 0xA0;

/**
  @addtogroup GPIO_P2_MACRO Bit Macro Functions
  Bit Macro Functions of P2
  @{ */

sbit P20        = P2^0;
sbit P21        = P2^1;
sbit P22        = P2^2;
sbit P23        = P2^3;
sbit P24        = P2^4;
sbit P25        = P2^5;
sbit P26        = P2^6;
sbit P27        = P2^7;

#define set_P2_7                         P2|=0x80
#define set_P2_6                         P2|=0x40
#define set_P2_5                         P2|=0x20
#define set_P2_4                         P2|=0x10
#define set_P2_3                         P2|=0x08
#define set_P2_2                         P2|=0x04
#define set_P2_1                         P2|=0x02
#define set_P2_0                         P2|=0x01

#define clr_P2_7                         P2&=0x7F
#define clr_P2_6                         P2&=0xBF
#define clr_P2_5                         P2&=0xDF
#define clr_P2_4                         P2&=0xEF
#define clr_P2_3                         P2&=0xF7
#define clr_P2_2                         P2&=0xFB
#define clr_P2_1                         P2&=0xFD
#define clr_P2_0                         P2&=0xFE

/**@}*/ /* end of SFR_P2_MACRO group */
/**@}*/ /* end of SFR_P2 group */

/**
  @addtogroup GPIO_P3 P3
  @ref P3 Special Function Register
  Address: B0H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup GPIO_P4 P4
  @ref P4 Special Function Register
  Address: D8H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup GPIO_P5 P5
  @ref P5 Special Function Register
  Address: B1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup GPIO_P6 P6
  @ref P6 Special Function Register
  Address: A7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |Pn[7:0]   |Port n
  |        |          |Port n is an maximum 8-bit general purpose I/O port.
 */

/**
  @addtogroup GPIO_P0M1 P0M1
  @ref P0M1 Special Function Register
  Address: B1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P1M1 P1M1
  @ref P1M1 Special Function Register
  Address: B3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P2M1 P2M1
  @ref P2M1 Special Function Register
  Address: B5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P3M1 P3M1
  @ref P3M1 Special Function Register
  Address: C2H, Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */


/**
  @addtogroup GPIO_P4M1 P4M1
  @ref P4M1 Special Function Register
  Address: B9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P5M1 P5M1
  @ref P5M1 Special Function Register
  Address: BDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P6M1 P6M1
  @ref P6M1 Special Function Register
  Address: 84H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM1[7:0] |Port n mode select 1
 */

/**
  @addtogroup GPIO_P0M2 P0M2
  @ref P0M2 Special Function Register
  Address: B2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P1M2 P1M2
  @ref P1M2 Special Function Register
  Address: B4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P2M2 P2M2
  @ref P2M2 Special Function Register
  Address: B6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P3M2 P3M2
  @ref P3M2 Special Function Register
  Address: C3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P4M2 P4M2
  @ref P4M2 Special Function Register
  Address: BAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P5M2 P5M2
  @ref P5M2 Special Function Register
  Address: BEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P6M2 P6M2
  @ref P6M2 Special Function Register
  Address: 85H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnM2[7:0] |Port n Mode Select 2
  |        |          |Note: PxM1 and PxM2 are used in combination to determine the I/O mode
  |        |          |of each pin of Port. See Table 6.41 Configuration for Different I/O
  |        |          |Modes.
 */

/**
  @addtogroup GPIO_P0MF10 P0MF10
  @ref P0MF10 Special Function Register
  Address: F9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P1MF10 P1MF10
  @ref P1MF10 Special Function Register
  Address: FDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P2MF10 P2MF10
  @ref P2MF10 Special Function Register
  Address: F2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P3MF10 P3MF10
  @ref P3MF10 Special Function Register
  Address: F6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P4MF10 P4MF10
  @ref P4MF10 Special Function Register
  Address: EBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P5MF10 P5MF10
  @ref P5MF10 Special Function Register
  Address: EFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P6MF10 P6MF10
  @ref P6MF10 Special Function Register
  Address: 92H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF0[3:0]|Pn.0 multi-function select
  |[7:4]   |PnMF1[3:0]|Pn.1 multi-function select
 */

/**
  @addtogroup GPIO_P0MF32 P0MF32
  @ref P0MF32 Special Function Register
  Address: FAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P1MF32 P1MF32
  @ref P1MF32 Special Function Register
  Address: FEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P2MF32 P2MF32
  @ref P2MF32 Special Function Register
  Address: F3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P3MF32 P3MF32
  @ref P3MF32 Special Function Register
  Address: F7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P4MF32 P4MF32
  @ref P4MF32 Special Function Register
  Address: ECH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P5MF32 P5MF32
  @ref P5MF32 Special Function Register
  Address: E1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P6MF32 P6MF32
  @ref P6MF32 Special Function Register
  Address: 93H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF2[3:0]|Pn.2 multi-function select
  |[7:4]   |PnMF3[3:0]|Pn.3 multi-function select
 */

/**
  @addtogroup GPIO_P0MF54 P0MF54
  @ref P0MF54 Special Function Register
  Address: FBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P1MF54 P1MF54
  @ref P1MF54 Special Function Register
  Address: FFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P2MF54 P2MF54
  @ref P2MF54 Special Function Register
  Address: F4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P3MF54 P3MF54
  @ref P3MF54 Special Function Register
  Address: E9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P4MF54 P4MF54
  @ref P4MF54 Special Function Register
  Address: EDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P5MF54 P5MF54
  @ref P5MF54 Special Function Register
  Address: E2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P6MF54 P6MF54
  @ref P6MF54 Special Function Register
  Address: 94H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF4[3:0]|Pn.4 multi-function select
  |[7:4]   |PnMF5[3:0]|Pn.5 multi-function select
 */

/**
  @addtogroup GPIO_P0MF76 P0MF76
  @ref P0MF76 Special Function Register
  Address: FCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P1MF76 P1MF76
  @ref P1MF76 Special Function Register
  Address: F1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P2MF76 P2MF76
  @ref P2MF76 Special Function Register
  Address: F5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P3MF76 P3MF76
  @ref P3MF76 Special Function Register
  Address: EAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P4MF76 P4MF76
  @ref P4MF76 Special Function Register
  Address: EEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P5MF76 P5MF76
  @ref P5MF76 Special Function Register
  Address: 95H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |PnMF6[3:0]|Pn.6 multi-function select
  |[7:4]   |PnMF7[3:0]|Pn.7 multi-function select
 */

/**
  @addtogroup GPIO_P0S P0S
  @ref P0S Special Function Register
  Address: 99H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P1S P1S
  @ref P1S Special Function Register
  Address: 9BH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P2S P2S
  @ref P2S Special Function Register
  Address: 9DH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P3S P3S
  @ref P3S Special Function Register
  Address: ACH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P4S P4S
  @ref P4S Special Function Register
  Address: BBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P5S P5S
  @ref P5S Special Function Register
  Address: BFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P6S P6S
  @ref P6S Special Function Register
  Address: 96H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnS[7:0]  |Pn Schmitt Triggered Input
  |        |          |0 = TTL level input of Pn.x.
  |        |          |1 = Schmitt triggered input of Pn.x.
 */

/**
  @addtogroup GPIO_P0SR P0SR
  @ref P0SR Special Function Register
  Address: 9AH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P1SR P1SR
  @ref P1SR Special Function Register
  Address: 9CH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P2SR P2SR
  @ref P2SR Special Function Register
  Address: 9EH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P3SR P3SR
  @ref P3SR Special Function Register
  Address: ADH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P4SR P4SR
  @ref P4SR Special Function Register
  Address: BCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P5SR P5SR
  @ref P5SR Special Function Register
  Address: AEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P6SR P6SR
  @ref P6SR Special Function Register
  Address: 8EH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnSR[7:0] |Pn.x Slew Rate
  |        |          |0 = Pn.x normal output slew rate.
  |        |          |1 = Pn.x high-speed output slew rate.
 */

/**
  @addtogroup GPIO_P0UP P0UP
  @ref P0UP Special Function Register
  Address: 92H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P1UP P1UP
  @ref P1UP Special Function Register
  Address: 93H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P2UP P2UP
  @ref P2UP Special Function Register
  Address: 94H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P3UP P3UP
  @ref P3UP Special Function Register
  Address: 95H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P4UP P4UP
  @ref P4UP Special Function Register
  Address: 96H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P5UP P5UP
  @ref P5UP Special Function Register
  Address: 97H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P6UP P6UP
  @ref P6UP Special Function Register
  Address: 97H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnUP[7:0] |Pn.x Pull-Up Enable
  |        |          |0 = Pn.x pull-up Disabled.
  |        |          |1 = Pn.x pull-up Enabled.
 */

/**
  @addtogroup GPIO_P0DW P0DW
  @ref P0DW Special Function Register
  Address: 8AH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P1DW P1DW
  @ref P1DW Special Function Register
  Address: 8BH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P2DW P2DW
  @ref P2DW Special Function Register
  Address: 8CH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P3DW P3DW
  @ref P3DW Special Function Register
  Address: 8DH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P4DW P4DW
  @ref P4DW Special Function Register
  Address: 8EH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P5DW P5DW
  @ref P5DW Special Function Register
  Address: 8FH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_P6DW P6DW
  @ref P6DW Special Function Register
  Address: 8FH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PnDW[7:0] |Pn.x Pull-Down Enable
  |        |          |0 = Pn.x pull-down Disabled.
  |        |          |1 = Pn.x pull-down Enabled.
 */

/**
  @addtogroup GPIO_PICON PICON
  @ref PICON Special Function Register
  Address: E9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PIT0      |Pin Interrupt Channel 0 Type Select
  |        |          |This bit selects which type that pin interrupt channel 0 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[1]     |PIT1      |Pin Interrupt Channel 1 Type Select
  |        |          |This bit selects which type that pin interrupt channel 1 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[2]     |PIT2      |Pin Interrupt Channel 2 Type Select
  |        |          |This bit selects which type that pin interrupt channel 2 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[3]     |PIT3      |Pin Interrupt Channel 3 Type Select
  |        |          |This bit selects which type that pin interrupt channel 3 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[4]     |PIT4      |Pin Interrupt Channel 4 Type Select
  |        |          |This bit selects which type that pin interrupt channel 4 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[5]     |PIT5      |Pin Interrupt Channel 5 Type Select
  |        |          |This bit selects which type that pin interrupt channel 5 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[6]     |PIT6      |Pin Interrupt Channel 6 Type Select
  |        |          |This bit selects which type that pin interrupt channel 6 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
  |[7]     |PIT7      |Pin Interrupt Channel 7 Type Select
  |        |          |This bit selects which type that pin interrupt channel 7 is triggered.
  |        |          |0 = Level triggered.
  |        |          |1 = Edge triggered.
 */

/**
  @addtogroup GPIO_PINEN PINEN
  @ref PINEN Special Function Register
  Address: EAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PINENn    |Pin Interrupt Channel n Negative Polarity Enable
  |        |          |This bit enables low-level/falling edge triggering pin interrupt
  |        |          |channel n. The level or edge triggered selection depends on each
  |        |          |control bit PITn in PICON.
  |        |          |0 = Low-level/falling edge detect Disabled.
  |        |          |1 = Low-level/falling edge detect Enabled.
 */

/**
  @addtogroup GPIO_PIPEN PIPEN
  @ref PIPEN Special Function Register
  Address: EBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PIPENn    |Pin Interrupt Channel n Positive Polarity Enable
  |        |          |This bit enables high-level/rising edge triggering pin interrupt
  |        |          |channel n. The level or edge triggered selection depends on each
  |        |          |control bit PITn in PICON.
  |        |          |0 = High-level/rising edge detect Disabled.
  |        |          |1 = High-level/rising edge detect Enabled.
 */

/**
  @addtogroup GPIO_PIF PIF
  @ref PIF Special Function Register
  Address: CAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PIFn      |Pin Interrupt Channel n Flag
  |        |          |If the edge trigger is selected, this flag will be set by hardware if
  |        |          |the channel n of pin interrupt detects an enabled edge trigger. This
  |        |          |flag should be cleared by software.
  |        |          |If the level trigger is selected, this flag follows the inverse of the
  |        |          |input signal¡¦s logic level on the channel n of pin interrupt. Software
  |        |          |cannot control it.
 */

/**
  @addtogroup GPIO_PIPS0 PIPS0
  @ref PIPS0 Special Function Register
  Address: A1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS1 PIPS1
  @ref PIPS1 Special Function Register
  Address: A2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS2 PIPS2
  @ref PIPS2 Special Function Register
  Address: A3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS3 PIPS3
  @ref PIPS3 Special Function Register
  Address: A4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS4 PIPS4
  @ref PIPS4 Special Function Register
  Address: A5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS5 PIPS5
  @ref PIPS5 Special Function Register
  Address: A6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS6 PIPS6
  @ref PIPS6 Special Function Register
  Address: A7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup GPIO_PIPS7 PIPS7
  @ref PIPS7 Special Function Register
  Address: AFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BSEL[2:0] |Pin Interrupt Channel Bit Select
  |        |          |000 = Pn.0.
  |        |          |001 = Pn.1
  |        |          |010 =.Pn.2
  |        |          |011 = Pn.3.
  |        |          |100 = Pn.4.
  |        |          |101 = Pn.5.
  |        |          |110 = Pn.6.
  |        |          |111 = Pn.7.
  |        |          |n is the PORT number, which is selected by PSEL[2:0].
  |[3]     |Reserved  |Reserved
  |[6:4]   |PSEL[2:0] |Pin Interrupt Channel Port Select
  |        |          |000 = P0 PORT.
  |        |          |001 = P1 PORT.
  |        |          |010 = P2 PORT.
  |        |          |011 = P3 PORT.
  |        |          |100 = P4 PORT.
  |        |          |101 = P5 PORT.
  |        |          |110 = P6 PORT.
  |        |          |111 = Reserved.
  |[7]     |Reserved  |Reserved
 */

/**@}*/ /* end of GPIO group */

/**
  @addtogroup TIMER01 Timer01 Control Register
  @{ */

/**
  @addtogroup Timer01_TMOD TMOD
  @ref TMOD Special Function Register
  Address: 89H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |M0        |Check with bit 1 description
  |[1]     |M1        |Timer 0 Mode Select
  |        |          |M1
  |        |          |M0
  |        |          |Timer 0 Mode
  |        |          |0
  |        |          |0
  |        |          |Mode 0: 13-bit   Timer/Counter
  |        |          |0
  |        |          |1
  |        |          |Mode 1: 16-bit   Timer/Counter
  |        |          |1
  |        |          |0
  |        |          |Mode 2: 8-bit   Timer/Counter with auto-reload from TH0
  |        |          |1
  |        |          |1
  |        |          |Mode 3: TL0 as a   8-bit Timer/Counter and TH0 as a 8-bit Timer
  |[2]     |C/T       |Timer 0 Counter/Timer Select
  |        |          |0 = Timer 0 is incremented by internal system clock.
  |        |          |1 = Timer 0 is incremented by the falling edge of the external pin T0.
  |[3]     |GATE      |Timer 0 Gate Control
  |        |          |0 = Timer 0 will clock when TR0 is 1 regardless of INT0 logic level.
  |        |          |1 = Timer 0 will clock only when TR0 is 1 and INT0 is logic 1.
  |[4]     |M0        |Check with bit 5 description.
  |[5]     |M1        |Timer 1 Mode Select
  |        |          |M1
  |        |          |M0
  |        |          |Timer 1 Mode
  |        |          |0
  |        |          |0
  |        |          |Mode 0: 13-bit   Timer/Counter
  |        |          |0
  |        |          |1
  |        |          |Mode 1: 16-bit   Timer/Counter
  |        |          |1
  |        |          |0
  |        |          |Mode 2: 8-bit   Timer/Counter with auto-reload from TH1
  |        |          |1
  |        |          |1
  |        |          |Mode 3: Timer 1   halted
  |[6]     |C/T       |Timer 1 Counter/Timer Select
  |        |          |0 = Timer 1 is incremented by internal system clock.
  |        |          |1 = Timer 1 is incremented by the falling edge of the external pin T1.
  |[7]     |GATE      |Timer 1 Gate Control
  |        |          |0 = Timer 1 will clock when TR1 is 1 regardless of INT1 logic level.
  |        |          |1 = Timer 1 will clock only when TR1 is 1 and INT1 is logic 1.
 */

/**
  @addtogroup Timer01_TCON TCON
  @ref TCON Special Function Register
  Address: 88H, All SFR Pages, Bit-addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |IT0       |External Interrupt 0 Type Select
  |        |          |This bit selects by which type that INT0 is triggered.
  |        |          |0 = INT0 is low level triggered.
  |        |          |1 = INT0 is falling edge triggered.
  |[1]     |IE0       |External Interrupt 0 Edge Flag
  |        |          |If IT0 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT0 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT0 input signal¡¦s logic level. Software cannot control it.
  |[2]     |IT1       |External Interrupt 1 Type Select
  |        |          |This bit selects by which type that INT1 is triggered.
  |        |          |0 = INT1 is low level triggered.
  |        |          |1 = INT1 is fallinVg edge triggered.
  |[3]     |IE1       |External Interrupt 1 Edge Flag
  |        |          |If IT1 = 1 (falling edge trigger), this flag will be set by hardware
  |        |          |when a falling edge is detected. It remain set until cleared via
  |        |          |software or cleared by hardware in the beginning of its interrupt
  |        |          |service routine.
  |        |          |If IT1 = 0 (low level trigger), this flag follows the inverse of the
  |        |          |INT1 input signal¡¦s logic level. Software cannot control it.
  |[4]     |TR0       |Timer 0 Run Control
  |        |          |0 = Timer 0 Disabled. Clearing this bit will halt Timer 0 and the
  |        |          |current count will be preserved in TH0 and TL0.
  |        |          |1 = Timer 0 Enabled.
  |[5]     |TF0       |Timer 0 Overflow Flag
  |        |          |This bit is set when Timer 0 overflows. It is automatically cleared
  |        |          |via hardware when the program executes the Timer 0 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
  |[6]     |TR1       |Timer 1 Run Control
  |        |          |0 = Timer 1 Disabled. Clearing this bit will halt Timer 1 and the
  |        |          |current count will be preserved in TH1 and TL1.
  |        |          |1 = Timer 1 Enabled.
  |[7]     |TF1       |Timer 1 Overflow Flag
  |        |          |This bit is set when Timer 1 overflows. It is automatically cleared by
  |        |          |hardware when the program executes the Timer 1 interrupt service
  |        |          |routine. This bit can be set or cleared by software.
 */

/**
  @addtogroup Timer01_TL0 TL0
  @ref TL0 Special Function Register
  Address: 8AH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TL0[7:0]  |Timer 0 Low Byte
  |        |          |The TL0 register is the low byte of the 16-bit counting register of
  |        |          |Timer 0.
 */

/**
  @addtogroup Timer01_TH0 TH0
  @ref TH0 Special Function Register
  Address: 8CH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TH0[7:0]  |Timer 0 High Byte
  |        |          |The TH0 register is the high byte of the 16-bit counting register of
  |        |          |Timer 0.
 */

/**
  @addtogroup Timer01_TL1 TL1
  @ref TL1 Special Function Register
  Address: 8BH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TL1[7:0]  |Timer 1 Low Byte
  |        |          |The TL1 register is the low byte of the 16-bit counting register of
  |        |          |Timer 1.
 */

/**
  @addtogroup Timer01_TH1 TH1
  @ref TH1 Special Function Register
  Address: 8DH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TH1[7:0]  |Timer 1 High Byte
  |        |          |The TH1 register is the high byte of the 16-bit counting register of
  |        |          |Timer 1.
 */

/**@}*/ /* end of TIMER01 group */

/**
  @addtogroup TIMER2 Timer2 Control Register
  @{ */

/**
  @addtogroup Timer2_CAPCON0 CAPCON0
  @ref CAPCON0 Special Function Register
  Address: E1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CAPF0     |Input Capture 0 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 0
  |        |          |occurs. This bit should cleared by software.
  |[1]     |CAPF1     |Input Capture 1 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 1
  |        |          |occurs. This bit should cleared by software.
  |[2]     |CAPF2     |Input Capture 2 Flag
  |        |          |This bit is set by hardware if the determined edge of input capture 2
  |        |          |occurs. This bit should cleared by software.
  |[3]     |Reserved  |Reserved
  |[4]     |CAPEN0    |Input Capture 0 Enable
  |        |          |0 = Input capture channel 0 Disabled.
  |        |          |1 = Input capture channel 0 Enabled.
  |[5]     |CAPEN1    |Input Capture 1 Enable
  |        |          |0 = Input capture channel 1 Disabled.
  |        |          |1 = Input capture channel 1 Enabled.
  |[6]     |CAPEN2    |Input Capture 2 Enable
  |        |          |0 = Input capture channel 2 Disabled.
  |        |          |1 = Input capture channel 2 Enabled.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup Timer2_CAPCON1 CAPCON1
  @ref CAPCON1 Special Function Register
  Address: E2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |CAP0LS[1:0]|Input Capture 0 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[3:2]   |CAP1LS[1:0]|Input Capture 1 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[5:4]   |CAP2LS[1:0]|Input Capture 2 Level Select
  |        |          |00 = Falling edge.
  |        |          |01 = Rising edge.
  |        |          |10 = Either rising or falling edge.
  |        |          |11 = Reserved.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup Timer2_CAPCON2 CAPCON2
  @ref CAPCON2 Special Function Register
  Address: E3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ENF0      |Enable Noise Filer on Input Capture 0
  |        |          |0 = Noise filter on input capture channel 0 Disabled.
  |        |          |1 = Noise filter on input capture channel 0 Enabled.
  |[5]     |ENF1      |Enable Noise Filer on Input Capture 1
  |        |          |0 = Noise filter on input capture channel 1 Disabled.
  |        |          |1 = Noise filter on input capture channel 1 Enabled.
  |[6]     |ENF2      |Enable Noise Filer on Input Capture 2
  |        |          |0 = Noise filter on input capture channel 2 Disabled.
  |        |          |1 = Noise filter on input capture channel 2 Enabled.
 */

/**
  @addtogroup Timer2_C0L C0L
  @ref C0L Special Function Register
  Address: E4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup Timer2_C1L C1L
  @ref C1L Special Function Register
  Address: E6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup Timer2_C2L C2L
  @ref C2L Special Function Register
  Address: EDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnL[7:0]  |Input Capture n Result Low Byte
  |        |          |The CnL register is the low byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup Timer2_C0H C0H
  @ref C0H Special Function Register
  Address: E5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup Timer2_C1H C1H
  @ref C1H Special Function Register
  Address: E7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**
  @addtogroup Timer2_C2H C2H
  @ref C2H Special Function Register
  Address: EEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CnH[7:0]  |Input Capture n Result High Byte
  |        |          |The CnH register is the high byte of the 16-bit result captured by
  |        |          |input capture n.
 */

/**@}*/ /* end of TIMER2 group */

/**
  @addtogroup TIMER3 Timer3 Control Register
  @{ */

/**
  @addtogroup Timer3_RL3 RL3
  @ref RL3 Special Function Register
  Address: C5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RL3[7:0]  |Timer 3 Reload Low Byte
  |        |          |It holds the low byte of the reload value of Timer 3.
 */

/**
  @addtogroup Timer3_RH3 RH3
  @ref RH3 Special Function Register
  Address: C6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RH3[7:0]  |Timer 3 Reload High Byte
  |        |          |It holds the high byte of the reload value of Time 3.
 */

/**@}*/ /* end of TIMER3 group */

/**
  @addtogroup WDT WDT Control Register
  @{ */

/**
  @addtogroup WDT_WDCON WDCON
  @ref WDCON Special Function Register
  Address: AAH, SFR Page 0, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WDPS[2:0] |WDT Clock Pre-Scalar Select
  |        |          |These bits determine the pre-scale of WDT clock from 1/1 through
  |        |          |1/256. SeeTable 6.61 Watchdog Timer-out Interval Under Different Pre-
  |        |          |scalars. The default is the maximum pre-scale value.
  |[3]     |WDTRF     |WDT Reset Flag
  |        |          |When the CPU is reset by WDT time-out event, this bit will be set via
  |        |          |hardware. This flag is recommended to be cleared via software after
  |        |          |reset.
  |[4]     |WIDPD     |WDT Running in Idle or Power-Down Mode
  |        |          |This bit is valid only when control bits in WDTEN[3:0] (CONFIG4[7:4])
  |        |          |are all 1. It decides whether WDT runs in Idle or Power-down mode when
  |        |          |WDT works as a general purpose timer.
  |        |          |0 = WDT stops running during Idle or Power-down mode.
  |        |          |1 = WDT keeps running during Idle or Power-down mode.
  |[5]     |WDTF      |WDT Time-Out Flag
  |        |          |This bit indicates an overflow of WDT counter. This flag should be
  |        |          |cleared by software.
  |[6]     |WDCLR     |WDT Clear
  |        |          |Setting this bit will reset the WDT count to 00H. It puts the counter
  |        |          |in a known state and prohibit the system from unpredictable reset. The
  |        |          |meaning of writing and reading WDCLR bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing WDT counter.
  |        |          |Reading:
  |        |          |0 = WDT counter is completely cleared.
  |        |          |1 = WDT counter is not yet cleared.
  |[7]     |WDTR      |WDT Run
  |        |          |This bit is valid only when control bits in WDTEN[3:0] (CONFIG4[7:4])
  |        |          |are all 1. At this time, WDT works as a general purpose timer.
  |        |          |0 = WDT Disabled.
  |        |          |1 = WDT Enabled. The WDT counter starts running.
 */

/**@}*/ /* end of WDT group */

/**
  @addtogroup WKT WKT Control Register
  @{ */

/**
  @addtogroup WKT_WKCON WKCON
  @ref WKCON Special Function Register
  Address: 8FH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WKPS[2:0] |WKT Pre-Scalar
  |        |          |These bits determine the pre-scale of WKT clock.
  |        |          |000 = 1/1.
  |        |          |001 = 1/4.
  |        |          |010 = 1/16.
  |        |          |011 = 1/64.
  |        |          |100 = 1/256.
  |        |          |101 = 1/512.
  |        |          |110 = 1/1024.
  |        |          |111 = 1/2048.
  |[3]     |WKTR      |WKT Run Control
  |        |          |0 = WKT is halted.
  |        |          |1 = WKT starts running.
  |        |          |Note that the reload register RWK can only be written when WKT is
  |        |          |halted (WKTR bit is 0). If WKT is written while WKTR is 1, result is
  |        |          |unpredictable.
  |[4]     |WKTF      |WKT Overflow Flag
  |        |          |This bit is set when WKT overflows. If the WKT interrupt and the
  |        |          |global interrupt are enabled, setting this bit will make CPU execute
  |        |          |WKT interrupt service routine. This bit is not automatically cleared
  |        |          |via hardware and should be cleared via software.
  |[5]     |WKTCK     |WKT Clock Source
  |        |          |This bit is set WKT clock source select bit.
  |        |          |0 = LIRC
  |        |          |1 = LXT
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup WKT_RWKH RWKH
  @ref RWKH Special Function Register
  Address: BFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RWK[15:8] |WKT Reload High Byte
  |        |          |It holds the 16-bit reload value of WKT. Note that RWK should not be
  |        |          |FFFFH if the pre-scale is 1/1 for implement limitation.
 */

/**
  @addtogroup WKT_RWKL RWKL
  @ref RWKL Special Function Register
  Address: 86H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |RWK[7:0]  |WKT Reload Low Byte
  |        |          |It holds the 16-bit reload value of WKT. Note that RWK should not be
  |        |          |FFFFH if the pre-scale is 1/1 for implement limitation.
 */

/**
  @addtogroup WKT_CWKH CWKH
  @ref CWKH Special Function Register
  Address: BEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CWK[15:8] |WKT Current Count Value Low Byte High Byte
  |        |          |It is store value of WKT current count.
 */

/**
  @addtogroup WKT_CWKL CWKL
  @ref CWKL Special Function Register
  Address: 86H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CWK[7:0]  |WKT Current Count Value Low Byte Low Byte
  |        |          |It is store value of WKT current count.
 */

/**@}*/ /* end of WKT group */

/**
  @addtogroup PWM PWM Control Register
  @{ */

/**
  @addtogroup PWM_PWM0CON0 PWM0CON0
  @ref PWM0CON0 Special Function Register
  Address: D1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWM0RUN   |PWM0 Run Enable
  |        |          |0 = PWM0 stays in idle.
  |        |          |1 = PWM0 starts running.
 */

/**
  @addtogroup PWM_PWM1CON0 PWM1CON0
  @ref PWM1CON0 Special Function Register
  Address: 9CH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup PWM_PWM2CON0 PWM2CON0
  @ref PWM2CON0 Special Function Register
  Address: C4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup PWM_PWM3CON0 PWM3CON0
  @ref PWM3CON0 Special Function Register
  Address: D4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |Reserved  |Reserved
  |[4]     |CLRPWM    |Clear PWM Counter
  |        |          |Setting this bit clears the value of PWM 16-bit counter for resetting
  |        |          |to 0000H. After the counter value is cleared, CLRPWM will be
  |        |          |automatically cleared via hardware. The meaning of writing and reading
  |        |          |CLRPWM bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Clearing PWM 16-bit counter.
  |        |          |Reading:
  |        |          |0 = PWM 16-bit counter is completely cleared.
  |        |          |1 = PWM 16-bit counter is not yet cleared.
  |[5]     |PWMF      |PWM Flag
  |        |          |This flag is set according to definitions of INTSEL[2:0] and
  |        |          |INTTYP[1:0] in PWMnINTC. This bit is cleared by software.
  |[6]     |LOAD      |PWM New Period and Duty Load
  |        |          |This bit is used to load period and duty Register Description in their
  |        |          |buffer if new period or duty value needs to be updated. The loading
  |        |          |will act while a PWM period is completed. The new period and duty
  |        |          |affected on the next PWM cycle. After the loading is complete, LOAD
  |        |          |will be automatically cleared via hardware. The meaning of writing and
  |        |          |reading LOAD bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Load new period and duty in their buffers while a PWM period is
  |        |          |completed.
  |        |          |Reading:
  |        |          |0 = A loading of new period and duty is finished.
  |        |          |1 = A loading of new period and duty is not yet finished.
  |[7]     |PWMnRUN   |PWMn Run Enable
  |        |          |0 = PWM stays in idle.
  |        |          |1 = PWM starts running.
 */

/**
  @addtogroup PWM_PWM0CON1 PWM0CON1
  @ref PWM0CON1 Special Function Register
  Address: DFH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup PWM_PWM1CON1 PWM1CON1
  @ref PWM1CON1 Special Function Register
  Address: 9DH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup PWM_PWM2CON1 PWM2CON1
  @ref PWM2CON1 Special Function Register
  Address: C5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup PWM_PWM3CON1 PWM3CON1
  @ref PWM3CON1 Special Function Register
  Address: D5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |PWMDIV[2:0]|PWM Clock Divider
  |        |          |This field decides the pre-scale of PWM clock source.
  |        |          |000 = 1/1.
  |        |          |001 = 1/2
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |110 = 1/64.
  |        |          |111 = 1/128.
  |[3]     |FBINEN    |FB Pin Input Enable
  |        |          |0 = PWM0 output Fault Braked by FB pin input Disabled.
  |        |          |1 = PWM0 output Fault Braked by FB pin input Enabled. Once an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection, occurs on FB pin,
  |        |          |PWM0CH0~5 output Fault Brake data in PWMnFBD register. PWMRUN
  |        |          |(PWM0CON0.7) will also be automatically cleared by hardware. The PWM
  |        |          |output resumes when PWM0RUN is set again.
  |        |          |Note: This bit is only vaild in PWM0
  |[4]     |PWMTYP    |PWM Type Select
  |        |          |0 = Edge-aligned PWM.
  |        |          |1 = Center-aligned PWM.
  |[5]     |GP        |Group Mode Enable
  |        |          |This bit enables the group mode. If enabled, the duty of first three
  |        |          |pairs of PWM are decided by PWM01H and PWM01L rather than their
  |        |          |original duty Register Description.
  |        |          |0 = Group mode Disabled.
  |        |          |1 = Group mode Enabled.
  |[7:6]   |PWMMOD[1:0]|PWM Mode Select
  |        |          |00 = Independent mode.
  |        |          |01 = Complementary mode.
  |        |          |10 = Synchronized mode.
  |        |          |11 = Reserved.
 */

/**
  @addtogroup PWM_PWM0PL PWM0PL
  @ref PWM0PL Special Function Register
  Address: D9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM1PL PWM1PL
  @ref PWM1PL Special Function Register
  Address: 99H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM2PL PWM2PL
  @ref PWM2PL Special Function Register
  Address: C1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM3PL PWM3PL
  @ref PWM3PL Special Function Register
  Address: D1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[7:0]|PWMn Period Low Byte
  |        |          |This byte with PWMnPH controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM0PH PWM0PH
  @ref PWM0PH Special Function Register
  Address: D1H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM1PH PWM1PH
  @ref PWM1PH Special Function Register
  Address: 86H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM2PH PWM2PH
  @ref PWM2PH Special Function Register
  Address: B9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM3PH PWM3PH
  @ref PWM3PH Special Function Register
  Address: C9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnP[15:8]|PWM Period High Byte
  |        |          |This byte with PWMnPL controls the period of the PWM generator signal.
 */

/**
  @addtogroup PWM_PWM0C0H PWM0C0H
  @ref PWM0C0H Special Function Register
  Address: D2H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C1H PWM0C1H
  @ref PWM0C1H Special Function Register
  Address: D3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C2H PWM0C2H
  @ref PWM0C2H Special Function Register
  Address: D4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C3H PWM0C3H
  @ref PWM0C3H Special Function Register
  Address: D5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C4H PWM0C4H
  @ref PWM0C4H Special Function Register
  Address: C4H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C5H PWM0C5H
  @ref PWM0C5H Special Function Register
  Address: C5H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM1C0H PWM1C0H
  @ref PWM1C0H Special Function Register
  Address: 8AH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM1C1H PWM1C1H
  @ref PWM1C1H Special Function Register
  Address: 8BH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM2C0H PWM2C0H
  @ref PWM2C0H Special Function Register
  Address: BAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM2C1H PWM2C1H
  @ref PWM2C1H Special Function Register
  Address: BBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM3C0H PWM3C0H
  @ref PWM3C0H Special Function Register
  Address: CAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM3C1H PWM3C1H
  @ref PWM3C1H Special Function Register
  Address: CBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [15:8], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty High Byte
  |        |          |This byte with PWMnCxL controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C0L PWM0C0L
  @ref PWM0C0L Special Function Register
  Address: DAH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C1L PWM0C1L
  @ref PWM0C1L Special Function Register
  Address: DBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C2L PWM0C2L
  @ref PWM0C2L Special Function Register
  Address: DCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C3L PWM0C3L
  @ref PWM0C3L Special Function Register
  Address: DDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C4L PWM0C4L
  @ref PWM0C4L Special Function Register
  Address: CCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0C5L PWM0C5L
  @ref PWM0C5L Special Function Register
  Address: CDH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM1C0L PWM1C0L
  @ref PWM1C0L Special Function Register
  Address: 9AH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM1C1L PWM1C1L
  @ref PWM1C1L Special Function Register
  Address: 9BH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM2C0L PWM2C0L
  @ref PWM2C0L Special Function Register
  Address: C2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM2C1L PWM2C1L
  @ref PWM2C1L Special Function Register
  Address: C3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM3C0L PWM3C0L
  @ref PWM3C0L Special Function Register
  Address: D2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM3C1L PWM3C1L
  @ref PWM3C1L Special Function Register
  Address: D3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWMnCx [7:0], n=0,1,2,3; x=0,1,2,3,4,5|PWMnCx Duty Low Byte
  |        |          |This byte with PWMnCxH controls the duty of the output signal PGx from
  |        |          |PWM generator.
 */

/**
  @addtogroup PWM_PWM0DTEN PWM0DTEN
  @ref PWM0DTEN Special Function Register
  Address: F9H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |PDT01EN   |PWM0/1 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM0/1 is under complementary mode.
  |        |          |0 = No delay on GP0/GP1 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP0/GP1 pair signals.
  |[1]     |PDT23EN   |PWM2/3 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM2/3 is under complementary mode.
  |        |          |0 = No delay on GP2/GP3 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP2/GP3 pair signals.
  |[2]     |PDT45EN   |PWM4/5 Pair Dead-Time Insertion Enable
  |        |          |This bit is valid only when PWM4/5 is under complementary mode.
  |        |          |0 = No delay on GP4/GP5 pair signals.
  |        |          |1 = Insert dead-time delay on the rising edge of GP4/GP5 pair signals.
  |[3]     |0         |Reserved
  |[4]     |PWMnDTCNT.8|PWM Dead-Time Counter Bit 8
  |        |          |See PWMnDTCNT register.
  |[7:5]   |0         |Reserved
 */

/**
  @addtogroup PWM_PWM0DTCNT PWM0DTCNT
  @ref PWM0DTCNT Special Function Register
  Address: FAH, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |PWM0DTCNT[7:0]|PWM Dead-Time Counter Low Byte
  |        |          |This 8-bit field combined with PWMnDTEN .4 forms a 9-bit PWM dead-time
  |        |          |counter PWM0DTCNT. This counter is valid only when PWM is under
  |        |          |complementary mode and the correspond PWMnDTEN bit for PWM pair is
  |        |          |set.
  |        |          |PWM dead-time = .
  |        |          |Note that user should not modify PWM0DTCNT during PWM run time.
 */

/**
  @addtogroup PWM_PWM0MEN PWM0MEN
  @ref PWM0MEN Special Function Register
  Address: FBH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup PWM_PWM1MEN PWM1MEN
  @ref PWM1MEN Special Function Register
  Address: 8DH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup PWM_PWM2MEN PWM2MEN
  @ref PWM2MEN Special Function Register
  Address: BDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup PWM_PWM3MEN PWM3MEN
  @ref PWM3MEN Special Function Register
  Address: CDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMENn     |PWMnCx Mask Enable
  |        |          |0 = PWMnCx signal outputs from its PWM generator.
  |        |          |1 = PWMnCx signal is masked by PMDx.
  |        |          |Note: PMEN2~5 are only for PWM0.
 */

/**
  @addtogroup PWM_PWM0MD PWM0MD
  @ref PWM0MD Special Function Register
  Address: FCH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup PWM_PWM1MD PWM1MD
  @ref PWM1MD Special Function Register
  Address: 8CH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup PWM_PWM2MD PWM2MD
  @ref PWM2MD Special Function Register
  Address: BCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup PWM_PWM3MD PWM3MD
  @ref PWM3MD Special Function Register
  Address: CCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PMDx      |PWMnCx Mask Data
  |        |          |The PWMnCx signal outputs mask data once its corresponding PMENx is
  |        |          |set.
  |        |          |0 = PWMnCx signal is masked by 0.
  |        |          |1 = PWMnCx signal is masked by 1.
  |        |          |Note: PMD2~5 are only for PWM0.
  |[7:6]   |0         |Reserved
  |        |          |The bits are always read as 0.
 */

/**
  @addtogroup PWM_PWM0FBD PWM0FBD
  @ref PWM0FBD Special Function Register
  Address: D7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |FBDn      |PWMn Fault Brake Data
  |        |          |0 = PWMn signal is overwritten by 0 once Fault Brake asserted.
  |        |          |1 = PWMn signal is overwritten by 1 once Fault Brake asserted.
  |[6]     |FBINLS    |PWM_BRAKE Pin Input Level Selection
  |        |          |0 = Falling edge.
  |        |          |1 = Rising edge.
  |[7]     |FBF       |Fault Brake Flag
  |        |          |This flag is set when FBINEN is set as 1 and FB pin detects an edge,
  |        |          |which matches FBINLS (PWM0FBD.6) selection. This bit is cleared by
  |        |          |software. After FBF is cleared, Fault Brake data output will not be
  |        |          |released until PWM0RUN (PWM0CON0.7) is set.
 */

/**
  @addtogroup PWM_PWM0NP PWM0NP
  @ref PWM0NP Special Function Register
  Address: D6H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |PNPn      |PWMn Negative Polarity Output Enable
  |        |          |0 = PWMn signal outputs directly on PWMn pin.
  |        |          |1 = PWMn signal outputs inversely on PWMn pin.
 */

/**
  @addtogroup PWM_PWM0INTC PWM0INTC
  @ref PWM0INTC Special Function Register
  Address: B7H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup PWM_PWM1INTC PWM1INTC
  @ref PWM1INTC Special Function Register
  Address: 9EH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup PWM_PWM2INTC PWM2INTC
  @ref PWM2INTC Special Function Register
  Address: C6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup PWM_PWM3INTC PWM3INTC
  @ref PWM3INTC Special Function Register
  Address: D6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |INTSEL[2:0]|PWM Interrupt Pair Select
  |        |          |These bits select which PWM channel asserts PWM interrupt when PWM
  |        |          |interrupt type is selected as falling or rising edge on PWM0/1/2/3/4/5
  |        |          |pin..
  |        |          |000 = PWMn_CH0.
  |        |          |001 = PWMn_CH1.
  |        |          |010 = PWMn_CH2.
  |        |          |011 = PWMn_CH3.
  |        |          |100 = PWMn_CH4.
  |        |          |101 = PWMn_CH5.
  |        |          |Others = PWMn_CH0.
  |[3]     |Reserved  |Reserved
  |[5:4]   |INTTYP[1:0]|PWM Interrupt Type Select
  |        |          |These bit select PWM interrupt type.
  |        |          |00 = Falling edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |01 = Rising edge on PWMn_CH0/1/2/3/4/5 pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the end point interrupt is
  |        |          |only available while PWM operates in center-aligned type.
  |[7:6]   |Reserved  |Reserved
 */

/**@}*/ /* end of PWM group */


/**
  @addtogroup UART01_S1CON S1CON
  @ref S1CON Special Function Register
  Address: F8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RI_1      |Receiving Interrupt Flag
  |        |          |This flag is set via hardware when a data frame has been received by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or after sampling the
  |        |          |stop bit in Mode 1, 2, or 3. SM2_1 bit as logic 1 has restriction for
  |        |          |exception. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute to the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[1]     |TI_1      |Transmission Interrupt Flag
  |        |          |This flag is set by hardware when a data frame has been transmitted by
  |        |          |the serial port 1 after the 8th bit in Mode 0 or the last data bit in
  |        |          |other modes. When the serial port 1 interrupt is enabled, setting this
  |        |          |bit causes the CPU to execute the serial port 1 interrupt service
  |        |          |routine. This bit must be cleared manually via software.
  |[2]     |RB8_1     |9th Received Bit
  |        |          |The bit identifies the logic level of the 9th received bit in serial
  |        |          |port 1 Mode 2 or 3. In Mode 1, RB8_1 is the logic level of the
  |        |          |received stop bit. SM2_1 bit as logic 1 has restriction for exception.
  |        |          |RB8_1 is not used in Mode 0.
  |[3]     |TB8_1     |9th Transmitted Bit
  |        |          |This bit defines the state of the 9th transmission bit in serial port
  |        |          |1 Mode 2 or 3. It is not used in Mode 0 or 1.
  |[4]     |REN_1     |Receiving Enable
  |        |          |0 = Serial port 1 reception Disabled.
  |        |          |1 = Serial port 1 reception Enabled in Mode 1,2, or 3. In Mode 0,
  |        |          |reception is initiated by the condition REN_1 = 1 and RI_1 = 0.
  |[5]     |SM2_1     |Multiprocessor Communication Mode Enable
  |        |          |The function of this bit is dependent on the serial port 1 mode.
  |        |          |Mode 0:
  |        |          |No effect.
  |        |          |Mode 1:
  |        |          |This bit checks valid stop bit.
  |        |          |0 = Reception is always valid no matter the logic level of stop bit.
  |        |          |1 = Reception is valid only when the received stop bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |        |          |Mode 2 or 3:
  |        |          |For multiprocessor communication.
  |        |          |0 = Reception is always valid no matter the logic level of the 9th
  |        |          |bit.
  |        |          |1 = Reception is valid only when the received 9th bit is logic 1 and
  |        |          |the received data matches Given or Broadcast address.
  |[6]     |SM1_1     |Check with bit 7 description.
  |[7]     |SM0_1/FE_1|Serial Port 1 Mode Select
  |        |          |SMOD0_1 (T3CON.6) = 0:
  |        |          |See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
  |        |          |SMOD0_1 (T3CON.6) = 1:
  |        |          |SM0_1/FE_1 bit is used as frame error (FE) status flag. It is cleared
  |        |          |by software.
  |        |          |0 = Frame error (FE) did not occur.
  |        |          |1 = Frame error (FE) occurred and detected.
 */

/**
  @addtogroup UART01_PCON PCON
  @ref PCON Special Function Register
  Address: 87H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6]     |SMOD0     |Serial Port 0 Framing Error Flag Access Enable
  |        |          |0 = SCON.7 accesses to SM0 bit.
  |        |          |1 = SCON.7 accesses to FE bit.
  |[7]     |SMOD      |Serial Port 0 Double Baud Rate Enable
  |        |          |Setting this bit doubles the serial port baud rate when UART0 is in
  |        |          |Mode 2 or when Timer 1 overflow is used as the baud rate source of
  |        |          |UART0 Mode 1 or 3. See Table 6.92 Serial Port 0 Mode / baud rate
  |        |          |Description for details.
 */

/**
  @addtogroup UART01_T3CON T3CON
  @ref T3CON Special Function Register
  Address: C4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6]     |SMOD0_1   |Serial Port 1 Framing Error Access Enable
  |        |          |0 = S1CON.7 accesses to SM0_1 bit.
  |        |          |1 = S1CON.7 accesses to FE_1 bit.
  |[7]     |SMOD_1    |Serial Port 1 Double Baud Rate Enable
  |        |          |Setting this bit doubles the serial port baud rate when UART1 is in
  |        |          |Mode 2. See Table 6.93 Serial Port 1 Mode / baud rate Description
  |        |          |for details.
 */

/**
  @addtogroup UART01_SBUF SBUF
  @ref SBUF Special Function Register
  Address: 99H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SBUF[7:0] |Serial Port 0 Data Buffer
  |        |          |This byte actually consists two separate registers. One is the
  |        |          |receiving resister, and the other is the transmitting buffer. When
  |        |          |data is moved to SBUF, it goes to the transmitting buffer and is
  |        |          |shifted for serial transmission. When data is moved from SBUF, it
  |        |          |comes from the receiving register.
  |        |          |The transmission is initiated through giving data to SBUF.
 */

/**
  @addtogroup UART01_SBUF1 SBUF1
  @ref SBUF1 Special Function Register
  Address: 9AH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SBUF1[7:0]|Serial Port 1 Data Buffer
  |        |          |This byte actually consists two separate registers. One is the
  |        |          |receiving resister, and the other is the transmitting buffer. When
  |        |          |data is moved to SBUF1, it goes to the transmitting buffer and is
  |        |          |shifted for serial transmission. When data is moved from SBUF1, it
  |        |          |comes from the receiving register.
  |        |          |The transmission is initiated through giving data to SBUF1.
 */

/**
  @addtogroup UART01_IE IE
  @ref IE Special Function Register
  Address: A8H, All SFR Pages, Bit addressable
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4]     |ES        |Enable Serial Port 0 Interrupt
  |        |          |0 = Serial port 0 interrupt Disabled.
  |        |          |1 = Interrupt generated by TI (SCON.1) or RI (SCON.0) Enabled.
 */

/**
  @addtogroup UART01_EIE1 EIE1
  @ref EIE1 Special Function Register
  Address: 9CH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ES1       |Enable Serial Port 1 Interrupt
  |        |          |0 = Serial port 1 interrupt Disabled.
  |        |          |1 = Serial port 1Interrupt Enable. When interrupt generated TI_1
  |        |          |(S1CON.1) or RI_1 (S1CON.0) set 1.
 */

/**
  @addtogroup UART01_SADDR0 SADDR0
  @ref SADDR0 Special Function Register
  Address: A9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADDR0[7:0]|Slave 0 Address
  |        |          |This byte specifies the microcontroller¡¦s own slave address for UATR0
  |        |          |multi-processor communication.
 */

/**
  @addtogroup UART01_SADEN0 SADEN0
  @ref SADEN0 Special Function Register
  Address: B9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADEN0[7:0]|Slave 0 Address Mask
  |        |          |This byte is a mask byte of UART0 that contains don¡¦t-care bits
  |        |          |(defined by zeros) to form the device¡¦s Given address. The don¡¦t-care
  |        |          |bits provide the flexibility to address one or more slaves at a time.
 */

/**
  @addtogroup UART01_SADDR1 SADDR1
  @ref SADDR1 Special Function Register
  Address: BBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADDR1[7:0]|Slave 1 Address
  |        |          |This byte specifies the microcontroller¡¦s own slave address for UART1
  |        |          |multi-processor communication.
 */

/**
  @addtogroup UART01_SADEN1 SADEN1
  @ref SADEN1 Special Function Register
  Address: BAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SADEN1[7:0]|Slave 1 Address Mask
  |        |          |This byte is a mask byte of UART1 that contains don¡¦t-care bits
  |        |          |(defined by zeros) to form the device¡¦s Given address. The don¡¦t-care
  |        |          |bits provide the flexibility to address one or more slaves at a time.
 */

/**
  @addtogroup UART01_AUXR1 AUXR1
  @ref AUXR1 Special Function Register
  Address: C9H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UART0PX   |Serial Port 0 RX/TX Pin Exchange
  |        |          |0 = Assign UART0 RXD to multiple I/O pin RXD
  |        |          |UART0 TXD to multiple I/O pin TXD
  |        |          |1 = Assign UART0 RXD to multiple I/O pin TXD
  |        |          |UART0 TXD to multiple I/O pin RXD
  |        |          |Note:
  |        |          |that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[1]     |UART1PX   |Serial Port 1 RX/TX Pin Exchange
  |        |          |0 = Assign UART1 RXD to multiple I/O pin RXD
  |        |          |UART1 TXD to multiple I/O pin TXD
  |        |          |1 = Assign UART1 RXD to multiple I/O pin TXD
  |        |          |UART1 TXD to multiple I/O pin RXD
  |        |          |Note:
  |        |          |that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[2]     |UART2PX   |Serial Port 2 RX (SMC0 DATA) /TX (SMC0 CLK) Pin Exchange
  |        |          |0 = Assign UART2 RXD (SMC0 DATA) to multiple I/O pin RXD
  |        |          |UART2 TXD (SMC CLK) to multiple I/O pin TXD
  |        |          |1 = Assign UART2 RXD (SMC0 DATA) to multiple I/O pin TXD
  |        |          |UART2 TXD (SMC CLK) to multiple I/O pin RXD
  |        |          |Note : that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[3]     |UART3PX   |Serial Port 3 RX (SMC1 DATA) /TX (SMC1 CLK) Pin Exchange
  |        |          |0 = Assign UART3 RXD (SMC1 DATA) to multiple I/O pin RXD
  |        |          |UART3 TXD (SMC CLK) to multiple I/O pin TXD
  |        |          |1 = Assign UART3 RXD (SMC1 DATA) to multiple I/O pin TXD
  |        |          |UART3 TXD (SMC CLK) to multiple I/O pin RXD
  |        |          |Note : that Pin direction is controlled by I/O type of relative pin.
  |        |          |RXD/TXD will exchange immediately once setting or clearing this bit.
  |        |          |User should take care of not exchanging pins during transmission or
  |        |          |receiving. Or it may cause unpredictable situation and no warning
  |        |          |alarms.
  |[7:4]   |Reserved  |Reserved
 */

/**@}*/ /* end of UART01 group */

/**
  @addtogroup SC SC Control Register
  @{ */

/**
  @addtogroup SC_SC0CR0 SC0CR0
  @ref SC0CR0 Special Function Register
  Address: D6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |SCEN      |SC Engine Enable Bit
  |        |          |Set this bit to 1 to enable SC operation. If this bit is cleared, SC
  |        |          |will force all transition to IDLE state
  |        |          |Note: SCEN must be set to 1 before filling in other registers, or
  |        |          |smart card will not work properly.
  |[1]     |RXOFF     |RX Transition Disable Bit
  |        |          |0 = The receiver Enabled.
  |        |          |1 = The receiver Disabled.
  |        |          |Note: If AUTOCEN (SCnCR0[3])is enabled, these fields must be ignored.
  |[2]     |TXOFF     |TX Transition Disable Bit
  |        |          |0 = The transceiver Enabled.
  |        |          |1 = The transceiver Disabled.
  |[3]     |AUTOCEN   |Auto Convention Enable Bit
  |        |          |0 = Auto-convention Disabled.
  |        |          |1 = Auto-convention Enabled. When hardware receives TS in answer to
  |        |          |reset state and the TS is direct convention, CONSEL(SCnCR0[4]) will be
  |        |          |set to 0 automatically, otherwise if the TS is inverse convention, and
  |        |          |CONSEL (SCnCR0[4]) will be set to 1.
  |        |          |Note: If software enables auto convention function, the setting step
  |        |          |must be done before Answer to Reset state and the first data must be
  |        |          |0x3B or 0x3F. After hardware received first data and stored it at
  |        |          |buffer, hardware will decided the convention and change the CONSEL
  |        |          |(SCnCR0[4]) bits automatically.
  |[4]     |CONSEL    |Convention Selection
  |        |          |0 = Direct convention.
  |        |          |1 = Inverse convention.
  |        |          |Note 1: This bit is auto clear to 0, if AUTOCEN(SCnCR0[3]) is writing
  |        |          |1
  |        |          |Note 2: If AUTOCEN(SCnCR0[3]) is enabled, hardware will decide the
  |        |          |convention and change the CONSEL (SCnCR0[4]) bits automatically after
  |        |          |SCEN (SCnCR0[0]) =1.
  |[5]     |RXBGTEN   |Receiver Block Guard Time Function Enable Bit
  |        |          |0 = Receiver block guard time function Disabled.
  |        |          |1 = Receiver block guard time function Enabled.
  |[6]     |T         |T Mode
  |        |          |0 = T0 (ISO7816-3 T = 0 mode).
  |        |          |1 = T1 (ISO7816-3 T = 1 mode).
  |        |          |The T mode controls the BGT (Block Guard Time). Block guard time means
  |        |          |the minimum bit length between the leading edges of two consecutive
  |        |          |characters between different transfer directions. This field indicates
  |        |          |the counter for the bit length of block guard time. According to
  |        |          |ISO7816-3, in T = 0 mode, the software must clear T bit to 0 for real
  |        |          |block guard time = 16.5. In T = 1 mode, the software must set T bit to
  |        |          |1 for real block guard time = 22.5.
  |        |          |Note: In T = 0 mode, the receiver will generate the parity flag on
  |        |          |PEF(SC0TSR[4]), if parity error is detected and also drive the parity
  |        |          |error signal to transceiver. In T = 1 mode, the receiver will generate
  |        |          |the parity flag on PEF(SC0TSR[4]), if parity error detected, but
  |        |          |doesn¡¦t drive the parity error signal to transceiver.
  |        |          |Note: The description please see section 6.10.6.2Error Signal and
  |        |          |Character Repetition
  |[7]     |NSB       |Stop Bit Length
  |        |          |This field indicates the length of stop bit.
  |        |          |0 = The stop bit length is 2 ETU.
  |        |          |1= The stop bit length is 1 ETU.
  |        |          |Note: The default stop bit length is 2. SC and UART adopt NSB to
  |        |          |program the stop bit length.
 */

/**
  @addtogroup SC_SC1CR0 SC1CR0
  @ref SC1CR0 Special Function Register
  Address: E6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |SCEN      |SC Engine Enable Bit
  |        |          |Set this bit to 1 to enable SC operation. If this bit is cleared, SC
  |        |          |will force all transition to IDLE state
  |        |          |Note: SCEN must be set to 1 before filling in other registers, or
  |        |          |smart card will not work properly.
  |[1]     |RXOFF     |RX Transition Disable Bit
  |        |          |0 = The receiver Enabled.
  |        |          |1 = The receiver Disabled.
  |        |          |Note: If AUTOCEN (SCnCR0[3])is enabled, these fields must be ignored.
  |[2]     |TXOFF     |TX Transition Disable Bit
  |        |          |0 = The transceiver Enabled.
  |        |          |1 = The transceiver Disabled.
  |[3]     |AUTOCEN   |Auto Convention Enable Bit
  |        |          |0 = Auto-convention Disabled.
  |        |          |1 = Auto-convention Enabled. When hardware receives TS in answer to
  |        |          |reset state and the TS is direct convention, CONSEL(SCnCR0[4]) will be
  |        |          |set to 0 automatically, otherwise if the TS is inverse convention, and
  |        |          |CONSEL (SCnCR0[4]) will be set to 1.
  |        |          |Note: If software enables auto convention function, the setting step
  |        |          |must be done before Answer to Reset state and the first data must be
  |        |          |0x3B or 0x3F. After hardware received first data and stored it at
  |        |          |buffer, hardware will decided the convention and change the CONSEL
  |        |          |(SCnCR0[4]) bits automatically.
  |[4]     |CONSEL    |Convention Selection
  |        |          |0 = Direct convention.
  |        |          |1 = Inverse convention.
  |        |          |Note 1: This bit is auto clear to 0, if AUTOCEN(SCnCR0[3]) is writing
  |        |          |1
  |        |          |Note 2: If AUTOCEN(SCnCR0[3]) is enabled, hardware will decide the
  |        |          |convention and change the CONSEL (SCnCR0[4]) bits automatically after
  |        |          |SCEN (SCnCR0[0]) =1.
  |[5]     |RXBGTEN   |Receiver Block Guard Time Function Enable Bit
  |        |          |0 = Receiver block guard time function Disabled.
  |        |          |1 = Receiver block guard time function Enabled.
  |[6]     |T         |T Mode
  |        |          |0 = T0 (ISO7816-3 T = 0 mode).
  |        |          |1 = T1 (ISO7816-3 T = 1 mode).
  |        |          |The T mode controls the BGT (Block Guard Time). Block guard time means
  |        |          |the minimum bit length between the leading edges of two consecutive
  |        |          |characters between different transfer directions. This field indicates
  |        |          |the counter for the bit length of block guard time. According to
  |        |          |ISO7816-3, in T = 0 mode, the software must clear T bit to 0 for real
  |        |          |block guard time = 16.5. In T = 1 mode, the software must set T bit to
  |        |          |1 for real block guard time = 22.5.
  |        |          |Note: In T = 0 mode, the receiver will generate the parity flag on
  |        |          |PEF(SC0TSR[4]), if parity error is detected and also drive the parity
  |        |          |error signal to transceiver. In T = 1 mode, the receiver will generate
  |        |          |the parity flag on PEF(SC0TSR[4]), if parity error detected, but
  |        |          |doesn¡¦t drive the parity error signal to transceiver.
  |        |          |Note: The description please see section 6.10.6.2Error Signal and
  |        |          |Character Repetition
  |[7]     |NSB       |Stop Bit Length
  |        |          |This field indicates the length of stop bit.
  |        |          |0 = The stop bit length is 2 ETU.
  |        |          |1= The stop bit length is 1 ETU.
  |        |          |Note: The default stop bit length is 2. SC and UART adopt NSB to
  |        |          |program the stop bit length.
 */

/**
  @addtogroup SC_SC0CR1 SC0CR1
  @ref SC0CR1 Special Function Register
  Address: D7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UARTEN    |UART Mode Enable Bit
  |        |          |0 = Smart Card mode.
  |        |          |1 = UART mode.
  |        |          |Note 1:When operating in UART mode, user must set CONSEL (SCnCR0[4]) =
  |        |          |0 and AUTOCEN(SCnCR0[3]) = 0.
  |        |          |Note 2:When operating in Smart Card mode, user must set UARTEN(SCnCR1
  |        |          |[0]) = 0.
  |        |          |Note 3:When UART is enabled, hardware will generate a reset to reset
  |        |          |FIFO and internal state machine.
  |[1]     |CLKKEEP   |SC Clock Enable Bit
  |        |          |0 = SC clock generation Disabled.
  |        |          |1 = SC clock always keeps free running.
  |[2]     |RXDMAEN   |SC/UART RX DMA Enable
  |        |          |This bit enables the SC/UART RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SC/UART RX operation.
  |        |          |0 = SC/UART RX DMA Disabled
  |        |          |1 = SC/UART RX DMA Enabled
  |[3]     |TXDMAEN   |SC/UART TX DMA Enable
  |        |          |This bit enables the SC/UART TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SC/UART TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |WLS[1:0]  |Word Length Selection
  |        |          |00 = Word length is 8 bits.
  |        |          |01 = Word length is 7 bits.
  |        |          |10 = Word length is 6 bits.
  |        |          |11 = Word length is 5 bits.
  |        |          |Note: In smart card mode, this WLS must be ¡¥00¡¦
  |[6]     |PBOFF     |Parity Bit Disable Control
  |        |          |0 = Parity bit is generated or checked between the last data word bit
  |        |          |and stop bit of the serial data.
  |        |          |1 = Parity bit is not generated (transmitting data) or checked
  |        |          |(receiving data) during transfer.
  |        |          |Note: In smart card mode, this field must be ¡¥0¡¦ (default setting is
  |        |          |with parity bit)
  |[7]     |OPE       |Odd Parity Enable Bit
  |        |          |0 = Even number of logic 1¡¦s are transmitted or check the data word
  |        |          |and parity bits in receiving mode.
  |        |          |1 = Odd number of logic 1¡¦s are transmitted or check the data word and
  |        |          |parity bits in receiving mode.
  |        |          |Note: This bit has effect only when PBOFF bit is ¡¥0¡¦.
 */

/**
  @addtogroup SC_SC1CR1 SC1CR1
  @ref SC1CR1 Special Function Register
  Address: E7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |UARTEN    |UART Mode Enable Bit
  |        |          |0 = Smart Card mode.
  |        |          |1 = UART mode.
  |        |          |Note 1:When operating in UART mode, user must set CONSEL (SCnCR0[4]) =
  |        |          |0 and AUTOCEN(SCnCR0[3]) = 0.
  |        |          |Note 2:When operating in Smart Card mode, user must set UARTEN(SCnCR1
  |        |          |[0]) = 0.
  |        |          |Note 3:When UART is enabled, hardware will generate a reset to reset
  |        |          |FIFO and internal state machine.
  |[1]     |CLKKEEP   |SC Clock Enable Bit
  |        |          |0 = SC clock generation Disabled.
  |        |          |1 = SC clock always keeps free running.
  |[2]     |RXDMAEN   |SC/UART RX DMA Enable
  |        |          |This bit enables the SC/UART RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SC/UART RX operation.
  |        |          |0 = SC/UART RX DMA Disabled
  |        |          |1 = SC/UART RX DMA Enabled
  |[3]     |TXDMAEN   |SC/UART TX DMA Enable
  |        |          |This bit enables the SC/UART TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SC/UART TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |WLS[1:0]  |Word Length Selection
  |        |          |00 = Word length is 8 bits.
  |        |          |01 = Word length is 7 bits.
  |        |          |10 = Word length is 6 bits.
  |        |          |11 = Word length is 5 bits.
  |        |          |Note: In smart card mode, this WLS must be ¡¥00¡¦
  |[6]     |PBOFF     |Parity Bit Disable Control
  |        |          |0 = Parity bit is generated or checked between the last data word bit
  |        |          |and stop bit of the serial data.
  |        |          |1 = Parity bit is not generated (transmitting data) or checked
  |        |          |(receiving data) during transfer.
  |        |          |Note: In smart card mode, this field must be ¡¥0¡¦ (default setting is
  |        |          |with parity bit)
  |[7]     |OPE       |Odd Parity Enable Bit
  |        |          |0 = Even number of logic 1¡¦s are transmitted or check the data word
  |        |          |and parity bits in receiving mode.
  |        |          |1 = Odd number of logic 1¡¦s are transmitted or check the data word and
  |        |          |parity bits in receiving mode.
  |        |          |Note: This bit has effect only when PBOFF bit is ¡¥0¡¦.
 */

/**
  @addtogroup SC_SC0DR SC0DR
  @ref SC0DR Special Function Register
  Address: D9H, Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnDR[7:0]|SC / UART Buffer Data
  |        |          |This byte is used for transmitting or receiving data on SC / UART bus.
  |        |          |A write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer.
  |        |          |Note: If SCEN(SCnCR0[0]) is not enabled, SCnDR cannot be programmed.
 */

/**
  @addtogroup SC_SC1DR SC1DR
  @ref SC1DR Special Function Register
  Address: D9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnDR[7:0]|SC / UART Buffer Data
  |        |          |This byte is used for transmitting or receiving data on SC / UART bus.
  |        |          |A write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer.
  |        |          |Note: If SCEN(SCnCR0[0]) is not enabled, SCnDR cannot be programmed.
 */

/**
  @addtogroup SC_SC0EGT SC0EGT
  @ref SC0EGT Special Function Register
  Address: DAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnEGT[7:0]|SC Extra Guard Time
  |        |          |This field indicates the extra guard timer value.
  |        |          |Note:
  |        |          |The counter is ETU base .
 */

/**
  @addtogroup SC_SC1EGT SC1EGT
  @ref SC1EGT Special Function Register
  Address: DAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SCnEGT[7:0]|SC Extra Guard Time
  |        |          |This field indicates the extra guard timer value.
  |        |          |Note:
  |        |          |The counter is ETU base .
 */

/**
  @addtogroup SC_SC0ETURD0 SC0ETURD0
  @ref SC0ETURD0 Special Function Register
  Address: DBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ETURDIV[7:0]|LSB Bits of ETU Rate Divider
  |        |          |The field indicates the LSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR2.
 */

/**
  @addtogroup SC_SC1ETURD0 SC1ETURD0
  @ref SC1ETURD0 Special Function Register
  Address: DBH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ETURDIV[7:0]|LSB Bits of ETU Rate Divider
  |        |          |The field indicates the LSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR2.
 */

/**
  @addtogroup SC_SC0ETURD1 SC0ETURD1
  @ref SC0ETURD1 Special Function Register
  Address: DCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ETURDIV[11:8]|MSB Bits of ETU Rate Divider
  |        |          |The field indicates the MSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR1 .
  |[6:4]   |SCDIV[2:0]|SC Clock Divider
  |        |          |000 = FSC is FSYS/1.
  |        |          |001 = FSC is FSYS/2.
  |        |          |010 = FSC is FSYS/4.
  |        |          |011 = FSC is FSYS/8. (By default.)
  |        |          |100 = FSC is FSYS/16.
  |        |          |101 = FSC is FSYS/16.
  |        |          |110 = FSC is FSYS/16.
  |        |          |111 = FSC is FSYS/16.
  |        |          |Note: that the FSC clock should be 1Mhz ~ 5Mhz for ISO/IEC 7816-3
  |        |          |standard
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SC_SC1ETURD1 SC1ETURD1
  @ref SC1ETURD1 Special Function Register
  Address: DCH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ETURDIV[11:8]|MSB Bits of ETU Rate Divider
  |        |          |The field indicates the MSB of clock rate divider.
  |        |          |The real ETU is ETURDIV[11:0] + 1.
  |        |          |Note 1:
  |        |          |ETURDIV[11:0] must be greater than 0x004.
  |        |          |Note 2:
  |        |          |SCnETURD0 has to program first, then SCnETUDR1 .
  |[6:4]   |SCDIV[2:0]|SC Clock Divider
  |        |          |000 = FSC is FSYS/1.
  |        |          |001 = FSC is FSYS/2.
  |        |          |010 = FSC is FSYS/4.
  |        |          |011 = FSC is FSYS/8. (By default.)
  |        |          |100 = FSC is FSYS/16.
  |        |          |101 = FSC is FSYS/16.
  |        |          |110 = FSC is FSYS/16.
  |        |          |111 = FSC is FSYS/16.
  |        |          |Note: that the FSC clock should be 1Mhz ~ 5Mhz for ISO/IEC 7816-3
  |        |          |standard
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup SC_SC0IE SC0IE
  @ref SC0IE Special Function Register
  Address: DDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SC_SC1IE SC1IE
  @ref SC1IE Special Function Register
  Address: DDH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIEN    |Receive Data Reach Interrupt Enable Bit
  |        |          |This field is used to enable received data interrupt.
  |        |          |0 = Receive data interrupt Disabled.
  |        |          |1 = Receive data interrupt Enabled.
  |[1]     |TBEIEN    |Transmit Buffer Empty Interrupt Enable Bit
  |        |          |This field is used to enable transmit buffer empty interrupt.
  |        |          |0 = Transmit buffer empty interrupt Disabled.
  |        |          |1 = Transmit buffer empty interrupt Enabled.
  |[2]     |TERRIEN   |Transfer Error Interrupt Enable Bit
  |        |          |This field is used to enable transfer error interrupt. The transfer
  |        |          |error states is at SC0TSR register which includes receiver break error
  |        |          |BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]), receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |0 = Transfer error interrupt Disabled.
  |        |          |1 = Transfer error interrupt Enabled.
  |[3]     |BGTIEN    |Block Guard Time Interrupt Enable Bit
  |        |          |This field is used to enable block guard time interrupt.
  |        |          |0 = Block guard time interrupt Disabled.
  |        |          |1 = Block guard time interrupt Enabled.
  |[4]     |ACERRIEN  |Auto Convention Error Interrupt Enable Bit
  |        |          |This field is used to enable auto-convention error interrupt.
  |        |          |0 = Auto-convention error interrupt Disabled.
  |        |          |1 = Auto-convention error interrupt Enabled.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup SC_SC0IS SC0IS
  @ref SC0IS Special Function Register
  Address: DEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIF     |Receive Data Reach Interrupt Status Flag (Read Only)
  |        |          |This field is used for received data interrupt status flag.
  |        |          |Note: This field is the status flag of received data. If software
  |        |          |reads data from SC_DAT pin, this bit will be cleared automatically.
  |[1]     |TBEIF     |Transmit Buffer Empty Interrupt Status Flag (Read Only)
  |        |          |This field is used for transmit buffer empty interrupt status flag.
  |        |          |Note: This field is the status flag of transmit buffer empty state. If
  |        |          |software wants to clear this bit, software must write data to
  |        |          |DAT(SCnDR[7:0]) buffer and then this bit will be cleared
  |        |          |automatically.
  |[2]     |TERRIF    |Transfer Error Interrupt Status Flag (Read Only)
  |        |          |This field is used for transfer error interrupt status flag. The
  |        |          |transfer error states is at SC0TSR register which includes receiver
  |        |          |break error BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]) and receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |Note: This field is the status flag of BEF(SC0TSR[6]), FEF(SC0TSR[5]),
  |        |          |PEF(SC0TSR[4]), RXOV(SC0TSR[0]) and TXOV(SC0TSR[2]). So, if software
  |        |          |wants to clear this bit, software must write 0 to each field.
  |[3]     |BGTIF     |Block Guard Time Interrupt Status Flag (Read Only)
  |        |          |This field is used for block guard time interrupt status flag.
  |        |          |Note 1: This bit is valid when RXBGTEN (SCnCR0[5]) is enabled.
  |        |          |Note 2: This bit is read only, but it can be cleared by writing 0 to
  |        |          |it.
  |[4]     |ACERRIF   |Auto Convention Error Interrupt Status Flag (Read Only)
  |        |          |This field indicates auto convention sequence error. If the received
  |        |          |TS at ATR state is neither 0x3B nor 0x3F, this bit will be set.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |Tx_Er     |TX transmit error flag
  |[6]     |SIF1      |software interrupt for test
  |[7]     |loop_test |loop test interrupt flag for software test
 */

/**
  @addtogroup SC_SC1IS SC1IS
  @ref SC1IS Special Function Register
  Address: DEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RDAIF     |Receive Data Reach Interrupt Status Flag (Read Only)
  |        |          |This field is used for received data interrupt status flag.
  |        |          |Note: This field is the status flag of received data. If software
  |        |          |reads data from SC_DAT pin, this bit will be cleared automatically.
  |[1]     |TBEIF     |Transmit Buffer Empty Interrupt Status Flag (Read Only)
  |        |          |This field is used for transmit buffer empty interrupt status flag.
  |        |          |Note: This field is the status flag of transmit buffer empty state. If
  |        |          |software wants to clear this bit, software must write data to
  |        |          |DAT(SCnDR[7:0]) buffer and then this bit will be cleared
  |        |          |automatically.
  |[2]     |TERRIF    |Transfer Error Interrupt Status Flag (Read Only)
  |        |          |This field is used for transfer error interrupt status flag. The
  |        |          |transfer error states is at SC0TSR register which includes receiver
  |        |          |break error BEF(SC0TSR[6]), frame error FEF(SC0TSR[5]), parity error
  |        |          |PEF(SC0TSR[4]) and receiver buffer overflow error RXOV(SC0TSR[0]) and
  |        |          |transmit buffer overflow error TXOV(SC0TSR[2]).
  |        |          |Note: This field is the status flag of BEF(SC0TSR[6]), FEF(SC0TSR[5]),
  |        |          |PEF(SC0TSR[4]), RXOV(SC0TSR[0]) and TXOV(SC0TSR[2]). So, if software
  |        |          |wants to clear this bit, software must write 0 to each field.
  |[3]     |BGTIF     |Block Guard Time Interrupt Status Flag (Read Only)
  |        |          |This field is used for block guard time interrupt status flag.
  |        |          |Note 1: This bit is valid when RXBGTEN (SCnCR0[5]) is enabled.
  |        |          |Note 2: This bit is read only, but it can be cleared by writing 0 to
  |        |          |it.
  |[4]     |ACERRIF   |Auto Convention Error Interrupt Status Flag (Read Only)
  |        |          |This field indicates auto convention sequence error. If the received
  |        |          |TS at ATR state is neither 0x3B nor 0x3F, this bit will be set.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |Tx_Er     |TX transmit error flag
  |[6]     |SIF1      |software interrupt for test
  |[7]     |loop_test |loop test interrupt flag for software test
 */

/**
  @addtogroup SC_SC0TSR SC0TSR
  @ref SC0TSR Special Function Register
  Address: DFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RXOV      |RX Overflow Error Status Flag (Read Only)
  |        |          |This bit is set when RX buffer overflow.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[1]     |RXEMPTY   |Receiver Buffer Empty Status Flag(Read Only)
  |        |          |This bit indicates RX buffer empty or not.
  |        |          |Note: When Rx buffer has been read by CPU, hardware sets this bit
  |        |          |high. It will be cleared when SC receives any new data.
  |[2]     |TXOV      |TX Overflow Error Interrupt Status Flag (Read Only)
  |        |          |If TX buffer is full, an additional write to DAT(SCnDR[7:0]) will
  |        |          |cause this bit be set to 1 by hardware.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[3]     |TXEMPTY   |Transmit Buffer Empty Status Flag (Read Only)
  |        |          |This bit indicates TX buffer empty or not.
  |        |          |Note: When TX buffer has been transferred to Transmitter Shift
  |        |          |Register, hardware sets this bit high. It will be cleared when writing
  |        |          |data into DAT(SCnDR[7:0]) (TX buffer not empty).
  |[4]     |PEF       |Receiver Parity Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid
  |        |          |parity bit.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |FEF       |Receiver Frame Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid stop bit (that is, the stop bit following the last data
  |        |          |bit or parity bit is detected as logic 0).
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[6]     |BEF       |Receiver Break Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received data input (RX) held
  |        |          |in the spacing state (logic 0) is longer than a full word transmission
  |        |          |time (that is, the total time of start bit + data bits + parity + stop
  |        |          |bits). .
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[7]     |ACT       |Transmit /Receive in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when TX/RX transfer is finished
  |        |          |1 = This bit is set by hardware when TX/RX transfer is in active.
 */

/**
  @addtogroup SC_SC1TSR SC1TSR
  @ref SC1TSR Special Function Register
  Address: DFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RXOV      |RX Overflow Error Status Flag (Read Only)
  |        |          |This bit is set when RX buffer overflow.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[1]     |RXEMPTY   |Receiver Buffer Empty Status Flag(Read Only)
  |        |          |This bit indicates RX buffer empty or not.
  |        |          |Note: When Rx buffer has been read by CPU, hardware sets this bit
  |        |          |high. It will be cleared when SC receives any new data.
  |[2]     |TXOV      |TX Overflow Error Interrupt Status Flag (Read Only)
  |        |          |If TX buffer is full, an additional write to DAT(SCnDR[7:0]) will
  |        |          |cause this bit be set to 1 by hardware.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[3]     |TXEMPTY   |Transmit Buffer Empty Status Flag (Read Only)
  |        |          |This bit indicates TX buffer empty or not.
  |        |          |Note: When TX buffer has been transferred to Transmitter Shift
  |        |          |Register, hardware sets this bit high. It will be cleared when writing
  |        |          |data into DAT(SCnDR[7:0]) (TX buffer not empty).
  |[4]     |PEF       |Receiver Parity Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid
  |        |          |parity bit.
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[5]     |FEF       |Receiver Frame Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received character does not
  |        |          |have a valid stop bit (that is, the stop bit following the last data
  |        |          |bit or parity bit is detected as logic 0).
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[6]     |BEF       |Receiver Break Error Status Flag (Read Only)
  |        |          |This bit is set to logic 1 whenever the received data input (RX) held
  |        |          |in the spacing state (logic 0) is longer than a full word transmission
  |        |          |time (that is, the total time of start bit + data bits + parity + stop
  |        |          |bits). .
  |        |          |Note: This bit is read only, but it can be cleared by writing 0 to it.
  |[7]     |ACT       |Transmit /Receive in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when TX/RX transfer is finished
  |        |          |1 = This bit is set by hardware when TX/RX transfer is in active.
 */

/**@}*/ /* end of SC group */

/**
  @addtogroup SPI SPI Control Register
  @{ */

/**
  @addtogroup SPI_SPI0CR0 SPI0CR0
  @ref SPI0CR0 Special Function Register
  Address: F3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPR[1:0]  |SPI Clock Rate Select
  |        |          |These four bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. See Table
  |        |          |6.112 SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[2]     |CPHA      |SPI Clock Phase Select
  |        |          |CPHA bit determines the data sampling edge of the SPI clock. See
  |        |          |Figure 6.114 SPI Clock Formats
  |        |          |0 = The data is sampled on the first edge of the SPI clock.
  |        |          |1 = The data is sampled on the second edge of the SPI clock.
  |[3]     |CPOL      |SPI Clock Polarity Select
  |        |          |CPOL bit determines the idle state level of the SPI clock. See Figure
  |        |          |6.114 SPI Clock Formats
  |        |          |0 = The SPI clock is low in idle state.
  |        |          |1 = The SPI clock is high in idle state.
  |[4]     |MSTR      |Master Mode Enable
  |        |          |This bit switches the SPI operating between Master and Slave modes.
  |        |          |0 = The SPI is configured as Slave mode.
  |        |          |1 = The SPI is configured as Master mode.
  |[5]     |LSBFE     |LSB First Enable
  |        |          |0 = The SPI data is transferred MSB first.
  |        |          |1 = The SPI data is transferred LSB first.
  |[6]     |SPIEN     |SPI Enable
  |        |          |0 = SPI function Disabled.
  |        |          |1 = SPI function Enabled.
  |[7]     |SSOE      |Slave Select Output Enable
  |        |          |This bit is used in combination with the DISMODF (SPInSR.3) bit to
  |        |          |determine the feature of pin as shown inTable 6.114 Slave Select Pin
  |        |          |Configurations. This bit takes effect only under MSTR = 1 and DISMODF
  |        |          |= 1 condition.
  |        |          |0 = functions as a general purpose I/O pin.
  |        |          |1 = automatically goes low for each transmission when selecting
  |        |          |external Slave device and goes high during each idle state to de-
  |        |          |select the Slave device.
 */

/**
  @addtogroup SPI_SPI1CR0 SPI1CR0
  @ref SPI1CR0 Special Function Register
  Address: F9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPR[1:0]  |SPI Clock Rate Select
  |        |          |These four bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. See Table
  |        |          |6.112 SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[2]     |CPHA      |SPI Clock Phase Select
  |        |          |CPHA bit determines the data sampling edge of the SPI clock. See
  |        |          |Figure 6.114 SPI Clock Formats
  |        |          |0 = The data is sampled on the first edge of the SPI clock.
  |        |          |1 = The data is sampled on the second edge of the SPI clock.
  |[3]     |CPOL      |SPI Clock Polarity Select
  |        |          |CPOL bit determines the idle state level of the SPI clock. See Figure
  |        |          |6.114 SPI Clock Formats
  |        |          |0 = The SPI clock is low in idle state.
  |        |          |1 = The SPI clock is high in idle state.
  |[4]     |MSTR      |Master Mode Enable
  |        |          |This bit switches the SPI operating between Master and Slave modes.
  |        |          |0 = The SPI is configured as Slave mode.
  |        |          |1 = The SPI is configured as Master mode.
  |[5]     |LSBFE     |LSB First Enable
  |        |          |0 = The SPI data is transferred MSB first.
  |        |          |1 = The SPI data is transferred LSB first.
  |[6]     |SPIEN     |SPI Enable
  |        |          |0 = SPI function Disabled.
  |        |          |1 = SPI function Enabled.
  |[7]     |SSOE      |Slave Select Output Enable
  |        |          |This bit is used in combination with the DISMODF (SPInSR.3) bit to
  |        |          |determine the feature of pin as shown inTable 6.114 Slave Select Pin
  |        |          |Configurations. This bit takes effect only under MSTR = 1 and DISMODF
  |        |          |= 1 condition.
  |        |          |0 = functions as a general purpose I/O pin.
  |        |          |1 = automatically goes low for each transmission when selecting
  |        |          |external Slave device and goes high during each idle state to de-
  |        |          |select the Slave device.
 */

/**
  @addtogroup SPI_SPI0CR1 SPI0CR1
  @ref SPI0CR1 Special Function Register
  Address: F3H, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPIS[1:0] |SPI Interval Time Selection Between Adjacent Bytes
  |        |          |SPIS[1:0] and CPHA select eight grades of SPI interval time selection
  |        |          |between adjacent bytes. As see Table 6.113 SPI Clock Suspend Interval
  |        |          |Select
  |        |          |SPIS[1:0] are valid only under Master mode (MSTR = 1).
  |[2]     |RXDMAEN   |SPI RX DMA Enable
  |        |          |This bit enables the SPI RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SPI RX operation.
  |        |          |0 = SPI RX DMA Disabled
  |        |          |1 = SPI RX DMA Enabled
  |[3]     |TXDMAEN   |SPI TX DMA Enable
  |        |          |This bit enables the SPI TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SPI TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |SPR[3:2]  |SPI Clock Rate Select
  |        |          |These two bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. Table 6.112
  |        |          |SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[6]     |SPSYNC    |SPI1 Master Clock Sync with SPI0 Master Clock. This bit is only valid in SPI0CR0
  |[7]     |Loop test(TA protect)|internal MISO connect to MOSI
 */

/**
  @addtogroup SPI_SPI1CR1 SPI1CR1
  @ref SPI1CR1 Special Function Register
  Address: FAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |SPIS[1:0] |SPI Interval Time Selection Between Adjacent Bytes
  |        |          |SPIS[1:0] and CPHA select eight grades of SPI interval time selection
  |        |          |between adjacent bytes. As see Table 6.113 SPI Clock Suspend Interval
  |        |          |Select
  |        |          |SPIS[1:0] are valid only under Master mode (MSTR = 1).
  |[2]     |RXDMAEN   |SPI RX DMA Enable
  |        |          |This bit enables the SPI RX operating by through PDMA transfer, RX
  |        |          |data are saved in XRAM after SPI RX operation.
  |        |          |0 = SPI RX DMA Disabled
  |        |          |1 = SPI RX DMA Enabled
  |[3]     |TXDMAEN   |SPI TX DMA Enable
  |        |          |This bit enables the SPI TX operating by through PDMA transfer, TX
  |        |          |data needs to be ready in XRAM before SPI TX starting.
  |        |          |0 = SPI TX DMA Disabled
  |        |          |1 = SPI TX DMA Enabled
  |[5:4]   |SPR[3:2]  |SPI Clock Rate Select
  |        |          |These two bits select four grades of SPI clock divider. The clock
  |        |          |rates below are illustrated under FSYS = 24 MHz condition. Table 6.112
  |        |          |SPI Master Clock Rate Define Table
  |        |          |SPR[3:0] are valid only under Master mode (MSTR = 1). If under Slave
  |        |          |mode, the clock will automatically synchronize with the external clock
  |        |          |on SPICLK pin from Master device up to FSYS/4 communication speed.
  |[6]     |SPSYNC    |SPI1 Master Clock Sync with SPI0 Master Clock. This bit is only valid in SPI0CR0
  |[7]     |Loop test(TA protect)|internal MISO connect to MOSI
 */

/**
  @addtogroup SPI_SPI0SR SPI0SR
  @ref SPI0SR Special Function Register
  Address: F4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |TXBFF     |SPI TX Buffer Full Flag
  |        |          |0 = SPI TX buffer is empty
  |        |          |1 = SPI TX buffer is full
  |[2]     |DISSPIF   |Disable SPI Complete Interrupt
  |        |          |This bit is used to disable SPI complete interrupt while an SPI data
  |        |          |transfer is complete or an receiving data has been moved into the SPI
  |        |          |read buffer. Especially in SPI PDMA operation.
  |        |          |0 = SPI Complete Interrupt Enabled while ESPI and EA are enabled,
  |        |          |1 = SPI Complete Interrupt Disabled
  |[3]     |DISMODF   |Disable Mode Fault Error Detection
  |        |          |This bit is used in combination with the SSOE (SPInCR.7) bit to
  |        |          |determine the feature of pin as shown in Table 6.114 Slave Select Pin
  |        |          |Configurations. DISMODF is valid only in Master mode (MSTR = 1).
  |        |          |0 = Mode Fault detection Enabled. serves as input pin for Mode Fault
  |        |          |detection disregard of SSOE.
  |        |          |1 = Mode Fault detection Disabled. The feature of follows SSOE bit.
  |[4]     |MODF      |Mode Fault Error Flag
  |        |          |This bit indicates a Mode Fault error event. If pin is configured as
  |        |          |Mode Fault input (MSTR = 1 and DISMODF = 0) and is pulled low by
  |        |          |external devices, a Mode Fault error occurs. Instantly MODF will be
  |        |          |set as logic 1. If ESPI and EA are enabled, an SPI interrupt will be
  |        |          |required. This bit should be cleared via software.
  |[5]     |SPIOVF    |SPI Overrun Error Flag
  |        |          |This bit indicates an overrun event. Once an overrun event occurs,
  |        |          |this bit will be set. If ESPI and EA are enabled, an SPI interrupt
  |        |          |will be required. This bit should be cleared via software.
  |[6]     |WCOL      |Write Collision Error Flag
  |        |          |This bit indicates a write collision event. Once a write collision
  |        |          |event occurs, this bit will be set. It should be cleared via software.
  |[7]     |SPIF      |SPI Complete Flag
  |        |          |This bit is set to logic 1 via hardware while an SPI data transfer is
  |        |          |complete or an receiving data has been moved into the SPI read buffer.
  |        |          |If ESPI and EA are enabled, an SPI interrupt will be required. This
  |        |          |bit should be cleared via software. Attempting to write to SPInDR is
  |        |          |inhibited if SPIF is set.
 */

/**
  @addtogroup SPI_SPI1SR SPI1SR
  @ref SPI1SR Special Function Register
  Address: FBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |TXBFF     |SPI TX Buffer Full Flag
  |        |          |0 = SPI TX buffer is empty
  |        |          |1 = SPI TX buffer is full
  |[2]     |DISSPIF   |Disable SPI Complete Interrupt
  |        |          |This bit is used to disable SPI complete interrupt while an SPI data
  |        |          |transfer is complete or an receiving data has been moved into the SPI
  |        |          |read buffer. Especially in SPI PDMA operation.
  |        |          |0 = SPI Complete Interrupt Enabled while ESPI and EA are enabled,
  |        |          |1 = SPI Complete Interrupt Disabled
  |[3]     |DISMODF   |Disable Mode Fault Error Detection
  |        |          |This bit is used in combination with the SSOE (SPInCR.7) bit to
  |        |          |determine the feature of pin as shown in Table 6.114 Slave Select Pin
  |        |          |Configurations. DISMODF is valid only in Master mode (MSTR = 1).
  |        |          |0 = Mode Fault detection Enabled. serves as input pin for Mode Fault
  |        |          |detection disregard of SSOE.
  |        |          |1 = Mode Fault detection Disabled. The feature of follows SSOE bit.
  |[4]     |MODF      |Mode Fault Error Flag
  |        |          |This bit indicates a Mode Fault error event. If pin is configured as
  |        |          |Mode Fault input (MSTR = 1 and DISMODF = 0) and is pulled low by
  |        |          |external devices, a Mode Fault error occurs. Instantly MODF will be
  |        |          |set as logic 1. If ESPI and EA are enabled, an SPI interrupt will be
  |        |          |required. This bit should be cleared via software.
  |[5]     |SPIOVF    |SPI Overrun Error Flag
  |        |          |This bit indicates an overrun event. Once an overrun event occurs,
  |        |          |this bit will be set. If ESPI and EA are enabled, an SPI interrupt
  |        |          |will be required. This bit should be cleared via software.
  |[6]     |WCOL      |Write Collision Error Flag
  |        |          |This bit indicates a write collision event. Once a write collision
  |        |          |event occurs, this bit will be set. It should be cleared via software.
  |[7]     |SPIF      |SPI Complete Flag
  |        |          |This bit is set to logic 1 via hardware while an SPI data transfer is
  |        |          |complete or an receiving data has been moved into the SPI read buffer.
  |        |          |If ESPI and EA are enabled, an SPI interrupt will be required. This
  |        |          |bit should be cleared via software. Attempting to write to SPInDR is
  |        |          |inhibited if SPIF is set.
 */

/**
  @addtogroup SPI_SPI0DR SPI0DR
  @ref SPI0DR Special Function Register
  Address: F5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SPInDR[7:0]|Serial Peripheral Data
  |        |          |This byte is used for transmitting or receiving data on SPI bus. A
  |        |          |write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer. In Master mode, a
  |        |          |write to this register initiates transmission and reception of a byte
  |        |          |simultaneously.
 */

/**
  @addtogroup SPI_SPI1DR SPI1DR
  @ref SPI1DR Special Function Register
  Address: FCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SPInDR[7:0]|Serial Peripheral Data
  |        |          |This byte is used for transmitting or receiving data on SPI bus. A
  |        |          |write of this byte is a write to the shift register. A read of this
  |        |          |byte is actually a read of the read data buffer. In Master mode, a
  |        |          |write to this register initiates transmission and reception of a byte
  |        |          |simultaneously.
 */

/**@}*/ /* end of SPI group */

/**
  @addtogroup I2C I2C Control Register
  @{ */

/**
  @addtogroup I2C_I2C0CON I2C0CON
  @ref I2C0CON Special Function Register
  Address: C0H, All SFR Pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup I2C_I2C1CON I2C1CON
  @ref I2C1CON Special Function Register
  Address: E8H, All pages
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[2]     |AA        |Acknowledge Assert Flag
  |        |          |If the AA flag is set, an ACK (low level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave.
  |        |          |If the AA flag is cleared, a NACK (high level on SDA) will be returned
  |        |          |during the acknowledge clock pulse of the SCL line while the I2C
  |        |          |device is a receiver or an own-address-matching slave. A device with
  |        |          |its own AA flag cleared will ignore its own salve address and the
  |        |          |General Call. Consequently, SI will note be asserted and no interrupt
  |        |          |is requested.
  |        |          |Note that if an addressed slave does not return an ACK under slave
  |        |          |receiver mode or not receive an ACK under slave transmitter mode, the
  |        |          |slave device will become a not addressed slave. It cannot receive any
  |        |          |data until its AA flag is set and a master addresses it again.
  |        |          |There is a special case of I2CnSTAT value C8H occurs under slave
  |        |          |transmitter mode. Before the slave device transmit the last data byte
  |        |          |to the master, AA flag can be cleared as 0. Then after the last data
  |        |          |byte transmitted, the slave device will actively switch to not
  |        |          |addressed slave mode of disconnecting with the master. The further
  |        |          |reading by the master will be all FFH.
  |[3]     |SI        |I2Cn Interrupt Flag
  |        |          |SI flag is set by hardware when one of 26 possible I2C status (besides
  |        |          |F8H status) is entered. After SI is set, the software should read
  |        |          |I2CnSTAT register to determine which step has been passed and take
  |        |          |actions for next step.
  |        |          |SI is cleared by software. Before the SI is cleared, the low period of
  |        |          |SCL line is stretched. The transaction is suspended. It is useful for
  |        |          |the slave device to deal with previous data bytes until ready for
  |        |          |receiving the next byte.
  |        |          |The serial transaction is suspended until SI is cleared by software.
  |        |          |After SI is cleared, I2C bus will continue to generate START or
  |        |          |repeated START condition, STOP condition, 8-bit data, or so on
  |        |          |depending on the software configuration of controlling byte or bits.
  |        |          |Therefore, user should take care of it by preparing suitable setting
  |        |          |of registers before SI is software cleared.
  |[4]     |STO       |STOP Flag
  |        |          |When STO is set if the I2C is in the master mode, a STOP condition is
  |        |          |transmitted to the bus. STO is automatically cleared by hardware once
  |        |          |the STOP condition has been detected on the bus.
  |        |          |The STO flag setting is also used to recover the I2C device from the
  |        |          |bus error state (I2CnSTAT as 00H). In this case, no STOP condition is
  |        |          |transmitted to the I2C bus.
  |        |          |If the STA and STO bits are both set and the device is original in the
  |        |          |master mode, the I2C bus will generate a STOP condition and
  |        |          |immediately follow a START condition. If the device is in slave mode,
  |        |          |STA and STO simultaneous setting should be avoid from issuing illegal
  |        |          |I2C frames.
  |[5]     |STA       |START Flag
  |        |          |When STA is set, the I2C generates a START condition if the bus is
  |        |          |free. If the bus is busy, the I2C waits for a STOP condition and
  |        |          |generates a START condition following.
  |        |          |If STA is set while the I2C is already in the master mode and one or
  |        |          |more bytes have been transmitted or received, the I2C generates a
  |        |          |repeated START condition.
  |        |          |Note that STA can be set anytime even in a slave mode, but STA is not
  |        |          |hardware automatically cleared after START or repeated START condition
  |        |          |has been detected. User should take care of it by clearing STA
  |        |          |manually.
  |[6]     |I2CEN     |I2Cn Bus Enable
  |        |          |0 = I2C bus Disabled.
  |        |          |1 = I2C bus Enabled.
  |        |          |Before enabling the I2C, SCL and SDA port latches should be set to
  |        |          |logic 1.
  |[7]     |I         |I2Cn Hold Time Extend Enable
  |        |          |0 = I2C DATA to SCL hold time extend disabled
  |        |          |1 = I2C DATA to SCL hold time extend enabled, extend 8 system clock
 */

/**
  @addtogroup I2C_I2C0STAT I2C0STAT
  @ref I2C0STAT Special Function Register
  Address: BDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |0         |Reserved
  |        |          |The least significant three bits of I2CnSTAT are always read as 0.
  |[7:3]   |I2CnSTAT[7:3]|I2Cn Status Code
  |        |          |The MSB five bits of I2CnSTAT contains the status code. There are 27
  |        |          |possible status codes. When I2CnSTAT is F8H, no relevant state
  |        |          |information is available and SI flag keeps 0. All other 26 status
  |        |          |codes correspond to the I2C states. When each of these status is
  |        |          |entered, SI will be set as logic 1 and a interrupt is requested.
 */

/**
  @addtogroup I2C_I2C1STAT I2C1STAT
  @ref I2C1STAT Special Function Register
  Address: B4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |0         |Reserved
  |        |          |The least significant three bits of I2CnSTAT are always read as 0.
  |[7:3]   |I2CnSTAT[7:3]|I2Cn Status Code
  |        |          |The MSB five bits of I2CnSTAT contains the status code. There are 27
  |        |          |possible status codes. When I2CnSTAT is F8H, no relevant state
  |        |          |information is available and SI flag keeps 0. All other 26 status
  |        |          |codes correspond to the I2C states. When each of these status is
  |        |          |entered, SI will be set as logic 1 and a interrupt is requested.
 */

/**
  @addtogroup I2C_I2C0DAT I2C0DAT
  @ref I2C0DAT Special Function Register
  Address: BCH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnDAT[7:0]|I2Cn Data
  |        |          |I2CnDAT contains a byte of the I2C data to be transmitted or a byte,
  |        |          |which has just received. Data in I2CnDAT remains as long as SI is
  |        |          |logic 1. The result of reading or writing I2CnDAT during I2C
  |        |          |transceiver progress is unpredicted.
  |        |          |While data in I2CnDAT is shifted out, data on the bus is
  |        |          |simultaneously being shifted in to update I2CnDAT. I2CnDAT always
  |        |          |shows the last byte that presented on the I2C bus. Thus the event of
  |        |          |lost arbitration, the original value of I2CnDAT changes after the
  |        |          |transaction.
 */

/**
  @addtogroup I2C_I2C1DAT I2C1DAT
  @ref I2C1DAT Special Function Register
  Address: B3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnDAT[7:0]|I2Cn Data
  |        |          |I2CnDAT contains a byte of the I2C data to be transmitted or a byte,
  |        |          |which has just received. Data in I2CnDAT remains as long as SI is
  |        |          |logic 1. The result of reading or writing I2CnDAT during I2C
  |        |          |transceiver progress is unpredicted.
  |        |          |While data in I2CnDAT is shifted out, data on the bus is
  |        |          |simultaneously being shifted in to update I2CnDAT. I2CnDAT always
  |        |          |shows the last byte that presented on the I2C bus. Thus the event of
  |        |          |lost arbitration, the original value of I2CnDAT changes after the
  |        |          |transaction.
 */

/**
  @addtogroup I2C_I2C0ADDR0 I2C0ADDR0
  @ref I2C0ADDR0 Special Function Register
  Address: C1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C0ADDR1 I2C0ADDR1
  @ref I2C0ADDR1 Special Function Register
  Address: A1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C0ADDR2 I2C0ADDR2
  @ref I2C0ADDR2 Special Function Register
  Address: A2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C0ADDR3 I2C0ADDR3
  @ref I2C0ADDR3 Special Function Register
  Address: A3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C1ADDR0 I2C1ADDR0
  @ref I2C1ADDR0 Special Function Register
  Address: B2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C1ADDR1 I2C1ADDR1
  @ref I2C1ADDR1 Special Function Register
  Address: A4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C1ADDR2 I2C1ADDR2
  @ref I2C1ADDR2 Special Function Register
  Address: A5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C1ADDR3 I2C1ADDR3
  @ref I2C1ADDR3 Special Function Register
  Address: A6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |GC        |General Call Bit
  |        |          |In master mode:
  |        |          |This bit has no effect.
  |        |          |In slave mode:
  |        |          |0 = The General Call is always ignored.
  |        |          |1 = The General Call is recognized if AA flag is 1; otherwise, it is
  |        |          |ignored if AA is 0.
  |[7:1]   |I2CnADDRx[7:1]|I2Cn Device¡¦s Own Slave Address
  |        |          |In master mode:
  |        |          |These bits have no effect.
  |        |          |In slave mode:
  |        |          |These 7 bits define the slave address of this I2C device by user. The
  |        |          |master should address I2C device by sending the same address in the
  |        |          |first byte data after a START or a repeated START condition. If the AA
  |        |          |flag is set, this I2C device will acknowledge the master after
  |        |          |receiving its own address and become an addressed slave. Otherwise,
  |        |          |the addressing from the master will be ignored.
  |        |          |Note that I2CnADDRx[7:1] should not remain its default value of all 0,
  |        |          |because address 0x00 is reserved for General Call.
 */

/**
  @addtogroup I2C_I2C0CLK I2C0CLK
  @ref I2C0CLK Special Function Register
  Address: BEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnCLK[7:0]|I2Cn Clock Setting
  |        |          |In master mode:
  |        |          |This register determines the clock rate of I2C bus when the device is
  |        |          |in a master mode. The clock rate follows the equation,
  |        |          |.
  |        |          |Note that the I2CnCLK value of 00H and 01H are not valid. This is an
  |        |          |implement limitation.
  |        |          |In slave mode:
  |        |          |This byte has no effect. In slave mode, the I2C device will
  |        |          |automatically synchronize with any given clock rate up to 400k bps.
 */

/**
  @addtogroup I2C_I2C1CLK I2C1CLK
  @ref I2C1CLK Special Function Register
  Address: B5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |I2CnCLK[7:0]|I2Cn Clock Setting
  |        |          |In master mode:
  |        |          |This register determines the clock rate of I2C bus when the device is
  |        |          |in a master mode. The clock rate follows the equation,
  |        |          |.
  |        |          |Note that the I2CnCLK value of 00H and 01H are not valid. This is an
  |        |          |implement limitation.
  |        |          |In slave mode:
  |        |          |This byte has no effect. In slave mode, the I2C device will
  |        |          |automatically synchronize with any given clock rate up to 400k bps.
 */

/**
  @addtogroup I2C_I2C0TOC I2C0TOC
  @ref I2C0TOC Special Function Register
  Address: BFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |DIV       |I2C0 Time-Out Counter Clock Divider
  |        |          |0 = The clock of I2C time-out counter is FSYS/1.
  |        |          |1 = The clock of I2C time-out counter is FSYS/4.
  |[2]     |I2TOCEN   |I2C0 Time-Out Counter Enable
  |        |          |0 = I2C time-out counter Disabled.
  |        |          |1 = I2C time-out counter Enabled.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup I2C_I2C1TOC I2C1TOC
  @ref I2C1TOC Special Function Register
  Address: B6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |DIV       |I2C0 Time-Out Counter Clock Divider
  |        |          |0 = The clock of I2C time-out counter is FSYS/1.
  |        |          |1 = The clock of I2C time-out counter is FSYS/4.
  |[2]     |I2TOCEN   |I2C0 Time-Out Counter Enable
  |        |          |0 = I2C time-out counter Disabled.
  |        |          |1 = I2C time-out counter Enabled.
  |[7:3]   |Reserved  |Reserved
 */

/**@}*/ /* end of I2C group */

/**
  @addtogroup ADC ADC Control Register
  @{ */

/**
  @addtogroup ADC_ADCCON0 ADCCON0
  @ref ADCCON0 Special Function Register
  Address: A1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCHS[3:0]|A/D Converting Channel Select
  |        |          |This filed selects the activating analog input source of ADC. If ADCEN
  |        |          |is 0, all inputs are disconnected.
  |        |          |0000 = ADC_CH0
  |        |          |0001 = ADC_CH1.
  |        |          |0010 = ADC_CH2.
  |        |          |0011 = ADC_CH3.
  |        |          |0100 = ADC_CH4.
  |        |          |0101 = ADC_CH5.
  |        |          |0110 = ADC_CH6.
  |        |          |0111 = ADC_CH7.
  |        |          |1000 = VBG (Internal band-gap voltage 1.22V).
  |        |          |1001 = VTEMP. (Temperature Sensor).
  |        |          |1010 = ADC_CH10.
  |        |          |1011 = ADC_CH11.
  |        |          |1100 = ADC_CH12.
  |        |          |1101 = ADC_CH13.
  |        |          |1110 = ADC_CH14.
  |        |          |1111 = ADC_CH15.
  |[5:4]   |ETGSEL[1:0]|External Trigger Source Select
  |        |          |When ADCEX (ADCCON1.1) is set, these bits select which pin output
  |        |          |triggers ADC conversion.
  |        |          |00 = PWM0CH0.
  |        |          |01 = PWM0CH2.
  |        |          |10 = PWM0CH4.
  |        |          |11 = STADC pin.
  |[6]     |ADCS      |A/D Converting Software Start Trigger
  |        |          |Setting this bit 1 triggers an A/D conversion. This bit remains logic
  |        |          |1 during A/D converting time and is automatically cleared via hardware
  |        |          |right after conversion complete. The meaning of writing and reading
  |        |          |ADCS bit is different.
  |        |          |Writing:
  |        |          |0 = No effect.
  |        |          |1 = Start an A/D converting.
  |        |          |Reading:
  |        |          |0 = ADC is in idle state.
  |        |          |1 = ADC is busy in converting.
  |[7]     |ADCF      |ADC Flag
  |        |          |This flag is set when an A/D conversion is completed in single
  |        |          |sampling mode, final sampling complete in continue sampling mode or
  |        |          |comparing hit if result comparator is enabled. The ADC result can be
  |        |          |read. While this flag is 1, ADC cannot start a new converting. This
  |        |          |bit is cleared by software.
 */

/**
  @addtogroup ADC_ADCCON1 ADCCON1
  @ref ADCCON1 Special Function Register
  Address: E1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ADCEN     |ADC Enable
  |        |          |0 = ADC circuit off.
  |        |          |1 = ADC circuit on.
  |[1]     |ADCEX     |ADC External Conversion Trigger Select
  |        |          |This bit to select the methods of triggering an A/D conversion.
  |        |          |0 = A/D conversion is started only via setting ADCS bit.
  |        |          |1 = A/D conversion is started via setting ADCS bit or by external
  |        |          |trigger source depending on ETGSEL[1:0] and ETGTYP[1:0]. Note that
  |        |          |while ADCS is 1 (busy in converting), the ADC will ignore the
  |        |          |following external trigger until ADCS is hardware cleared.
  |[3:2]   |ETGTYP[1:0]|External Trigger Type Select
  |        |          |When ADCEX (ADCCON1.1) is set, these bits select which condition
  |        |          |triggers ADC conversion.
  |        |          |00 = Falling edge on PWM0/2/4 or STADC pin.
  |        |          |01 = Rising edge on PWM0/2/4 or STADC pin.
  |        |          |10 = Central point of a PWM period.
  |        |          |11 = End point of a PWM period.
  |        |          |Note that the central point interrupt or the period point interrupt is
  |        |          |only available for PWM center-aligned type.
  |[4]     |CONT      |ADC Continue Sampling Select
  |        |          |0 = ADC single sampling, ADC interrupt is set while an A/D conversion
  |        |          |is completed
  |        |          |1 = ADC continue sampling. ADC interrupt is set while total A/D
  |        |          |conversions are completed
  |[5]     |HIE       |ADC Half Done Interrupt Enable
  |        |          |0 = ADC interrupt is not set while half of A/D conversions are
  |        |          |complete in continue mode
  |        |          |1 = ADC interrupt is set while half of A/D conversions are complete in
  |        |          |continue mode
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup ADC_ADCCON2 ADCCON2
  @ref ADCCON2 Special Function Register
  Address: E2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ADCDLY.8  |ADC External Trigger Delay Counter Bit 8
  |        |          |See ADCDLY register.
  |[3:1]   |ADCAQT[2:0]|ADC Acquisition Time
  |        |          |This 3-bit field decides the acquisition time for ADC sampling,
  |        |          |following by equation below:
  |        |          |ADC acquisition time =.
  |        |          |The default and minimum acquisition time is 10 ADC clock cycles. Note
  |        |          |that this field should not be changed when ADC is in converting.
  |[4]     |ADCMPO    |ADC Comparator Output Value
  |        |          |This bit is the output value of ADC result comparator based on the
  |        |          |setting of ACMPOP. This bit updates after every A/D conversion
  |        |          |complete.
  |[5]     |ADCMPEN   |ADC Result Comparator Enable.
  |        |          |ADC result comparator to trig ADCF enable bit. Only when comparator
  |        |          |value match the condition of ADC compare value defined ADCF will be
  |        |          |set to 1. This condition base on ADCMPH, ADCMPL and ADCMPOP register
  |        |          |define.
  |        |          |The ADCF register changes to 1 only when ADC comparing result matches
  |        |          |the condition and then enters interrupt vector if ADC interrupt is
  |        |          |enabled.
  |        |          |0 = ADC result comparator trig ADCF Disabled.
  |        |          |1 = ADC result comparator trig ADCF Enabled.
  |        |          |Note: After this bit is enabled and ADC start is triggered, the ADC
  |        |          |keeps converting. The register ADCRH and ADCRL value will change based
  |        |          |on the result of ADC setting and can also be read out from the
  |        |          |register. This process only stops after ADCF is set to 1
  |[6]     |ADCMPOP   |ADC Comparator Output Polarity
  |        |          |0 = ADCMPO is 1 if ADCR[11:0] is greater than or equal to ADCMP[11:0].
  |        |          |1 = ADCMPO is 1 if ADCR[11:0] is less than ADCMP[11:0].
  |[7]     |ADFBEN    |ADC Compare Result Asserting Fault Brake Enable
  |        |          |0 = ADC asserting Fault Brake Disabled.
  |        |          |1 = ADC asserting Fault Brake Enabled. Fault Brake is asserted once
  |        |          |its compare result ADCMPO is 1. Meanwhile, PWM channels output Fault
  |        |          |Brake data. PWMRUN (PWMnCON0.7) will also be automatically cleared by
  |        |          |hardware. The PWM output resumes when PWMRUN is set again.
 */

/**
  @addtogroup ADC_ADCDLY ADCDLY
  @ref ADCDLY Special Function Register
  Address: E3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCDLY[7:0]|ADC External Trigger Delay Counter Low Byte
  |        |          |This 8-bit field combined with ADCCON2.0 forms a 9-bit counter. This
  |        |          |counter inserts a delay after detecting the external trigger. An A/D
  |        |          |converting starts after this period of delay.
  |        |          |External trigger delay time = .
  |        |          |Note that this field is valid only when ADCEX (ADCCON1.1) is set. User
  |        |          |should not modify ADCDLY during PWM run time if selecting PWM output
  |        |          |as the external ADC trigger source.
 */

/**
  @addtogroup ADC_AINDIDS0 AINDIDS0
  @ref AINDIDS0 Special Function Register
  Address: CEH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |AINnDIDS  |ADC Channel Digital Input Disable
  |        |          |0 = Enabled digital input at ADC channel n.
  |        |          |1 = Disabled digital input at ADC channel n . ADC channel n is read
  |        |          |always 0.
 */

/**
  @addtogroup ADC_AINDIDS1 AINDIDS1
  @ref AINDIDS1 Special Function Register
  Address: CEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |AINnDIDS  |ADC Channel Digital Input Disable
  |        |          |0 = Enabled digital input at ADC channel n.
  |        |          |1 = Disabled digital input at ADC channel n . ADC channel n is read
  |        |          |always 0.
 */

/**
  @addtogroup ADC_ADCRH ADCRH
  @ref ADCRH Special Function Register
  Address: C3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCR[11:4]|ADC Result High Byte
  |        |          |The most significant 8 bits of the ADC result stored in this register.
 */

/**
  @addtogroup ADC_ADCRL ADCRL
  @ref ADCRL Special Function Register
  Address: C2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCR[3:0] |ADC Result Low Byte
  |        |          |The least significant 4 bits of the ADC result stored in this
  |        |          |register.
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup ADC_ADCMPH ADCMPH
  @ref ADCMPH Special Function Register
  Address: CFH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCMP[11:4]|ADC Compare High Byte
  |        |          |The most significant 8 bits of the ADC compare value stores in this
  |        |          |register.
 */

/**
  @addtogroup ADC_ADCMPL ADCMPL
  @ref ADCMPL Special Function Register
  Address: CEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCMP[3:0]|ADC Compare Low Byte
  |        |          |The least significant 4 bits of the ADC compare value stores in this
  |        |          |register.
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup ADC_ADCBAH ADCBAH
  @ref ADCBAH Special Function Register
  Address: E4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |ADCBA[3:0]|ADC RAM Base Address (High Byte)
  |        |          |The most significant 4 bits of RAM base address to store ADC continue
  |        |          |sampling data.
  |        |          |RAM base address ADCBA[11:0] = {ADCBAH[3:0], ADCBAL[7:0]}
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup ADC_ADCBAL ADCBAL
  @ref ADCBAL Special Function Register
  Address: CBH, Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCBA[7:0]|ADC RAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of RAM base address to store ADC continue
  |        |          |sampling data.
  |        |          |RAM base address ADCBA[11:0] = { ADCBAH[3:0], ADCBAL[7:0]}
 */

/**
  @addtogroup ADC_ADCSN ADCSN
  @ref ADCSN Special Function Register
  Address: E5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCSN[7:0]|ADC Sampling Number
  |        |          |The total sampling numbers for ADC continue sampling select.
  |        |          |Total sampling number= ADCSN[7:0] + 1
 */

/**
  @addtogroup ADC_ADCCN ADCCN
  @ref ADCCN Special Function Register
  Address: E6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |ADCCN[7:0]|ADC Current Sampling Number
  |        |          |The current sampling numbers for ADC continue sampling select.
  |        |          |The current sampling number= ADCCN[7:0] + 1
 */

/**
  @addtogroup ADC_ADCSR ADCSR
  @ref ADCSR Special Function Register
  Address: E7H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |A/D Conversion Full Done Flag
  |        |          |This bit is set by hardware when all of ADCSN A/D conversions are
  |        |          |complete in continue mode or single conversion in single mode.
  |        |          |Note: This bit can be cleared by writing 0 to it..
  |[1]     |HDONE     |A/D Conversion Half Done Flag
  |        |          |This bit is set by hardware when half of ADCSN A/D conversions are
  |        |          |complete in continue mode.
  |        |          |Note: This bit can be cleared by writing 0 to it
  |[2]     |CMPHIT    |ADC Comparator Hit Flag
  |        |          |This bit is set by hardware when ADCMPO (ADCCON2.4) flag rising
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[3]     |Reserved  |Reserved
  |[6:4]   |ADCDIV[2:0]|ADC Clock Divider
  |        |          |000 = FADC is FSYS/1.
  |        |          |001 = FADC is FSYS/2.
  |        |          |010 = FADC is FSYS/4.
  |        |          |011 = FADC is FSYS/8.
  |        |          |100 = FADC is FSYS/16.
  |        |          |101 = FADC is FSYS/32.
  |        |          |110 = FADC is FSYS/64.
  |        |          |111 = FADC is FSYS/128.
  |[7]     |SLOW      |ADC Slow Speed Selection
  |        |          |This bit is used to select ADC low speed.
  |        |          |0 = high speed 500 ksps
  |        |          |1 = low speed 200 ksps
 */

/**@}*/ /* end of ADC group */

/**
  @addtogroup VREF VREF Control Register
  @{ */

/**
  @addtogroup VREF_VRFCON VRFCON
  @ref VRFCON Special Function Register
  Address: A9H, SFR Page 1, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ENVRF     |Internal VREF Enable
  |        |          |1 = Internal VREF Enabled,
  |        |          |0 = Internal VREF Disabled
  |        |          |Note that a 1 uF has to add on VREF pin while internal VREF is
  |        |          |enabled.
  |[1]     |ENLOAD    |Internal VREF Pre-Load Enable
  |        |          |1 = Internal VREF Pre-load Enabled.
  |        |          |0 = Internal VREF Pre-load Disabled
  |[3:2]   |Reserved  |Reserved
  |[6:4]   |VRFSEL[2:0]|Internal VREF Output Voltage Select
  |        |          |This field selects VREF output voltage.
  |        |          |000 = 1.538V , when VDD > 2.0V
  |        |          |001 = 2.048V , when VDD > 2.4V
  |        |          |010 = 2.560V , when VDD > 2.9V
  |        |          |011 = 3.072V , when VDD > 3.4V
  |        |          |100 = 4.096V , when VDD > 4.5V
  |        |          |101 = reserved
  |        |          |110 = reserved
  |        |          |111 = reserved
  |[7]     |Reserved  |Reserved
 */

/**@}*/ /* end of VREF group */

/**
  @addtogroup ACMP ACMP Control Register
  @{ */

/**
  @addtogroup ACMP_ACMPCR0 ACMPCR0
  @ref ACMPCR0 Special Function Register
  Address: D2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMPEN    |Comparator 0 Enable Bit
  |        |          |0 = Comparator 0 Disabled.
  |        |          |1 = Comparator 0 Enabled.
  |[1]     |ACMPIE    |Comparator 0 Interrupt Enable Bit
  |        |          |0 = Comparator 0 interrupt Disabled.
  |        |          |1 = Comparator 0 interrupt Enabled. If WKEN (ACMPCR1[3]) is set to 1,
  |        |          |the wake-up interrupt function will be enabled as well.
  |[2]     |HYSEN     |Comparator 0 Hysteresis Enable Bit
  |        |          |0 = Comparator 0 hysteresis Disabled.
  |        |          |1 = Comparator 0 hysteresis Enabled.
  |[3]     |WKEN      |Comparator 0 Power-Down Wake-Up Enable Bit
  |        |          |0 = Comparator 0 Wake-up function Disabled.
  |        |          |1 = Comparator 0 Wake-up function Enabled.
  |[5:4]   |NEGSEL    |Comparator 0 Negative Input Selection
  |        |          |00 = ACMP0_N0 (P2.4) pin.
  |        |          |01 = Internal comparator reference voltage (CRV).
  |        |          |10 = VBG (Band-gap).
  |        |          |11 = ACMP0_N1 (P2.0)pin.
  |[7:6]   |POSSEL    |Comparator 0 Positive Input Selection
  |        |          |00 = ACMP0_P0 (P2.5) pin.
  |        |          |01 = ACMP0_P1 (P2.3) pin.
  |        |          |10 = ACMP0_P2 (P2.1) pin.
  |        |          |11 = ACMP0_P3 (P3.1) pin.
 */

/**
  @addtogroup ACMP_ACMPCR1 ACMPCR1
  @ref ACMPCR1 Special Function Register
  Address: D3H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMPEN    |Comparator 1 Enable Bit
  |        |          |0 = Comparator 1 Disabled.
  |        |          |1 = Comparator 1 Enabled.
  |[1]     |ACMPIE    |Comparator 1 Interrupt Enable Bit
  |        |          |0 = Comparator 1 interrupt Disabled.
  |        |          |1 = Comparator 1 interrupt Enabled. If WKEN (ACMPCR2[3]) is set to 1,
  |        |          |the wake-up interrupt function will be enabled as well.
  |[2]     |HYSEN     |Comparator 1 Hysteresis Enable Bit
  |        |          |0 = Comparator 1 hysteresis Disabled.
  |        |          |1 = Comparator 1 hysteresis Enabled.
  |[3]     |WKEN      |Comparator 1 Power-Down Wake-Up Enable Bit
  |        |          |0 = Comparator 1 Wake-up function Disabled.
  |        |          |1 = Comparator 1 Wake-up function Enabled.
  |[5:4]   |NEGSEL    |Comparator 1 Negative Input Selection
  |        |          |00 = ACMP1_N0 (P2.2) pin.
  |        |          |01 = Internal comparator reference voltage (CRV).
  |        |          |10 = VBG (Band-gap).
  |        |          |11 = ACMP1_N1 (P3.2)pin.
  |[7:6]   |POSSEL    |Comparator 1 Positive Input Selection
  |        |          |00 = ACMP1_P0 (P2.5) pin.
  |        |          |01 = ACMP1_P1 (P2.3) pin.
  |        |          |10 = ACMP1_P2 (P2.1) pin.
  |        |          |11 = ACMP1_P3 (P3.1) pin.
 */

/**
  @addtogroup ACMP_ACMPCR2 ACMPCR2
  @ref ACMPCR2 Special Function Register
  Address: ABH, SFR Page 1
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRVEN     |CRV Enable Bit
  |        |          |0 = CRV Disabled.
  |        |          |1 = CRV Enabled.
  |[1]     |CRVSSEL   |CRV Source Voltage Selection
  |        |          |0 = VDD is selected as CRV source voltage.
  |        |          |1 = The reference voltage (VREF) is selected as CRV source voltage.
  |[3:2]   |SPEED0    |Analog Comparator 0 Speed Control
  |        |          |00 = slow speed, propagation delay : 4.5us, 1.2uA (typ.)
  |        |          |01 = slow+ speed, propagation delay : 2.0us, 3uA (typ.)
  |        |          |10 = fast speed, propagation delay : 0.6us, 10uA (typ.)
  |        |          |11 = fast+ speed, propagation delay : 0.2us, 75uA (typ.)
  |[4]     |POE0      |Analog Comparator 0 Polarity Output Enable
  |        |          |0 = ACMP0 outputs directly.
  |        |          |1 = ACMP0 outputs inversely.
  |[5]     |POE1      |Analog Comparator 1 Polarity Output Enable
  |        |          |0 = ACMP1 output directly.
  |        |          |1 = ACMP1 output inversely.
  |[7:6]   |SPEED1    |Analog Comparator 1 Speed Control
  |        |          |00 = slow speed, propagation delay : 4.5us, 1.2uA (typ.)
  |        |          |01 = slow+ speed, propagation delay : 2.0us, 3uA (typ.)
  |        |          |10 = fast speed, propagation delay : 0.6us, 10uA (typ.)
  |        |          |11 = fast+ speed, propagation delay : 0.2us, 75uA (typ.)
 */

/**
  @addtogroup ACMP_ACMPSR ACMPSR
  @ref ACMPSR Special Function Register
  Address: D4H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ACMP0IF   |Comparator 0 Interrupt Flag
  |        |          |This bit is set by hardware whenever the comparator 0 output changes
  |        |          |state. This will generate an interrupt if ACMPIE (ACMPCR0[1]) is set
  |        |          |to 1
  |        |          |Note: Write 0 to clear this bit to 0.
  |[1]     |ACMP0O    |Comparator 0 Output
  |        |          |Synchronized to the PCLK to allow reading by software. Cleared when
  |        |          |the comparator 0 is disabled, i.e. ACMPEN (ACMPCR0[0]) is cleared to
  |        |          |0.
  |        |          |Note: This bit is read only.
  |[2]     |ACMP1IF   |Comparator 1 Interrupt Flag
  |        |          |This bit is set by hardware whenever the comparator 1 output changes
  |        |          |state. This will generate an interrupt if ACMPIE (ACMPCR1[1]) is set
  |        |          |to 1
  |        |          |Note: Write 0 to clear this bit to 0.
  |[3]     |ACMP1O    |Comparator 1 Output
  |        |          |Synchronized to the PCLK to allow reading by software. Cleared when
  |        |          |the comparator 1 is disabled, i.e. ACMPEN (ACMPCR1[0]) is cleared to
  |        |          |0.
  |        |          |Note: This bit is read only.
  |[4]     |INT_Test  |ACMP software test interrupt flag
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup ACMP_ACMPVREF ACMPVREF
  @ref ACMPVREF Special Function Register
  Address: D5H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |CRV0CTL[2:0]|Comparator 0 Reference Voltage Setting
  |        |          |CRV0 = CRV source voltage * (2/12+CRV0CTL/12).
  |[3]     |Reserved  |Reserved
  |[6:4]   |CRV1CTL[2:0]|Comparator 1 Reference Voltage Setting
  |        |          |CRV1 = CRV source voltage * (2/12+CRV1CTL/12).
  |[7]     |Reserved  |Reserved
 */

/**@}*/ /* end of ACMP group */

/**
  @addtogroup PDMA PDMA Control Register
  @{ */

/**
  @addtogroup PDMA_DMA0CR0 DMA0CR0
  @ref DMA0CR0 Special Function Register
  Address: 92H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup PDMA_DMA1CR0 DMA1CR0
  @ref DMA1CR0 Special Function Register
  Address: EBH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup PDMA_DMA2CR0 DMA2CR0
  @ref DMA2CR0 Special Function Register
  Address: B3H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup PDMA_DMA3CR0 DMA3CR0
  @ref DMA3CR0 Special Function Register
  Address: ABH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |EN        |PDMA Enable Bit
  |        |          |Setting this bit to 1 enables PDMA operation. If this bit is cleared,
  |        |          |PDMA will ignore all PDMA request and Reset the internal state
  |        |          |machine, pointers and internal buffer. The contents of all Register
  |        |          |Description will not be cleared.
  |[1]     |RUN       |Trigger Enable Bit
  |        |          |0 = No effect.
  |        |          |1 = PDMA data transfer Enabled.
  |        |          |Note 1: When PDMA transfer completed, this bit will be cleared
  |        |          |automatically.
  |[2]     |FIE       |PDMA Full Transfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA full transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA full transfer is done.
  |[3]     |HIE       |PDMA HALFTransfer Done Interrupt Enable Bit
  |        |          |0 = Interrupt Disabled when PDMA half transfer is done.
  |        |          |1 = Interrupt Enabled when PDMA half transfer is done.
  |[7:4]   |PSSEL[3:0]|Peripheral Source Select
  |        |          |0000 = XRAM to XRAM
  |        |          |0001 = SPI0 RX
  |        |          |0010 = SMC0/UART2 RX.
  |        |          |0011 = SPI1 RX
  |        |          |0100 = Reserved, No peripheral source select
  |        |          |0101 = SPI0 TX
  |        |          |0110 = SMC0/UART2 TX.
  |        |          |0111 = SPI1 TX
  |        |          |1010 = SMC1/UART3 RX.
  |        |          |1110 = SMC1/UART3 TX.
  |        |          |The others are reserved, no peripheral source selected
  |        |          |Note: 0001~0011,1010 : peripheral devices to XRAM memory
  |        |          |0101~0111,1110 : XRAM memory to peripheral devices
 */

/**
  @addtogroup PDMA_DMA0MAL DMA0MAL
  @ref DMA0MAL Special Function Register
  Address: 93H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA1MAL DMA1MAL
  @ref DMA1MAL Special Function Register
  Address: ECH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA2MAL DMA2MAL
  @ref DMA2MAL Special Function Register
  Address: B4H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA3MAL DMA3MAL
  @ref DMA3MAL Special Function Register
  Address: ACH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MAL[7:0]  |PDMA XRAM Base Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the source address.
  |        |          |XRAM address = {MAH[3:0],MAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA0BAH DMA0BAH
  @ref DMA0BAH Special Function Register
  Address: F6H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA1BAH DMA1BAH
  @ref DMA1BAH Special Function Register
  Address: FDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA2BAH DMA2BAH
  @ref DMA2BAH Special Function Register
  Address: B2H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA3BAH DMA3BAH
  @ref DMA3BAH Special Function Register
  Address: AAH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MAH[3:0]  |PDMA XRAM Base Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address to store or read for the
  |        |          |peripheral source data; in memory to memory transfer, this register is
  |        |          |the destination address.
  |        |          |XRAM address = {MAH[3:0], MAL[7:0]}
  |[7:4]   |MDAH[3:0] |Memory to Memory Destination Address (High Byte)
  |        |          |The most significant 4 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA0CNT DMA0CNT
  @ref DMA0CNT Special Function Register
  Address: 94H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup PDMA_DMA1CNT DMA1CNT
  @ref DMA1CNT Special Function Register
  Address: EDH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup PDMA_DMA2CNT DMA2CNT
  @ref DMA2CNT Special Function Register
  Address: B5H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup PDMA_DMA3CNT DMA3CNT
  @ref DMA3CNT Special Function Register
  Address: ADH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CNT[7:0]  |PDMA Transfer Count
  |        |          |The total transfer count for PDMA request operation.
  |        |          |Total transfer count = CNT[7:0] + 1
 */

/**
  @addtogroup PDMA_DMA0CCNT DMA0CCNT
  @ref DMA0CCNT Special Function Register
  Address: 95H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup PDMA_DMA1CCNT DMA1CCNT
  @ref DMA1CCNT Special Function Register
  Address: EEH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup PDMA_DMA2CCNT DMA2CCNT
  @ref DMA2CCNT Special Function Register
  Address: B6H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup PDMA_DMA3CCNT DMA3CCNT
  @ref DMA3CCNT Special Function Register
  Address: AEH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCNT[7:0] |PDMA Current Transfer Count
  |        |          |The current transfer count for PDMA request operation.
  |        |          |Current transfer count = CCNT[7:0]
  |        |          |Note: while DMAnCNT=0xFF (total transfer count = 256) and DMAnCCNT =
  |        |          |0x00 , If PDMA FDONE flag (DMAnTSR[0])=0, that means, 1¡¦st byte data
  |        |          |is not complete.If PDMA FDONE flag (DMAnTSR[0])=1, that means, all of
  |        |          |data are transferred..
 */

/**
  @addtogroup PDMA_DMA0TSR DMA0TSR
  @ref DMA0TSR Special Function Register
  Address: E9H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA1TSR DMA1TSR
  @ref DMA1TSR Special Function Register
  Address: F1H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA2TSR DMA2TSR
  @ref DMA2TSR Special Function Register
  Address: B1H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA3TSR DMA3TSR
  @ref DMA3TSR Special Function Register
  Address: A9H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |FDONE     |PDMA Full Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA full transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[1]     |HDONE     |PDMA Half Transfer Done Flag
  |        |          |This bit is set by hardware when PDMA half transfer is done.
  |        |          |Note: This bit can be cleared by writing 0 to it.
  |[2]     |ACT       |PDMA in Active Status Flag (Read Only)
  |        |          |0 = This bit is cleared automatically when PDMA transfer is done or
  |        |          |disabled.
  |        |          |1 = This bit is set by hardware when PDMA transfer is in active.
  |[3]     |INT_Test  |PDMA software interrupt (for software test)
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_MTM0DA MTM0DA
  @ref MTM0DA Special Function Register
  Address: EAH, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_MTM1DA MTM1DA
  @ref MTM1DA Special Function Register
  Address: F2H, SFR Page 0
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_MTM2DA MTM2DA
  @ref MTM2DA Special Function Register
  Address: B7H, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_MTM3DA MTM3DA
  @ref MTM3DA Special Function Register
  Address: AFH, SFR Page 2
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |MDAL[7:0] |Memory to Memory Destination Address (Low Byte)
  |        |          |The least significant 8 bits of XRAM address are used for memory to
  |        |          |memory destination address.
  |        |          |XRAM destination address = {MDAH[3:0], MDAL[7:0]}
 */

/**
  @addtogroup PDMA_DMA0CR1 DMA0CR1
  @ref DMA0CR1 Special Function Register
  Address: 8AH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA1CR1 DMA1CR1
  @ref DMA1CR1 Special Function Register
  Address: 8BH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA2CR1 DMA2CR1
  @ref DMA2CR1 Special Function Register
  Address: 8CH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA3CR1 DMA3CR1
  @ref DMA3CR1 Special Function Register
  Address: 8DH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |CRCEN     |PDMA CRC Checksum Enable Bit
  |        |          |0 = CRC checksum Disabled when PDMA is running, DMAnCRC[7:0] is set to
  |        |          |0x00
  |        |          |1 = CRC checksum Enabled when PDMA is running.
  |[1]     |REFIN     |PDMA CRC IN Reflect Enable Bit
  |        |          |0 = CRC IN reflect Disabled when PDMA is running.
  |        |          |1 = CRC IN reflect Enabled when PDMA is running, the input data will
  |        |          |be bit order revised
  |[2]     |REFOUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT reflect Disabled when PDMA is running.
  |        |          |1 = CRC OUT reflect Enabled when PDMA is running, the output data will
  |        |          |be bit order revised
  |[3]     |XOROUT    |PDMA CRC OUT Reflect Enable Bit
  |        |          |0 = CRC OUT exclusive-ored Disabled when PDMA is running.
  |        |          |1 = CRC OUT exclusive-ored Enabled when PDMA is running, the final
  |        |          |value is exclusive-ored with 0x55
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup PDMA_DMA0CRC DMA0CRC
  @ref DMA0CRC Special Function Register
  Address: 92H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA1CRC DMA1CRC
  @ref DMA1CRC Special Function Register
  Address: 93H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA2CRC DMA2CRC
  @ref DMA2CRC Special Function Register
  Address: 94H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA3CRC DMA3CRC
  @ref DMA3CRC Special Function Register
  Address: 95H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CRC[7:0]  |PDMA CRC Checksum
  |        |          |The checksum of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8 + X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA0SEED DMA0SEED
  @ref DMA0SEED Special Function Register
  Address: 9AH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA1SEED DMA1SEED
  @ref DMA1SEED Special Function Register
  Address: 9BH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA2SEED DMA2SEED
  @ref DMA2SEED Special Function Register
  Address: 9CH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**
  @addtogroup PDMA_DMA3SEED DMA3SEED
  @ref DMA3SEED Special Function Register
  Address: 9DH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |SEED[7:0] |PDMA CRC SEED
  |        |          |The seed of the Cyclic Redundancy Check (CRC-8) calculation
  |        |          |The CRC-8 polynomial is below
  |        |          |CRC-8: X8
  |        |          |+ X2 + X + 1
 */

/**@}*/ /* end of PDMA group */

/**
  @addtogroup LCD LCD Control Register
  @{ */

/**
  @addtogroup LCD_LCDCON LCDCON
  @ref LCDCON Special Function Register
  Address: F9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |Reserved  |Reserved
  |[3:2]   |DUTY[1:0] |LCD Duty
  |        |          |00 = 1/4 duty.
  |        |          |01 = 1/6 duty.
  |        |          |10 = 1/8 duty.
  |        |          |11 = Reserved.
  |        |          |Note that when 1/4 duty is selected, only COM0 to COM3 are used for
  |        |          |LCD driving. When 1/6 or 1/8 duty is selected that means 6 COM or 8
  |        |          |COM pins are used, and the SEG pins will be used according to the
  |        |          |definition of multiple function pin setting. When those SEG pins were
  |        |          |used as COM pins, these SEG bits are unavailable.
  |[5:4]   |BIAS[1:0] |LCD Bias
  |        |          |00 = Reserved.
  |        |          |01 = 1/2 bias.
  |        |          |10 = 1/3 bias.
  |        |          |11 = 1/4 bias
  |[6]     |TYPE      |Display Type
  |        |          |0 = Type A
  |        |          |1 = Type B (Power saving mode)
  |[7]     |LCDEN     |LCD Enable
  |        |          |0 = LCD circuit OFF. Each COM and SEG pin functions as general purpose
  |        |          |I/O and its multi-functions other than LCD.
  |        |          |1 = LCD circuit ON. COM and enabled SEG pins generate the LCD driving
  |        |          |waveform.
 */

/**
  @addtogroup LCD_LCDCLK LCDCLK
  @ref LCDCLK Special Function Register
  Address: FAH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |LCDDIV[2:0]|LCD Clock Divider
  |        |          |000 = 1/1.
  |        |          |001 = 1/2.
  |        |          |010 = 1/4.
  |        |          |011 = 1/8.
  |        |          |100 = 1/16.
  |        |          |101 = 1/32.
  |        |          |Others = Reserved.
  |[3]     |DISP      |DISP
  |        |          |The LCD display keeps display on or display off during chip power-down
  |        |          |mode. If LXT is used as the LCD clock source, user should turn on LXT
  |        |          |first by software.
  |        |          |0 = Display off.
  |        |          |1 = Display on.
  |[4]     |LCDCKS    |LCD Clock Source Select
  |        |          |0 = LIRC/24.
  |        |          |1 = LXT/24.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDPTR LCDPTR
  @ref LCDPTR Special Function Register
  Address: FBH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4:0]   |LCDPTR[4:0]|LCD Data Pointer
  |        |          |This field determines which LCD display data register is accessed by
  |        |          |LCDDAT. It¡¦s also means the LCD segment address.the value is from 0
  |        |          |~31. User should fill the target pointer value in LCDPTR before
  |        |          |accessing LCDDAT. After LCD display data is written to LCDDAT
  |        |          |register, the LCDPTR value increases 1 automatically.
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDDAT LCDDAT
  @ref LCDDAT Special Function Register
  Address: FCH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDDAT[7:0]|LCD Data
  |        |          |This byte is defined which COM pin should be enabled. Bit 0 means COM
  |        |          |0 and bit 7 means COM 7. When value 1 written into this register will
  |        |          |be enable the corresponding COM pins and which pixel display is based
  |        |          |on LCD SEG defined by LCDPTR.
  |        |          |0 = LCD pixel is cleared.
  |        |          |1 = LCD pixel is darkened.
 */

/**
  @addtogroup LCD_LCDPWR LCDPWR
  @ref LCDPWR Special Function Register
  Address: FDH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |PWR_SAVE[1:0]|LCD Power Save Mode Select
  |        |          |LCD driving cycle select, turn on timing decide the driving current.
  |        |          |00 = always ON. No power saving.
  |        |          |01 = Turns on 1/4 frame cycle (most power saving condition)
  |        |          |10 = Turns on 2/4 frame cycle
  |        |          |11 = Turns on 3/4 frame cycle
  |        |          |T = 1/(LCDCLK frequency/LCD clock divider)
  |        |          |Type A: (Full Period is 8T)
  |        |          |00 = always ON. No power saving
  |        |          |01 = 2T turns on
  |        |          |10 = 4T turns on
  |        |          |11 = 6T turns on
  |        |          |Type B: (Full Period is 16T)
  |        |          |00 = always ON. No power saving
  |        |          |01 = 4T turns on
  |        |          |10 = 8T turns on
  |        |          |11 = 12T turns on
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDBL LCDBL
  @ref LCDBL Special Function Register
  Address: FEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |BLF[2:0]  |BLINK Frequency
  |        |          |Blinking frequency define value is from 0~7
  |        |          |When LCDCKS =1, FBLINK = FLXT/211+ BL_Time[2:0]
  |        |          |When LCDCKS =0, FBLINK = FLIRC/211+ BL_Time[2:0]
  |[3]     |BLINK     |LCD BLINK
  |        |          |0 = LCD always on
  |        |          |1 = LCD blinking. The blinking frequency is based on BLF[2:0] define.
  |[6:4]   |DT[2:0]   |Dead Time(Not Released)
  |        |          |Drive all SEG and COM to zero period time
  |        |          |000 = without dead time
  |        |          |001 = 1 COM period time
  |        |          |010 = 2 COM period time
  |        |          |011 = 3 COM period time
  |        |          |100 = 4 COM period time
  |        |          |101 = 5 COM period time
  |        |          |110 =,6 COM period time
  |        |          |111 = 7 COM period time
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDMODE LCDMODE
  @ref LCDMODE Special Function Register
  Address: FFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |VLCD_MODE[1:0]|VLCD Source Mode Select.
  |        |          |This bits defined VLCD voltage source
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |00
  |        |          |Ext. VLCD
  |        |          |01
  |        |          |AVDD
  |        |          |10
  |        |          |VCP (Charge   Pump)
  |        |          |11
  |        |          |Disable
  |        |          |Note : VCP value base on LCDCPUMP define.
  |        |          |Package with VLCD Pin (ROMMAP Control Bit = 1)
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |Not Released
  |        |          |(RTL Map Analog Design)
  |        |          |Not Released
  |        |          |(map0[2])
  |        |          |00
  |        |          |Ext. VLCD
  |        |          |000
  |        |          |1
  |        |          |01
  |        |          |AVDD
  |        |          |001
  |        |          |1
  |        |          |10
  |        |          |VCP (Charge Pump)
  |        |          |010
  |        |          |1
  |        |          |11
  |        |          |Disable
  |        |          |011
  |        |          |1
  |        |          |Package without VLCD pin (ROMMAP control bit = 0)
  |        |          |VLCD_MODE
  |        |          |VLCD source
  |        |          |Not Released
  |        |          |(RTL Map Analog Design)
  |        |          |Not Released
  |        |          |(map0[2])
  |        |          |00
  |        |          |Disable
  |        |          |111
  |        |          |0
  |        |          |01
  |        |          |AVDD
  |        |          |101
  |        |          |0
  |        |          |10
  |        |          |Disable
  |        |          |111
  |        |          |0
  |        |          |11
  |        |          |Disable
  |        |          |111
  |        |          |0
  |[5:2]   |Reserved  |Reserved
  |[6]     |BUF_MODE  |Buffer Mode Enable
  |        |          |This bit going to define LCD driver as Buffer Mode.
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable
  |        |          |Note: When BUF_MODE is enabled, R_MODE and RE_MODE should be disabled.
  |[7]     |R_MODE    |Resister Mode Enable
  |        |          |This bit going to define LCD driver as Resistor Mode or Resistor
  |        |          |Enhance Mode
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable.
  |        |          |Note: When R_MODE is enabled, BUF_MODE should be disabled.
 */

/**
  @addtogroup LCD_LCDCPUMP LCDCPUMP
  @ref LCDCPUMP Special Function Register
  Address: F1H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |VCP_SEL[5:0]|Charge Pump Voltage Set Value
  |        |          |000000 = 5.4V
  |        |          |000101 = 5.2V
  |        |          |001010 = 5.0V
  |        |          |001110 = 4.8V
  |        |          |010011 = 4.6V
  |        |          |011000 = 4.4V
  |        |          |011101 = 4.2V
  |        |          |100010 = 4.0V
  |        |          |100111 = 3.8V
  |        |          |101100 = 3.6V
  |        |          |110000 = 3.4V
  |        |          |110101 = 3.2V
  |        |          |111010 = 3.0V
  |        |          |111111 = 2.8V
  |        |          |Note: LCD pump up voltage with limitation VLCD(max.) = 1.8 * VDD. LCD
  |        |          |pump down voltage without this limitation.
  |[7:6]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDADJUST LCDADJUST
  @ref LCDADJUST Special Function Register
  Address: F2H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1]     |CP_ILOAD  |Charge Pump Loading Option
  |        |          |0 = 100uA loading
  |        |          |1 = 150uA loading
  |[2]     |L_ICMP    |Comparator Operating Current Option
  |        |          |0 = large current operating
  |        |          |1= small current operating
  |[3]     |SYN_SAV   |Buffer Output Stage Sync
  |        |          |0 = Buffer output stage no sync. to PWR_NOSAVING(output stage off/on)
  |        |          |1 = Buffer output stage sync. to PWR_NOSAVING(buffer off/on)
  |[4]     |PUMP_HYS  |Charge Pump Hysteresis
  |        |          |0 = 00
  |        |          |1 = 01
  |[5]     |BUF_V2_iset|Buffer_V2_Iset
  |        |          |0 = 00
  |        |          |1 = 10
  |[6]     |BUF_V2_iset|Buffer_V2_Iset
  |        |          |0 = 00
  |        |          |1= 10
  |[7]     |BUF_V3_iset|Buffer_V3_Iset
  |        |          |0 = 00
  |        |          |1= 10
 */

/**
  @addtogroup LCD_LCDCON1 LCDCON1
  @ref LCDCON1 Special Function Register
  Address: F4H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |Reserved  |Reserved
  |[1]     |RE_MODE   |LCD Resistor Enhance Mode Enable
  |        |          |This bit going to define LCD as resistor enhance mode and only invalid
  |        |          |when R_MODE(LCDMODE[7]) bit is enabled.
  |        |          |About R_MODE, RE_MODE and BUF_MODE define and the LCD driving current
  |        |          |please reference Table 6.173 LCD Driving Mode .
  |        |          |0 = Disable
  |        |          |1 = Enable
  |        |          |Note: when R_MODE and RE_MODE is enabled, BUF_MODE should be disabled.
  |[2]     |LCDIE     |LCD Interrupt Enable
  |        |          |The Interrupt flag show in LCDIS.
  |        |          |0 = Disable
  |        |          |1 = Enable
  |[3]     |LCDIS     |LCD Interrupt Source Select
  |        |          |0 = LCD charge pump counter alarm interrupt
  |        |          |When LCDIE is enabled and this bit is 0, only when LCD charge pump
  |        |          |counter value over LCDCPALCT0 and LCDCPALCT1 defined value, the LCD
  |        |          |will go intot LCD interrupt.The LCDCPALIF(LCDIF[0]) will be set to 1.
  |        |          |1 = LCD charge pump active counter read interrupt
  |        |          |When bit set as 1. If LCDCPIF=1 means LCD module successful to
  |        |          |drivring LCD pixel. The charge pump value will be write into LCDCPCT0
  |        |          |and LCDCPCT1 and the LCD interrupt happen.If LCDCPOVIF = 1means LCD
  |        |          |module charge pump value is match the maximum 0x3FF
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDCPALCT0 LCDCPALCT0
  @ref LCDCPALCT0 Special Function Register
  Address: F5H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDCPOVCT[7:0]|LCD Chage Pump Counter Alarm Value for Trig Interrupt Value .
  |        |          |Low byte of Trig LCD interrupt alarm counter value for user setting.
 */

/**
  @addtogroup LCD_LCDCPALCT1 LCDCPALCT1
  @ref LCDCPALCT1 Special Function Register
  Address: E9H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LCDCPOVCT [9:8]|LCD Chage Pump Counter Overflow Trig Interrupt Value .
  |        |          |High byte of Trig LCD interrupt alarm counter value for user setting.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDCPCT0 LCDCPCT0
  @ref LCDCPCT0 Special Function Register
  Address: F6H, Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |LCDCPCT[7:0]|LCD Current Frame Chage Pump Counter Value Low Byte
  |        |          |Each time after interrupt this byte reload LCD current frame charge
  |        |          |pump value low byte.
  |        |          |This byte is read only.
 */

/**
  @addtogroup LCD_LCDCPCT1 LCDCPCT1
  @ref LCDCPCT1 Special Function Register
  Address: EAH, Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |LCDCPCT[9:8]|LCD Current Frame Chage Pump Counter Value High Byte
  |        |          |Each time after interrupt this byte reload LCD current frame charge
  |        |          |pump value low byte.
  |        |          |This byte is read only.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup LCD_LCDIF LCDIF
  @ref LCDIF Special Function Register
  Address: F7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |LCDCPALIF |LCD Charge Pump Alarm Value Match Interrupt Flag
  |        |          |This Flag check LCDCPALCT0 and LCDCPALCT1 counter value.
  |        |          |if LCDIS (LCDCON1.3) = 0 and LCDIE (LCDCON1.2) = 1. Only when LCD
  |        |          |charge pump counter is over LCDCPALCT0 and LCDCPALCT1 defined alarm
  |        |          |value the LCD interrupt will be happen.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |[1]     |LCDCPIF   |LCD Charge Pump Interrupt Flag
  |        |          |This Flag check LCDCPCT0 and LCDCPCT1 counter value.
  |        |          |if LCDIS (LCDCON1.3) = 1 and LCDIE (LCDCON1.2) = 1. When LCD module
  |        |          |successful to drivring LCD pixel. The charge pump value will be write
  |        |          |into LCDCPCT0 and LCDCPCT1 and the LCD interrupt happen. User can read
  |        |          |from this two register byte to find the charge pump reference value.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |[2]     |LCDCPOVIF |LCD Charge Pump Counter Value Overflow Flag
  |        |          |This Flag check LCDCPCT0 and LCDCPCT1 counter value.
  |        |          |When LCDIS (LCDCON1.3) = 1 and LCDIE (LCDCON1.2) = 1. When LCD module
  |        |          |charge pump value is match the maximum 0x3FF this bit will be set to 1
  |        |          |and the LCD interrupt happen.
  |        |          |0 = without interrupt
  |        |          |1 = with interrupt
  |        |          |This bit is set 1 by hardware and should be cleard by write 0 to this
  |        |          |bit.
  |        |          |When this bit is set as 1 user should be noticed for the pixel now is
  |        |          |displaying. The circuit short or LCD pixel damage may cause thie
  |        |          |result. Since as normal the charge pump counter value shoud not reach
  |        |          |0x3FF.
  |[7:3]   |Reserved  |Reserved
 */

/**@}*/ /* end of LCD group */

/**
  @addtogroup RTC RTC Control Register
  @{ */

/**
  @addtogroup RTC_RTCINIT RTCINIT
  @ref RTCINIT Special Function Register
  Address: A1H, SFR Page 3, TA protected
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |INIT[0]/ACTIVE|RTC Active Status (Read Only)
  |        |          |0 = RTC is at reset state.
  |        |          |1 = RTC is at normal active state.
  |[1]     |INIT[1]/HOLD|RTC HOLD Flag (Read Only)
  |        |          |0 = RTC hold flag is inavtive.
  |        |          |1 = RTC hold flag is active.
  |[7:2]   |INIT[7:2] |RTC Initiation (Write Only)
  |        |          |When RTC block is powered on, RTC is at reset state. User has to write
  |        |          |a number (0x 57) to INIT to make RTC leave reset state. Once the
  |        |          |INIT[7:0] is written as 0x57, the RTC will be in un-reset state
  |        |          |permanently. Once the INIT[7:0] is written as 0x5F, the RTC will be in
  |        |          |hold and un-reset state permanently. This Byte is TA protected.
  |        |          |The INIT is a write-only field and read value will be always 0.
 */
sfr RTCINIT                    =0xA1;


/**
  @addtogroup RTC_RTCRWEN RTCRWEN
  @ref RTCRWEN Special Function Register
  Address: A2H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |RWENF     |RTC Register Access Enable Flag (Read Only)
  |        |          |0 = RTC register read/write Disabled.
  |        |          |1 = RTC register read/write Enabled.
  |        |          |Note: RWENF will be masked to 0 during RTC busy.
  |[1]     |FADJTG    |RTC Counter Update (Read and Write)
  |        |          |Set this bit = 1 by software. It will update to RTC counter from
  |        |          |RTCFREQADJ1/0. After RTC counter updated, this bit will auto recover
  |        |          |to 0 by hardware.
  |[7:2]   |Reserved  |Reserved
 */
sfr RTCRWEN                    =0xA2;


/**
  @addtogroup RTC_RTCCLKSEL RTCCLKSEL
  @ref RTCCLKSEL Special Function Register
  Address: A3H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |C32KS     |Clock 32K Source Selection:
  |        |          |0 = Internal 32K clock is from 32.786 kHz crystal .
  |        |          |1 = Internal 32K clock is from LIRC38.4 kHz.
  |[7:1]   |Reserved  |Reserved
 */
sfr RTCCLKSEL                  =0xA3;

/**
  @addtogroup RTC_RTCFREQADJ0 RTCFREQADJ0
  @ref RTCFREQADJ0 Special Function Register
  Address: A4H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[5:0]   |FRACTION  |Fraction Part
  |        |          |Formula: FRACTION = (fraction part of detected value) X 64.
  |        |          |Note: Digit in FCR must be expressed as hexadecimal number.
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCFREQADJ0                =0xA4;

/**
  @addtogroup RTC_RTCFREQADJ1 RTCFREQADJ1
  @ref RTCFREQADJ1 Special Function Register
  Address: A5H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[4:0]   |INTEGER   |Integer Part
  |        |          |00000 = Integer part of detected value is 32752.
  |        |          |00001 = Integer part of detected value is 32753.
  |        |          |00010 = Integer part of detected value is 32754.
  |        |          |00011 = Integer part of detected value is 32755.
  |        |          |00100 = Integer part of detected value is 32756.
  |        |          |00101 = Integer part of detected value is 32757.
  |        |          |00110 = Integer part of detected value is 32758.
  |        |          |00111 = Integer part of detected value is 32759.
  |        |          |01000 = Integer part of detected value is 32760.
  |        |          |01001 = Integer part of detected value is 32761.
  |        |          |01010 = Integer part of detected value is 32762.
  |        |          |01011 = Integer part of detected value is 32763.
  |        |          |01100 = Integer part of detected value is 32764.
  |        |          |01101 = Integer part of detected value is 32765.
  |        |          |01110 = Integer part of detected value is 32766.
  |        |          |01111 = Integer part of detected value is 32767.
  |        |          |10000 = Integer part of detected value is 32768.
  |        |          |10001 = Integer part of detected value is 32769.
  |        |          |10010 = Integer part of detected value is 32770.
  |        |          |10011 = Integer part of detected value is 32771.
  |        |          |10100 = Integer part of detected value is 32772.
  |        |          |10101 = Integer part of detected value is 32773.
  |        |          |10110 = Integer part of detected value is 32774.
  |        |          |10111 = Integer part of detected value is 32775.
  |        |          |11000 = Integer part of detected value is 32776.
  |        |          |11001 = Integer part of detected value is 32777.
  |        |          |11010 = Integer part of detected value is 32778.
  |        |          |11011 = Integer part of detected value is 32779.
  |        |          |11100 = Integer part of detected value is 32780.
  |        |          |11101 = Integer part of detected value is 32781.
  |        |          |11110 = Integer part of detected value is 32782.
  |        |          |11111 = Integer part of detected value is 32783.
  |[7:5]   |Reserved  |Reserved
 */
sfr RTCFREQADJ1                =0xA5;

/**
  @addtogroup RTC_RTCINTEN RTCINTEN
  @ref RTCINTEN Special Function Register
  Address: A6H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ALMIEN    |Alarm Interrupt Enable Bit
  |        |          |Set ALMIEN to 1 can also enable chip wake-up function when RTC alarm
  |        |          |interrupt event is generated.
  |        |          |0 = RTC Alarm interrupt Disabled.
  |        |          |1 = RTC Alarm interrupt Enabled.
  |[1]     |TICKIEN   |Time Tick Interrupt Enable Bit
  |        |          |Set TICKIEN to 1 can also enable chip wake-up function when RTC tick
  |        |          |interrupt event is generated.
  |        |          |0 = RTC Time Tick interrupt Disabled.
  |        |          |1 = RTC Time Tick interrupt Enabled.
  |[7:2]   |Reserved  |Reserved
 */
sfr RTCINTEN                   =0xA6;

/**
  @addtogroup RTC_RTCINTSTS RTCINTSTS
  @ref RTCINTSTS Special Function Register
  Address: A7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |ALMIF     |RTC Alarm Interrupt Flag
  |        |          |0 = Alarm condition is not matched.
  |        |          |1 = Alarm condition is matched.
  |        |          |Note: Write 1 to clear this bit.
  |[1]     |TICKIF    |RTC Time Tick Interrupt Flag
  |        |          |0 = Tick condition does not occur.
  |        |          |1 = Tick condition occur.
  |        |          |Note: Write 1 to clear this bit.
  |[7:2]   |Reserved  |Reserved
 */
sfr RTCINTSTS                  =0xA7;

/**
  @addtogroup RTC_RTCTIMESEC RTCTIMESEC
  @ref RTCTIMESEC Special Function Register
  Address: A9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |SEC[3:0]  |1-Sec Time Digit (0~9)
  |[6:4]   |TENSEC[2:0]|10-Sec Time Digit (0~5)
  |[7]     |Reserved  |Reserved
 */
sfr RTCTIMESEC                 =0xA9;

/**
  @addtogroup RTC_RTCTIMEMIN RTCTIMEMIN
  @ref RTCTIMEMIN Special Function Register
  Address: AAH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MIN[3:0]  |1-Min Time Digit (0~9)
  |[6:4]   |TENMIN[2:0]|10-Min Time Digit (0~5)
  |[7]     |Reserved  |Reserved
 */
sfr RTCTIMEMIN                 =0xAA;

/**
  @addtogroup RTC_RTCTIMEHR RTCTIMEHR
  @ref RTCTIMEHR Special Function Register
  Address: ABH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |HR[3:0]   |1-Hour Time Digit (0~9)
  |[5:4]   |TENHR[1:0]|10-Hour Time Digit (0~2)
  |        |          |When RTC runs as 12-hour time scale mode, RTCTIMEHR[5] (the high bit
  |        |          |of TENHR[1:0]) means AM/PM indication (If RTCTIMEHR[5] is 1, it
  |        |          |indicates PM time message.)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCTIMEHR                  =0xAB;

/**
  @addtogroup RTC_RTCTIMEHZ RTCTIMEHZ
  @ref RTCTIMEHZ Special Function Register
  Address: ACH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6:0]   |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup RTC_RTCCALDAY RTCCALDAY
  @ref RTCCALDAY Special Function Register
  Address: ADH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |DAY       |1-Day Calendar Digit (0~9)
  |[5:4]   |TENDAY    |10-Day Calendar Digit (0~3)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCCALDAY                  =0xAD;

/**
  @addtogroup RTC_RTCCALMON RTCCALMON
  @ref RTCCALMON Special Function Register
  Address: AEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MON[3:0]  |1-Month Calendar Digit (0~9)
  |[4]     |TENMON    |10-Month Calendar Digit (0~1)
  |[7:5]   |Reserved  |Reserved
 */
sfr RTCCALMON                  =0xAE;

/**
  @addtogroup RTC_RTCCALYEAR RTCCALYEAR
  @ref RTCCALYEAR Special Function Register
  Address: AFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |YEAR      |1-Year Calendar Digit (0~9)
  |[7:4]   |TENYEAR   |10-Year Calendar Digit (0~9)
 */
sfr RTCCALYEAR                 =0xAF;

/**
  @addtogroup RTC_RTCTALMSEC RTCTALMSEC
  @ref RTCTALMSEC Special Function Register
  Address: B1H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |SEC[3:0]  |1-Sec Time Digit of Alarm Setting (0~9)
  |[6:4]   |TENSEC[2:0]|10-Sec Time Digit of Alarm Setting (0~5)
  |[7]     |Reserved  |Reserved
 */
sfr RTCTALMSEC                 =0xB1;

/**
  @addtogroup RTC_RTCTALMMIN RTCTALMMIN
  @ref RTCTALMMIN Special Function Register
  Address: B2H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MIN[3:0]  |1-Min Time Digit of Alarm Setting (0~9)
  |[6:4]   |TENMIN[2:0]|10-Min Time Digit of Alarm Setting (0~5)
  |[7]     |Reserved  |Reserved
 */
sfr RTCTALMMIN                 =0xB2;

/**
  @addtogroup RTC_RTCTALMHR RTCTALMHR
  @ref RTCTALMHR Special Function Register
  Address: B3H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |HR[3:0]   |1-Hour Time Digit of Alarm Setting (0~9)
  |[5:4]   |TENHR[1:0]|10-Hour Time Digit of Alarm Setting (0~2)
  |        |          |When RTC runs as 12-hour time scale mode, RTCTIMEHR[5] (the high bit
  |        |          |of TENHR[1:0]) means AM/PM indication (If RTCTIMEHR[5] is 1, it
  |        |          |indicates PM time message.)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCTALMHR                  =0xB3;

/**
  @addtogroup RTC_RTCTALMHZ RTCTALMHZ
  @ref RTCTALMHZ Special Function Register
  Address: B4H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[6:0]   |HZCNT     |Index of sub-second counter(0x00 ~0x7F)
  |[7]     |Reserved  |Reserved
 */
sfr RTCTALMHZ                  =0xB4;

/**
  @addtogroup RTC_RTCCALMDAY RTCCALMDAY
  @ref RTCCALMDAY Special Function Register
  Address: B5H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |DAY[3:0]  |1-Day Calendar Digit of Alarm Setting (0~9)
  |[5:4]   |TENDAY[1:0]|10-Day Calendar Digit of Alarm Setting (0~3)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCCALMDAY                 =0xB5;

/**
  @addtogroup RTC_RTCCALMMON RTCCALMMON
  @ref RTCCALMMON Special Function Register
  Address: B6H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |MON[3:0]  |1-Month Calendar Digit of Alarm Setting (0~9)
  |[4]     |TENMON    |10-Month Calendar Digit of Alarm Setting (0~1)
  |[7:5]   |Reserved  |Reserved
 */
sfr RTCCALMMON                 =0xB6;

/**
  @addtogroup RTC_RTCCALMYEAR RTCCALMYEAR
  @ref RTCCALMYEAR Special Function Register
  Address: B7H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[3:0]   |YEAR[3:0] |1-Year Calendar Digit of Alarm Setting (0~9)
  |[7:4]   |TENYEAR[3:0]|10-Year Calendar Digit of Alarm Setting (0~9)
 */
sfr RTCCALMYEAR                =0xB7;

/**
  @addtogroup RTC_RTCCLKFMT RTCCLKFMT
  @ref RTCCLKFMT Special Function Register
  Address: B9H, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |24HEN     |24-Hour / 12-Hour Time Scale Selection
  |        |          |Indicates that RTCTIMEHR and RTCTALMHR are in 24-hour time scale or
  |        |          |12-hour time scale
  |        |          |0 = 12-hour time scale with AM and PM indication selected.
  |        |          |1 = 24-hour time scale selected.
  |[1]     |HZCNTEN   |Sub-Second Counter Enable Bit
  |        |          |0 = HZCNT disabled in RTCTIMEHZ and RTCTALMHZ.
  |        |          |1 = HZCNT enabled in RTCTIMEHZ and RTCTALMHZ .
  |[7:2]   |Reserved  |Reserved
 */
sfr RTCCLKFMT                  =0xB9;


/**
  @addtogroup RTC_RTCWEEKDAY RTCWEEKDAY
  @ref RTCWEEKDAY Special Function Register
  Address: BBH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |WEEKDAY   |Day of the Week Register
  |        |          |000 = Sunday.
  |        |          |001 = Monday.
  |        |          |010 = Tuesday.
  |        |          |011 = Wednesday.
  |        |          |100 = Thursday.
  |        |          |101 = Friday.
  |        |          |110 = Saturday.
  |        |          |111 = Reserved.
  |[7:3]   |Reserved  |Reserved
 */
sfr RTCWEEKDAY                 =0xBB;

/**
  @addtogroup RTC_RTCLEAPYEAR RTCLEAPYEAR
  @ref RTCLEAPYEAR Special Function Register
  Address: BCH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |LEAPYEAR  |Leap Year Indication Register (Read Only)
  |        |          |0 = This year is not a leap year.
  |        |          |1 = This year is leap year.
  |[7:1]   |Reserved  |Reserved
 */
sfr RTCLEAPYEAR                =0xBC;

/**
  @addtogroup RTC_RTCTICK RTCTICK
  @ref RTCTICK Special Function Register
  Address: BDH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |TICK[2:0] |Time Tick Register
  |        |          |These bits are used to select RTC time tick period for Periodic Time
  |        |          |Tick Interrupt request.
  |        |          |000 = Time tick is 1 second.
  |        |          |001 = Time tick is 1/2 second.
  |        |          |010 = Time tick is 1/4 second.
  |        |          |011 = Time tick is 1/8 second.
  |        |          |100 = Time tick is 1/16 second.
  |        |          |101 = Time tick is 1/32 second.
  |        |          |110 = Time tick is 1/64 second.
  |        |          |111 = Time tick is 1/128 second.
  |        |          |Note: This register can be read back after the RTC register access
  |        |          |enable bit RWENF (RTCRWEN[0]) is active.
  |[7:3]   |Reserved  |Reserved
 */
sfr RTCTICK                    =0xBD;

/**
  @addtogroup RTC_RTCTAMSK RTCTAMSK
  @ref RTCTAMSK Special Function Register
  Address: BEH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |MSEC      |Mask 1-Sec Time Digit of Alarm Setting (0~9)
  |[1]     |MTENSEC   |Mask 10-Sec Time Digit of Alarm Setting (0~5)
  |[2]     |MMIN      |Mask 1-Min Time Digit of Alarm Setting (0~9)
  |[3]     |MTENMIN   |Mask 10-Min Time Digit of Alarm Setting (0~5)
  |[4]     |MHR       |Mask 1-Hour Time Digit of Alarm Setting (0~9)
  |[5]     |MTENHR    |Mask 10-Hour Time Digit of Alarm Setting (0~2)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCTAMSK                   =0xBE;

/**
  @addtogroup RTC_RTCCAMSK RTCCAMSK
  @ref RTCCAMSK Special Function Register
  Address: BFH, SFR Page 3
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |MDAY      |Mask 1-Day Calendar Digit of Alarm Setting (0~9)
  |[1]     |MTENDAY   |Mask 10-Day Calendar Digit of Alarm Setting (0~3)
  |[2]     |MMON      |Mask 1-Month Calendar Digit of Alarm Setting (0~9)
  |[3]     |MTENMON   |Mask 10-Month Calendar Digit of Alarm Setting (0~1)
  |[4]     |MYEAR     |Mask 1-Year Calendar Digit of Alarm Setting (0~9)
  |[5]     |MTENYEAR  |Mask 10-Year Calendar Digit of Alarm Setting (0~9)
  |[7:6]   |Reserved  |Reserved
 */
sfr RTCCAMSK                   =0xBF;
/**@}*/ /* end of RTC group */

/**
  @addtogroup TK TK Control Register
  @{ */

/**
  @addtogroup TK_TKCON0 TKCON0
  @ref TKCON0 Special Function Register
  Address: 8000H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |SCAN      |Scan
  |        |          |Write a 1¡¦ to this bit will immediately initiate key scan on all
  |        |          |channels which are enabled. This bit will be self-cleared after key
  |        |          |scan started.
  |[1]     |TMRTRG_EN |Timer Trigger Enable
  |        |          |0 = Disable timer to trigger key scan.
  |        |          |1 = Enable timer triggers key scan periodically. Key scan will be
  |        |          |initiated by timer periodically.
  |[2]     |TK_EN     |Touch Key Scan Enable Bit
  |        |          |0 = Disable Touch Key Function.
  |        |          |1 = Enable Touch Key Function.
  |[3]     |SCAN_ALL  |All Keys Scan Enable
  |        |          |This function is used for low power key scanning operation. TKDATALL
  |        |          |is the only one valid data when key scan is complete.
  |        |          |0 = Disable All Keys Scan function.
  |        |          |1 = Enable All Keys Scan function.
  |[7:4]   |AVDDH_S   |AVDDH Voltage Select
  |        |          |0000 = 2/32 VDD.
  |        |          |0001 = 4/32 VDD.
  |        |          |0010 = 6/32 VDD.
  |        |          |0011 = 8/32 VDD.
  |        |          |0100 = 10/32 VDD.
  |        |          |0101 = 12/32 VDD.
  |        |          |0110 = 14/32 VDD.
  |        |          |0111 = 16/32 VDD.
  |        |          |1000 = 1/32 VDD.
  |        |          |1001 = 2/32 VDD.
  |        |          |1010 = 3/32 VDD.
  |        |          |1011 = 4/32 VDD.
  |        |          |1100 = 5/32 VDD.
  |        |          |1101 = 6/32 VDD.
  |        |          |1110 = 7/32 VDD.
  |        |          |1111 = 8/32 VDD.
 */

/**
  @addtogroup TK_TKCON1 TKCON1
  @ref TKCON1 Special Function Register
  Address: 8001H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[2:0]   |SENSET    |Touch Key Sensing Time Control
  |        |          |000 = 16 x PULSET.
  |        |          |001 = 32 x PULSET.
  |        |          |010 = 64 x PULSET.
  |        |          |011 = 128 x PULSET.
  |        |          |100 = 255 x PULSET.
  |        |          |101 = 511 x PULSET.
  |        |          |110 = 1023 x PULSET.
  |        |          |111 = 1023 x PULSET.
  |[3]     |Reserved  |Reserved
  |[6:4]   |PULSET    |Touch Key Sensing Pulse Width Time Control
  |        |          |000 = 500ns.
  |        |          |001 = 1us.
  |        |          |010 = 2us.
  |        |          |011 = 4us.
  |        |          |100 = 8us.
  |        |          |101 = 8us.
  |        |          |110 = 8us
  |        |          |111 = 8us.
  |[7]     |IRVEN     |Internal Reference Voltage Enable
  |        |          |0 = Disable internal reference voltage function.
  |        |          |1 = Enable internal reference voltage function.
  |        |          |Note: All other reference sources are disabled automatically when
  |        |          |enable internal reference voltage function.
 */

/**
  @addtogroup TK_TKCON2 TKCON2
  @ref TKCON2 Special Function Register
  Address: 8002H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |POL_CAP   |Capacitor Bank Polarity Select
  |        |          |00 = Gnd.
  |        |          |01 = AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = VDD.
  |[2]     |POL_INIT  |Touch Key Sensing Initial Potential Control
  |        |          |0 = Key pad is connected to Gnd before sensing.
  |        |          |1 = Key pad is connected to AVDDH before sensing.
  |[7:3]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKSEN0 TKSEN0
  @ref TKSEN0 Special Function Register
  Address: 8003H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TK0SEN    |TK0 Scan Enable
  |        |          |This bit is ignored if TK0REN (TKREN0[0]) is 1
  |        |          |0 = TKDAT0 is invalid.
  |        |          |1 = TK0 is always enable for Touch Key scan. TKDAT0 is valid.
  |[1]     |TK1SEN    |TK1 Scan Enable
  |        |          |This bit is ignored if TK1REN (TKREN0[1]) is 1.
  |        |          |0 = TKDAT1 is invalid.
  |        |          |1 = TK1 is always enable for Touch Key scan. TKDAT1 is valid.
  |[2]     |TK2SEN    |TK2 Scan Enable
  |        |          |This bit is ignored if TK2REN (TKREN0[2]) is 1.
  |        |          |0 = TKDAT2 is invalid.
  |        |          |1 = TK2 is always enable for Touch Key scan. TKDAT2 is valid.
  |[3]     |TK3SEN    |TK3 Scan Enable
  |        |          |This bit is ignored if TK3REN (TKREN0[3]) is 1.
  |        |          |0 = TKDAT3 is invalid.
  |        |          |1 = TK3 is always enable for Touch Key scan. TKDAT3 is valid.
  |[4]     |TK4SEN    |TK4 Scan Enable
  |        |          |This bit is ignored if TK4REN (TKREN0[4]) is 1.
  |        |          |0 = TKDAT4 is invalid.
  |        |          |1 = TK4 is always enable for Touch Key scan. TKDAT4 is valid.
  |[5]     |TK5SEN    |TK5 Scan Enable
  |        |          |This bit is ignored if TK5REN (TKREN0[5]) is 1.
  |        |          |0 = TKDAT5 is invalid.
  |        |          |1 = TK5 is always enable for Touch Key scan. TKDAT5 is valid.
  |[6]     |TK6SEN    |TK6 Scan Enable
  |        |          |This bit is ignored if TK6REN (TKREN0[6]) is 1.
  |        |          |0 = TKDAT6 is invalid.
  |        |          |1 = TK6 is always enable for Touch Key scan. TKDAT6 is valid.
  |[7]     |TK7SEN    |TK7 Scan Enable
  |        |          |This bit is ignored if TK7REN (TKREN0[7]) is 1.
  |        |          |0 = TKDAT7 is invalid.
  |        |          |1 = TK7 is always enable for Touch Key scan. TKDAT7 is valid.
 */

/**
  @addtogroup TK_TKSEN1 TKSEN1
  @ref TKSEN1 Special Function Register
  Address: 8004H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TK8SEN    |TK8 Scan Enable
  |        |          |This bit is ignored if TK8REN (TK_REN1[0]) is 1.
  |        |          |0 = TKDAT8 is invalid.
  |        |          |1 = TK8 is always enable for Touch Key scan. TKDAT8 is valid.
  |[1]     |TK9SEN    |TK9 Scan Enable
  |        |          |This bit is ignored if TK9REN (TK_REN1[1]) is 1.
  |        |          |0 = TKDAT9 is invalid.
  |        |          |1 = TK9 is always enable for Touch Key scan. TKDAT9 is valid.
  |[2]     |TK10SEN   |TK10 Scan Enable
  |        |          |This bit is ignored if TK10REN (TKREN1[2]) is 1.
  |        |          |0 = TKDAT10 is invalid.
  |        |          |1 = TK10 is always enable for Touch Key scan. TKDAT10 is valid.
  |[3]     |TK11SEN   |TK11 Scan Enable
  |        |          |This bit is ignored if TK11REN (TKREN1[3]) is 1.
  |        |          |0 = TKDAT11 is invalid.
  |        |          |1 = TK11 is always enable for Touch Key scan. TKDAT11 is valid.
  |[4]     |TK12SEN   |TK12 Scan Enable
  |        |          |This bit is ignored if TK12REN (TKREN[4]) is 1.
  |        |          |0 = TKDAT12 is invalid.
  |        |          |1 = TK12 is always enable for Touch Key scan. TKDAT12 is valid.
  |[5]     |TK13SEN   |TK13 Scan Enable
  |        |          |This bit is ignored if TK13REN (TKREN1[5]) is 1.
  |        |          |0 = TKDAT13 is invalid.
  |        |          |1 = TK13 is always enable for key scan. TKDAT13 is valid.
  |[6]     |TK14SEN   |TK14 Scan Enable
  |        |          |This bit is ignored if TK14REN (TKREN1[6]) is 1.
  |        |          |0 = TKDAT14 is invalid.
  |        |          |1 = TK14 is always enabled for key scan. TKDAT14 is valid.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKREN0 TKREN0
  @ref TKREN0 Special Function Register
  Address: 8005H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TK0REN    |TK0 Reference Enable
  |        |          |0 = TK0 is not reference.
  |        |          |1 = TK0 is set as reference, and TKDAT0 is invalid.
  |[1]     |TK1REN    |TK1 Reference Enable
  |        |          |0 = TK1 is not reference.
  |        |          |1 = TK1 is set as reference, and TKDAT1 is invalid.
  |[2]     |TK2REN    |TK2 Reference Enable
  |        |          |0 = TK2 is not reference.
  |        |          |1 = TK2 is set as reference, and TKDAT2 is invalid.
  |[3]     |TK3REN    |TK3 Reference Enable
  |        |          |0 = TK3 is not reference.
  |        |          |1 = TK3 is set as reference, and TKDAT3 is invalid.
  |[4]     |TK4REN    |TK4 Reference Enable
  |        |          |0 = TK4 is not reference.
  |        |          |1 = TK4 is set as reference, and TKDAT4 is invalid.
  |[5]     |TK5REN    |TK5 Reference Enable
  |        |          |0 = TK5 is not reference.
  |        |          |1 = TK5 is set as reference, and TKDAT5 is invalid.
  |[6]     |TK6REN    |TK6 Reference Enable
  |        |          |0 = TK6 is not reference.
  |        |          |1 = TK6 is set as reference, and TKDAT6 is invalid.
  |[7]     |TK7REN    |TK7 Reference Enable
  |        |          |0 = TK7 is not reference.
  |        |          |1 = TK7 is set as reference, and TKDAT7 is invalid.
 */

/**
  @addtogroup TK_TKREN1 TKREN1
  @ref TKREN1 Special Function Register
  Address: 8006H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TK8REN    |TK8 Reference Enable
  |        |          |0 = TK8 is not reference.
  |        |          |1 = TK8 is set as reference, and TKDAT8 is invalid.
  |[1]     |TK9REN    |TK9 Reference Enable
  |        |          |0 = TK9 is not reference.
  |        |          |1 = TK9 is set as reference, and TKDAT9 is invalid.
  |[2]     |TK10REN   |TK10 Reference Enable
  |        |          |0 = TK10 is not reference.
  |        |          |1 = TK10 is set as reference, and TKDAT10 is invalid.
  |[3]     |TK11REN   |TK11 Reference Enable
  |        |          |0 = TK11 is not reference.
  |        |          |1 = TK11 is set as reference, and TKDAT11 is invalid.
  |[4]     |TK12REN   |TK12 Reference Enable
  |        |          |0 = TK12 is not reference.
  |        |          |1 = TK12 is set as reference, and TKDAT12 is invalid.
  |[5]     |TK13REN   |TK13 Reference Enable
  |        |          |0 = TK13 is not reference.
  |        |          |1 = TK13 is set as reference, and TKDAT13 is invalid.
  |[6]     |TK14REN   |TK14 Reference Enable
  |        |          |0 = TK14 is not reference.
  |        |          |1 = TK14 is set as reference, and TKDAT14 is invalid.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKINTEN TKINTEN
  @ref TKINTEN Special Function Register
  Address: 8007H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TKSCTHIE  |Touch Key Scan Complete with High/Low Threshold Control Interrupt Enable
  |        |          |0 = Key scan complete with threshold control interrupt is disable.
  |        |          |1 = Key scan complete with threshold control interrupt is enable.
  |[1]     |TKSCIE    |Touch Key Scan Complete Interrupt Enable
  |        |          |0 = Key scan complete without threshold control interrupt is disable.
  |        |          |1 = Key scan complete without threshold control interrupt is enable.
  |[7:2]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKSTA0 TKSTA0
  @ref TKSTA0 Special Function Register
  Address: 8008H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TKBUSY    |Touch Key Busy (Read Only)
  |        |          |0 = Key scan is complete or stopped.
  |        |          |1 = Key scan is proceeding.
  |[1]     |TKSCIF    |Touch Key Scan Complete Interrupt Flag
  |        |          |0 = Key scan is proceeding and data is not ready for read.
  |        |          |1 = Key scan is complete and data is ready for read in TKDATx
  |        |          |registers.
  |        |          |Note 1: The Touch Key interrupt asserts if TKSCIE bit of TKINTEN
  |        |          |register is set.
  |        |          |Note 2: The Touch Key interrupt also asserts if TKSCTHIE bit of
  |        |          |TKINTEN register is set and any channel data value is greater/less
  |        |          |than its threshold setting.
  |[2]     |TKIF      |Key Scan Interrupt Flag (Read Only)
  |        |          |0 = No threshold control event with each Key Scan.
  |        |          |1 = Threshold control event occurs with each Keys Scan.
  |        |          |This bit is 1 while any one of TKIF0~TKIF14 is 1.
  |[3]     |TKIF_ALL  |All Keys Scan Interrupt Flag
  |        |          |0 = No threshold control event with All Keys Scan.
  |        |          |1 = Threshold control event occurs with All Keys Scan.
  |        |          |This bit will be set 1 only when SCAN_ALL bit enabled. and into TK
  |        |          |interrupt if TKSCTHIE (TKINTEN.0) bit is enabled.
  |[7:4]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKSTA1 TKSTA1
  @ref TKSTA1 Special Function Register
  Address: 8009H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TKIF0     |TK0 Interrupt Flag
  |        |          |0 = No threshold control event with TK0.
  |        |          |1 = Threshold control event occurs with TK0.
  |[1]     |TKIF1     |TK1 Interrupt Flag
  |        |          |0 = No threshold control event with TK1.
  |        |          |1 = Threshold control event occurs with TK1.
  |[2]     |TKIF2     |TK2 Interrupt Flag
  |        |          |0 = No threshold control event with TK2.
  |        |          |1 = Threshold control event occurs with TK2.
  |[3]     |TKIF3     |TK3 Interrupt Flag
  |        |          |0 = No threshold control event with TK3.
  |        |          |1 = Threshold control event occurs with TK3.
  |[4]     |TKIF4     |TK4 Interrupt Flag
  |        |          |0 = No threshold control event with TK4.
  |        |          |1 = Threshold control event occurs with TK4.
  |[5]     |TKIF5     |TK5 Interrupt Flag
  |        |          |0 = No threshold control event with TK5.
  |        |          |1 = Threshold control event occurs with TK5.
  |[6]     |TKIF6     |TK6 Interrupt Flag
  |        |          |0 = No threshold control event with TK6.
  |        |          |1 = Threshold control event occurs with TK6.
  |[7]     |TKIF7     |TK7 Interrupt Flag
  |        |          |0 = No threshold control event with TK7.
  |        |          |1 = Threshold control event occurs with TK7.
 */

/**
  @addtogroup TK_TKSTA2 TKSTA2
  @ref TKSTA2 Special Function Register
  Address: 800AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[0]     |TKIF8     |TK8 Interrupt Flag
  |        |          |0 = No threshold control event with TK8.
  |        |          |1 = Threshold control event occurs with TK8.
  |[1]     |TKIF9     |TK9 Interrupt Flag
  |        |          |0 = No threshold control event with TK9.
  |        |          |1 = Threshold control event occurs with TK9.
  |[2]     |TKIF10    |TK10 Interrupt Flag
  |        |          |0 = No threshold control event with TK10.
  |        |          |1 = Threshold control event occurs with TK10.
  |[3]     |TKIF11    |TK11 Interrupt Flag
  |        |          |0 = No threshold control event with TK11.
  |        |          |1 = Threshold control event occurs with TK11.
  |[4]     |TKIF12    |TK12 Interrupt Flag
  |        |          |0 = No threshold control event with TK12.
  |        |          |1 = Threshold control event occurs with TK12.
  |[5]     |TKIF13    |TK13 Interrupt Flag
  |        |          |0 = No threshold control event with TK13.
  |        |          |1 = Threshold control event occurs with TK13.
  |[6]     |TKIF14    |TK14 Interrupt Flag
  |        |          |0 = No threshold control event with TK14.
  |        |          |1 = Threshold control event occurs with TK14.
  |[7]     |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKCCBD0 TKCCBD0
  @ref TKCCBD0 Special Function Register
  Address: 8010H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD1 TKCCBD1
  @ref TKCCBD1 Special Function Register
  Address: 8011H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD2 TKCCBD2
  @ref TKCCBD2 Special Function Register
  Address: 8012H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD3 TKCCBD3
  @ref TKCCBD3 Special Function Register
  Address: 8013H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD4 TKCCBD4
  @ref TKCCBD4 Special Function Register
  Address: 8014H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD5 TKCCBD5
  @ref TKCCBD5 Special Function Register
  Address: 8015H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD6 TKCCBD6
  @ref TKCCBD6 Special Function Register
  Address: 8016H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD7 TKCCBD7
  @ref TKCCBD7 Special Function Register
  Address: 8017H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD8 TKCCBD8
  @ref TKCCBD8 Special Function Register
  Address: 8018H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD9 TKCCBD9
  @ref TKCCBD9 Special Function Register
  Address: 8019H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD10 TKCCBD10
  @ref TKCCBD10 Special Function Register
  Address: 801AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD11 TKCCBD11
  @ref TKCCBD11 Special Function Register
  Address: 801BH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD12 TKCCBD12
  @ref TKCCBD12 Special Function Register
  Address: 801CH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD13 TKCCBD13
  @ref TKCCBD13 Special Function Register
  Address: 801DH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBD14 TKCCBD14
  @ref TKCCBD14 Special Function Register
  Address: 801EH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDx     |TKx Complement CB Data
  |        |          |This is register is used for TKx sensitivity adjustment, where x = 0
  |        |          |~14
 */

/**
  @addtogroup TK_TKCCBDALL TKCCBDALL
  @ref TKCCBDALL Special Function Register
  Address: 801FH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |CCBDALL   |TK All Scans Complement CB Data
  |        |          |This is register is used for TK all scans sensitivity adjustment
 */

/**
  @addtogroup TK_REFCBD0 REFCBD0
  @ref REFCBD0 Special Function Register
  Address: 8020H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD1 REFCBD1
  @ref REFCBD1 Special Function Register
  Address: 8021H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD2 REFCBD2
  @ref REFCBD2 Special Function Register
  Address: 8022H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD3 REFCBD3
  @ref REFCBD3 Special Function Register
  Address: 8023H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD4 REFCBD4
  @ref REFCBD4 Special Function Register
  Address: 8024H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD5 REFCBD5
  @ref REFCBD5 Special Function Register
  Address: 8025H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD6 REFCBD6
  @ref REFCBD6 Special Function Register
  Address: 8026H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD7 REFCBD7
  @ref REFCBD7 Special Function Register
  Address: 8027H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD8 REFCBD8
  @ref REFCBD8 Special Function Register
  Address: 8028H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD9 REFCBD9
  @ref REFCBD9 Special Function Register
  Address: 8029H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD10 REFCBD10
  @ref REFCBD10 Special Function Register
  Address: 802AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD11 REFCBD11
  @ref REFCBD11 Special Function Register
  Address: 802BH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD12 REFCBD12
  @ref REFCBD12 Special Function Register
  Address: 802CH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD13 REFCBD13
  @ref REFCBD13 Special Function Register
  Address: 802DH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBD14 REFCBD14
  @ref REFCBD14 Special Function Register
  Address: 802EH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDx   |Touch Key x Reference CB Data
  |        |          |This is register is used for Touch Key x Reference sensitivity
  |        |          |adjustment, where x = 0 ~14
 */

/**
  @addtogroup TK_REFCBDALL REFCBDALL
  @ref REFCBDALL Special Function Register
  Address: 802FH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |REFCBDALL |Touch Key All Scans Reference CB Data
  |        |          |This is register is used for Touch Key All Scans Reference sensitivity
  |        |          |adjustment.
 */

/**
  @addtogroup TK_TKIDLPOL0 TKIDLPOL0
  @ref TKIDLPOL0 Special Function Register
  Address: 8030H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL1 TKIDLPOL1
  @ref TKIDLPOL1 Special Function Register
  Address: 8031H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL2 TKIDLPOL2
  @ref TKIDLPOL2 Special Function Register
  Address: 8032H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL3 TKIDLPOL3
  @ref TKIDLPOL3 Special Function Register
  Address: 8033H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL4 TKIDLPOL4
  @ref TKIDLPOL4 Special Function Register
  Address: 8034H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL5 TKIDLPOL5
  @ref TKIDLPOL5 Special Function Register
  Address: 8035H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL6 TKIDLPOL6
  @ref TKIDLPOL6 Special Function Register
  Address: 8036H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL7 TKIDLPOL7
  @ref TKIDLPOL7 Special Function Register
  Address: 8037H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL8 TKIDLPOL8
  @ref TKIDLPOL8 Special Function Register
  Address: 8038H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL9 TKIDLPOL9
  @ref TKIDLPOL9 Special Function Register
  Address: 8039H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL10 TKIDLPOL10
  @ref TKIDLPOL10 Special Function Register
  Address: 803AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL11 TKIDLPOL11
  @ref TKIDLPOL11 Special Function Register
  Address: 803BH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL12 TKIDLPOL12
  @ref TKIDLPOL12 Special Function Register
  Address: 803CH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL13 TKIDLPOL13
  @ref TKIDLPOL13 Special Function Register
  Address: 803DH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKIDLPOL14 TKIDLPOL14
  @ref TKIDLPOL14 Special Function Register
  Address: 803EH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[1:0]   |IDLSx     |TKx Idle State Control
  |        |          |This register is ignored if both TKxSEN and POLENx are 0 or TKxREN is
  |        |          |1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[3:2]   |POLx      |TKx Polarity Select
  |        |          |This register is ignored if POLENx is 0 or TKxREN is 1.
  |        |          |00 = TKx connected to Gnd.
  |        |          |01 = TKx connected to AVDDH.
  |        |          |10 = Reserved.
  |        |          |11 = TKx connected to VDD.
  |        |          |Where x = 0~14
  |[4]     |POLENx    |TKx Polarity Function Enable
  |        |          |0 = Disable.
  |        |          |1 = Enable.
  |        |          |Where x = 0~14
  |[7:5]   |Reserved  |Reserved
 */

/**
  @addtogroup TK_TKDAT0 TKDAT0
  @ref TKDAT0 Special Function Register
  Address: 8040H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT1 TKDAT1
  @ref TKDAT1 Special Function Register
  Address: 8041H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT2 TKDAT2
  @ref TKDAT2 Special Function Register
  Address: 8042H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT3 TKDAT3
  @ref TKDAT3 Special Function Register
  Address: 8043H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT4 TKDAT4
  @ref TKDAT4 Special Function Register
  Address: 8044H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT5 TKDAT5
  @ref TKDAT5 Special Function Register
  Address: 8045H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT6 TKDAT6
  @ref TKDAT6 Special Function Register
  Address: 8046H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT7 TKDAT7
  @ref TKDAT7 Special Function Register
  Address: 8047H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT8 TKDAT8
  @ref TKDAT8 Special Function Register
  Address: 8048H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT9 TKDAT9
  @ref TKDAT9 Special Function Register
  Address: 8049H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT10 TKDAT10
  @ref TKDAT10 Special Function Register
  Address: 804AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT11 TKDAT11
  @ref TKDAT11 Special Function Register
  Address: 804BH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT12 TKDAT12
  @ref TKDAT12 Special Function Register
  Address: 804CH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT13 TKDAT13
  @ref TKDAT13 Special Function Register
  Address: 804DH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDAT14 TKDAT14
  @ref TKDAT14 Special Function Register
  Address: 804EH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATx    |TKx Sensing Result Data (Read Only)
  |        |          |This data is invalid if TKxSEN is 0 or TKxREN is 1 except SCAN_ALL
  |        |          |(TKCON0[3]) is 1.
  |        |          |Where x = 0~14
 */

/**
  @addtogroup TK_TKDATALL TKDATALL
  @ref TKDATALL Special Function Register
  Address: 804FH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |TKDATALL  |All Keys Scan Sensing Result Data (Read Only)
  |        |          |This data is invalid if SCAN_ALL (TKCON0[3]) is 0.
 */

/**
  @addtogroup TK_TKHTH0 TKHTH0
  @ref TKHTH0 Special Function Register
  Address: 8050H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH1 TKHTH1
  @ref TKHTH1 Special Function Register
  Address: 8051H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH2 TKHTH2
  @ref TKHTH2 Special Function Register
  Address: 8052H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH3 TKHTH3
  @ref TKHTH3 Special Function Register
  Address: 8053H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH4 TKHTH4
  @ref TKHTH4 Special Function Register
  Address: 8054H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH5 TKHTH5
  @ref TKHTH5 Special Function Register
  Address: 8055H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH6 TKHTH6
  @ref TKHTH6 Special Function Register
  Address: 8056H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH7 TKHTH7
  @ref TKHTH7 Special Function Register
  Address: 8057H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH8 TKHTH8
  @ref TKHTH8 Special Function Register
  Address: 8058H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH9 TKHTH9
  @ref TKHTH9 Special Function Register
  Address: 8059H
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH10 TKHTH10
  @ref TKHTH10 Special Function Register
  Address: 805AH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH11 TKHTH11
  @ref TKHTH11 Special Function Register
  Address: 805BH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH12 TKHTH12
  @ref TKHTH12 Special Function Register
  Address: 805CH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH13 TKHTH13
  @ref TKHTH13 Special Function Register
  Address: 805DH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTH14 TKHTH14
  @ref TKHTH14 Special Function Register
  Address: 805EH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTHx      |High Threshold of TKx
  |        |          |High level for TKx threshold control.
  |        |          |Where x= 0~14
 */

/**
  @addtogroup TK_TKHTHALL TKHTHALL
  @ref TKHTHALL Special Function Register
  Address: 805FH
  ---------------------------------------------------------------------------------------------------
  |Bits    |Name      |Descriptions
  | :----: | :----:   | :---- |
  |[7:0]   |HTH_ALL[7:0]|High Threshold of All Keys Scan
  |        |          |High level for All Keys Scan threshold control.
 */

/**@}*/ /* end of TK group */

/**@}*/ /* end of PERIPHERAL group */





/*  T2CON  */
sbit TF2        = T2CON^7;
sbit TR2        = T2CON^2;
sbit CM_RL2     = T2CON^0;

/*  PSW */
sbit CY         = PSW^7;
sbit AC         = PSW^6;
sbit F0         = PSW^5;
sbit RS1        = PSW^4;
sbit RS0        = PSW^3;
sbit OV         = PSW^2;
sbit P          = PSW^0;





